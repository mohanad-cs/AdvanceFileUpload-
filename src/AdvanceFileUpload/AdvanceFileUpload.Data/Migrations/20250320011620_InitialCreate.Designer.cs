// <auto-generated />
using System;
using AdvanceFileUpload.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdvanceFileUpload.Data.Migrations
{
    [DbContext(typeof(ApploicationDbContext))]
    [Migration("20250320011620_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AdvanceFileUpload.Domain.ChunkFile", b =>
                {
                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChunkIndex")
                        .HasColumnType("int");

                    b.Property<string>("ChunkPath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("ChunkSize")
                        .HasColumnType("bigint");

                    b.HasKey("SessionId", "ChunkIndex")
                        .HasName("PK_ChunkFile");

                    b.ToTable("ChunkFiles", (string)null);
                });

            modelBuilder.Entity("AdvanceFileUpload.Domain.FileUploadSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("CompressedFileSize")
                        .HasColumnType("bigint");

                    b.Property<int?>("CompressionAlgorithm")
                        .HasColumnType("int");

                    b.Property<int?>("CompressionLevel")
                        .HasColumnType("int");

                    b.Property<string>("CurrentHubConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxChunkSize")
                        .HasColumnType("bigint");

                    b.Property<string>("SavingDirectory")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("SessionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SessionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateOnly>("UploadDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PK_FileUploadSession");

                    b.ToTable("FileUploadSessions", (string)null);
                });

            modelBuilder.Entity("AdvanceFileUpload.Domain.ChunkFile", b =>
                {
                    b.HasOne("AdvanceFileUpload.Domain.FileUploadSession", null)
                        .WithMany("ChunkFiles")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FileUploadSession_ChunkFiles");
                });

            modelBuilder.Entity("AdvanceFileUpload.Domain.FileUploadSession", b =>
                {
                    b.Navigation("ChunkFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
