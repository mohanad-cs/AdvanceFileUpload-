### YamlMime:ManagedReference
items:
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository
  commentId: T:AdvanceFileUpload.Data.FileUploadSessionRepository
  id: FileUploadSessionRepository
  parent: AdvanceFileUpload.Data
  children:
  - AdvanceFileUpload.Data.FileUploadSessionRepository.#ctor(AdvanceFileUpload.Data.ApploicationDbContext,Microsoft.Extensions.Logging.ILogger{AdvanceFileUpload.Data.FileUploadSessionRepository})
  - AdvanceFileUpload.Data.FileUploadSessionRepository.AddAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  - AdvanceFileUpload.Data.FileUploadSessionRepository.AnyAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  - AdvanceFileUpload.Data.FileUploadSessionRepository.AnyAsync(System.Threading.CancellationToken)
  - AdvanceFileUpload.Data.FileUploadSessionRepository.CountAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  - AdvanceFileUpload.Data.FileUploadSessionRepository.CountAsync(System.Threading.CancellationToken)
  - AdvanceFileUpload.Data.FileUploadSessionRepository.FindAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  - AdvanceFileUpload.Data.FileUploadSessionRepository.GetAllAsync(System.Threading.CancellationToken)
  - AdvanceFileUpload.Data.FileUploadSessionRepository.GetByIdAsync(System.Guid,System.Threading.CancellationToken)
  - AdvanceFileUpload.Data.FileUploadSessionRepository.RemoveAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  - AdvanceFileUpload.Data.FileUploadSessionRepository.UpdateAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: FileUploadSessionRepository
  nameWithType: FileUploadSessionRepository
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository
  type: Class
  source:
    remote:
      path: src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
      branch: main
      repo: https://github.com/mohanad-cs/AdvanceFileUpload-.git
    id: FileUploadSessionRepository
    path: ../src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
    startLine: 11
  assemblies:
  - AdvanceFileUpload.Data
  namespace: AdvanceFileUpload.Data
  summary: Represents a repository for managing file upload session entities.
  example: []
  syntax:
    content: 'public class FileUploadSessionRepository : IRepository<FileUploadSession>'
    content.vb: Public Class FileUploadSessionRepository Implements IRepository(Of FileUploadSession)
  inheritance:
  - System.Object
  implements:
  - AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.#ctor(AdvanceFileUpload.Data.ApploicationDbContext,Microsoft.Extensions.Logging.ILogger{AdvanceFileUpload.Data.FileUploadSessionRepository})
  commentId: M:AdvanceFileUpload.Data.FileUploadSessionRepository.#ctor(AdvanceFileUpload.Data.ApploicationDbContext,Microsoft.Extensions.Logging.ILogger{AdvanceFileUpload.Data.FileUploadSessionRepository})
  id: '#ctor(AdvanceFileUpload.Data.ApploicationDbContext,Microsoft.Extensions.Logging.ILogger{AdvanceFileUpload.Data.FileUploadSessionRepository})'
  parent: AdvanceFileUpload.Data.FileUploadSessionRepository
  langs:
  - csharp
  - vb
  name: FileUploadSessionRepository(ApploicationDbContext, ILogger<FileUploadSessionRepository>)
  nameWithType: FileUploadSessionRepository.FileUploadSessionRepository(ApploicationDbContext, ILogger<FileUploadSessionRepository>)
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.FileUploadSessionRepository(AdvanceFileUpload.Data.ApploicationDbContext, Microsoft.Extensions.Logging.ILogger<AdvanceFileUpload.Data.FileUploadSessionRepository>)
  type: Constructor
  source:
    remote:
      path: src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
      branch: main
      repo: https://github.com/mohanad-cs/AdvanceFileUpload-.git
    id: .ctor
    path: ../src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
    startLine: 22
  assemblies:
  - AdvanceFileUpload.Data
  namespace: AdvanceFileUpload.Data
  summary: Initializes a new instance of the <xref href="AdvanceFileUpload.Data.FileUploadSessionRepository" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public FileUploadSessionRepository(ApploicationDbContext context, ILogger<FileUploadSessionRepository> logger)
    parameters:
    - id: context
      type: AdvanceFileUpload.Data.ApploicationDbContext
      description: The Application Db Context
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{AdvanceFileUpload.Data.FileUploadSessionRepository}
      description: ''
    content.vb: Public Sub New(context As ApploicationDbContext, logger As ILogger(Of FileUploadSessionRepository))
  overload: AdvanceFileUpload.Data.FileUploadSessionRepository.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: FileUploadSessionRepository.New(ApploicationDbContext, ILogger(Of FileUploadSessionRepository))
  fullName.vb: AdvanceFileUpload.Data.FileUploadSessionRepository.New(AdvanceFileUpload.Data.ApploicationDbContext, Microsoft.Extensions.Logging.ILogger(Of AdvanceFileUpload.Data.FileUploadSessionRepository))
  name.vb: New(ApploicationDbContext, ILogger(Of FileUploadSessionRepository))
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.AddAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Data.FileUploadSessionRepository.AddAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  id: AddAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Data.FileUploadSessionRepository
  langs:
  - csharp
  - vb
  name: AddAsync(FileUploadSession, CancellationToken)
  nameWithType: FileUploadSessionRepository.AddAsync(FileUploadSession, CancellationToken)
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.AddAsync(AdvanceFileUpload.Domain.FileUploadSession, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
      branch: main
      repo: https://github.com/mohanad-cs/AdvanceFileUpload-.git
    id: AddAsync
    path: ../src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
    startLine: 30
  assemblies:
  - AdvanceFileUpload.Data
  namespace: AdvanceFileUpload.Data
  summary: Asynchronously adds a new entity to the repository.
  example: []
  syntax:
    content: public Task<FileUploadSession> AddAsync(FileUploadSession entity, CancellationToken cancellationToken = default)
    parameters:
    - id: entity
      type: AdvanceFileUpload.Domain.FileUploadSession
      description: The entity to add.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{AdvanceFileUpload.Domain.FileUploadSession}
      description: A task that represents the asynchronous operation. The task result contains the added entity.
    content.vb: Public Function AddAsync(entity As FileUploadSession, cancellationToken As CancellationToken = Nothing) As Task(Of FileUploadSession)
  overload: AdvanceFileUpload.Data.FileUploadSessionRepository.AddAsync*
  implements:
  - AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.AddAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.AnyAsync(System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Data.FileUploadSessionRepository.AnyAsync(System.Threading.CancellationToken)
  id: AnyAsync(System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Data.FileUploadSessionRepository
  langs:
  - csharp
  - vb
  name: AnyAsync(CancellationToken)
  nameWithType: FileUploadSessionRepository.AnyAsync(CancellationToken)
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.AnyAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
      branch: main
      repo: https://github.com/mohanad-cs/AdvanceFileUpload-.git
    id: AnyAsync
    path: ../src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
    startLine: 46
  assemblies:
  - AdvanceFileUpload.Data
  namespace: AdvanceFileUpload.Data
  summary: Asynchronously determines whether any entities exist in the repository.
  example: []
  syntax:
    content: public Task<bool> AnyAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that represents the asynchronous operation. The task result is true if any entities exist; otherwise, false.
    content.vb: Public Function AnyAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: AdvanceFileUpload.Data.FileUploadSessionRepository.AnyAsync*
  implements:
  - AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.AnyAsync(System.Threading.CancellationToken)
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.AnyAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Data.FileUploadSessionRepository.AnyAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  id: AnyAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Data.FileUploadSessionRepository
  langs:
  - csharp
  - vb
  name: AnyAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken)
  nameWithType: FileUploadSessionRepository.AnyAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken)
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.AnyAsync(System.Linq.Expressions.Expression<System.Func<AdvanceFileUpload.Domain.FileUploadSession, bool>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
      branch: main
      repo: https://github.com/mohanad-cs/AdvanceFileUpload-.git
    id: AnyAsync
    path: ../src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
    startLine: 52
  assemblies:
  - AdvanceFileUpload.Data
  namespace: AdvanceFileUpload.Data
  summary: Asynchronously determines whether any entities match the specified predicate.
  example: []
  syntax:
    content: public Task<bool> AnyAsync(Expression<Func<FileUploadSession, bool>> predicate, CancellationToken cancellationToken = default)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}}
      description: The expression to filter entities.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that represents the asynchronous operation. The task result is true if any matching entities exist; otherwise, false.
    content.vb: Public Function AnyAsync(predicate As Expression(Of Func(Of FileUploadSession, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: AdvanceFileUpload.Data.FileUploadSessionRepository.AnyAsync*
  implements:
  - AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.AnyAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  nameWithType.vb: FileUploadSessionRepository.AnyAsync(Expression(Of Func(Of FileUploadSession, Boolean)), CancellationToken)
  fullName.vb: AdvanceFileUpload.Data.FileUploadSessionRepository.AnyAsync(System.Linq.Expressions.Expression(Of System.Func(Of AdvanceFileUpload.Domain.FileUploadSession, Boolean)), System.Threading.CancellationToken)
  name.vb: AnyAsync(Expression(Of Func(Of FileUploadSession, Boolean)), CancellationToken)
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.CountAsync(System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Data.FileUploadSessionRepository.CountAsync(System.Threading.CancellationToken)
  id: CountAsync(System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Data.FileUploadSessionRepository
  langs:
  - csharp
  - vb
  name: CountAsync(CancellationToken)
  nameWithType: FileUploadSessionRepository.CountAsync(CancellationToken)
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.CountAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
      branch: main
      repo: https://github.com/mohanad-cs/AdvanceFileUpload-.git
    id: CountAsync
    path: ../src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
    startLine: 63
  assemblies:
  - AdvanceFileUpload.Data
  namespace: AdvanceFileUpload.Data
  summary: Asynchronously counts the total number of entities in the repository.
  example: []
  syntax:
    content: public Task<int> CountAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task that represents the asynchronous operation. The task result contains the count of entities.
    content.vb: Public Function CountAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: AdvanceFileUpload.Data.FileUploadSessionRepository.CountAsync*
  implements:
  - AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.CountAsync(System.Threading.CancellationToken)
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.CountAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Data.FileUploadSessionRepository.CountAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  id: CountAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Data.FileUploadSessionRepository
  langs:
  - csharp
  - vb
  name: CountAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken)
  nameWithType: FileUploadSessionRepository.CountAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken)
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.CountAsync(System.Linq.Expressions.Expression<System.Func<AdvanceFileUpload.Domain.FileUploadSession, bool>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
      branch: main
      repo: https://github.com/mohanad-cs/AdvanceFileUpload-.git
    id: CountAsync
    path: ../src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
    startLine: 69
  assemblies:
  - AdvanceFileUpload.Data
  namespace: AdvanceFileUpload.Data
  summary: Asynchronously counts the number of entities that match the specified predicate.
  example: []
  syntax:
    content: public Task<int> CountAsync(Expression<Func<FileUploadSession, bool>> predicate, CancellationToken cancellationToken = default)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}}
      description: The expression to filter entities.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task that represents the asynchronous operation. The task result contains the count of matching entities.
    content.vb: Public Function CountAsync(predicate As Expression(Of Func(Of FileUploadSession, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: AdvanceFileUpload.Data.FileUploadSessionRepository.CountAsync*
  implements:
  - AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.CountAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  nameWithType.vb: FileUploadSessionRepository.CountAsync(Expression(Of Func(Of FileUploadSession, Boolean)), CancellationToken)
  fullName.vb: AdvanceFileUpload.Data.FileUploadSessionRepository.CountAsync(System.Linq.Expressions.Expression(Of System.Func(Of AdvanceFileUpload.Domain.FileUploadSession, Boolean)), System.Threading.CancellationToken)
  name.vb: CountAsync(Expression(Of Func(Of FileUploadSession, Boolean)), CancellationToken)
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.FindAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Data.FileUploadSessionRepository.FindAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  id: FindAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Data.FileUploadSessionRepository
  langs:
  - csharp
  - vb
  name: FindAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken)
  nameWithType: FileUploadSessionRepository.FindAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken)
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.FindAsync(System.Linq.Expressions.Expression<System.Func<AdvanceFileUpload.Domain.FileUploadSession, bool>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
      branch: main
      repo: https://github.com/mohanad-cs/AdvanceFileUpload-.git
    id: FindAsync
    path: ../src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
    startLine: 77
  assemblies:
  - AdvanceFileUpload.Data
  namespace: AdvanceFileUpload.Data
  summary: Asynchronously finds entities that match the specified predicate.
  example: []
  syntax:
    content: public Task<IEnumerable<FileUploadSession>> FindAsync(Expression<Func<FileUploadSession, bool>> predicate, CancellationToken cancellationToken = default)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}}
      description: The expression to filter entities.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{AdvanceFileUpload.Domain.FileUploadSession}}
      description: A task that represents the asynchronous operation. The task result contains a collection of matching entities.
    content.vb: Public Function FindAsync(predicate As Expression(Of Func(Of FileUploadSession, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of IEnumerable(Of FileUploadSession))
  overload: AdvanceFileUpload.Data.FileUploadSessionRepository.FindAsync*
  implements:
  - AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.FindAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  nameWithType.vb: FileUploadSessionRepository.FindAsync(Expression(Of Func(Of FileUploadSession, Boolean)), CancellationToken)
  fullName.vb: AdvanceFileUpload.Data.FileUploadSessionRepository.FindAsync(System.Linq.Expressions.Expression(Of System.Func(Of AdvanceFileUpload.Domain.FileUploadSession, Boolean)), System.Threading.CancellationToken)
  name.vb: FindAsync(Expression(Of Func(Of FileUploadSession, Boolean)), CancellationToken)
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.GetAllAsync(System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Data.FileUploadSessionRepository.GetAllAsync(System.Threading.CancellationToken)
  id: GetAllAsync(System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Data.FileUploadSessionRepository
  langs:
  - csharp
  - vb
  name: GetAllAsync(CancellationToken)
  nameWithType: FileUploadSessionRepository.GetAllAsync(CancellationToken)
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.GetAllAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
      branch: main
      repo: https://github.com/mohanad-cs/AdvanceFileUpload-.git
    id: GetAllAsync
    path: ../src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
    startLine: 87
  assemblies:
  - AdvanceFileUpload.Data
  namespace: AdvanceFileUpload.Data
  summary: Asynchronously retrieves all entities from the repository.
  example: []
  syntax:
    content: public Task<IEnumerable<FileUploadSession>> GetAllAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{AdvanceFileUpload.Domain.FileUploadSession}}
      description: A task that represents the asynchronous operation. The task result contains a collection of all entities.
    content.vb: Public Function GetAllAsync(cancellationToken As CancellationToken = Nothing) As Task(Of IEnumerable(Of FileUploadSession))
  overload: AdvanceFileUpload.Data.FileUploadSessionRepository.GetAllAsync*
  implements:
  - AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.GetAllAsync(System.Threading.CancellationToken)
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.GetByIdAsync(System.Guid,System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Data.FileUploadSessionRepository.GetByIdAsync(System.Guid,System.Threading.CancellationToken)
  id: GetByIdAsync(System.Guid,System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Data.FileUploadSessionRepository
  langs:
  - csharp
  - vb
  name: GetByIdAsync(Guid, CancellationToken)
  nameWithType: FileUploadSessionRepository.GetByIdAsync(Guid, CancellationToken)
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.GetByIdAsync(System.Guid, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
      branch: main
      repo: https://github.com/mohanad-cs/AdvanceFileUpload-.git
    id: GetByIdAsync
    path: ../src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
    startLine: 92
  assemblies:
  - AdvanceFileUpload.Data
  namespace: AdvanceFileUpload.Data
  summary: Asynchronously retrieves an entity by its unique identifier.
  example: []
  syntax:
    content: public Task<FileUploadSession?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default)
    parameters:
    - id: id
      type: System.Guid
      description: The unique identifier of the entity.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{AdvanceFileUpload.Domain.FileUploadSession}
      description: A task that represents the asynchronous operation. The task result contains the entity if found.
    content.vb: Public Function GetByIdAsync(id As Guid, cancellationToken As CancellationToken = Nothing) As Task(Of FileUploadSession)
  overload: AdvanceFileUpload.Data.FileUploadSessionRepository.GetByIdAsync*
  implements:
  - AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.GetByIdAsync(System.Guid,System.Threading.CancellationToken)
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.RemoveAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Data.FileUploadSessionRepository.RemoveAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  id: RemoveAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Data.FileUploadSessionRepository
  langs:
  - csharp
  - vb
  name: RemoveAsync(FileUploadSession, CancellationToken)
  nameWithType: FileUploadSessionRepository.RemoveAsync(FileUploadSession, CancellationToken)
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.RemoveAsync(AdvanceFileUpload.Domain.FileUploadSession, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
      branch: main
      repo: https://github.com/mohanad-cs/AdvanceFileUpload-.git
    id: RemoveAsync
    path: ../src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
    startLine: 97
  assemblies:
  - AdvanceFileUpload.Data
  namespace: AdvanceFileUpload.Data
  summary: Asynchronously removes an entity from the repository.
  example: []
  syntax:
    content: public Task<bool> RemoveAsync(FileUploadSession entity, CancellationToken cancellationToken = default)
    parameters:
    - id: entity
      type: AdvanceFileUpload.Domain.FileUploadSession
      description: The entity to remove.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that represents the asynchronous operation.
    content.vb: Public Function RemoveAsync(entity As FileUploadSession, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: AdvanceFileUpload.Data.FileUploadSessionRepository.RemoveAsync*
  implements:
  - AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.RemoveAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.UpdateAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Data.FileUploadSessionRepository.UpdateAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  id: UpdateAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Data.FileUploadSessionRepository
  langs:
  - csharp
  - vb
  name: UpdateAsync(FileUploadSession, CancellationToken)
  nameWithType: FileUploadSessionRepository.UpdateAsync(FileUploadSession, CancellationToken)
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.UpdateAsync(AdvanceFileUpload.Domain.FileUploadSession, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
      branch: main
      repo: https://github.com/mohanad-cs/AdvanceFileUpload-.git
    id: UpdateAsync
    path: ../src/AdvanceFileUpload/AdvanceFileUpload.Data/Repository/FileUploadSessionRepository.cs
    startLine: 123
  assemblies:
  - AdvanceFileUpload.Data
  namespace: AdvanceFileUpload.Data
  summary: Asynchronously updates an existing entity in the repository.
  example: []
  syntax:
    content: public Task<FileUploadSession> UpdateAsync(FileUploadSession entity, CancellationToken cancellationToken = default)
    parameters:
    - id: entity
      type: AdvanceFileUpload.Domain.FileUploadSession
      description: The entity with updated values.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{AdvanceFileUpload.Domain.FileUploadSession}
      description: A task that represents the asynchronous operation. The task result contains the updated entity.
    content.vb: Public Function UpdateAsync(entity As FileUploadSession, cancellationToken As CancellationToken = Nothing) As Task(Of FileUploadSession)
  overload: AdvanceFileUpload.Data.FileUploadSessionRepository.UpdateAsync*
  implements:
  - AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.UpdateAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
references:
- uid: AdvanceFileUpload.Data
  commentId: N:AdvanceFileUpload.Data
  href: AdvanceFileUpload.html
  name: AdvanceFileUpload.Data
  nameWithType: AdvanceFileUpload.Data
  fullName: AdvanceFileUpload.Data
  spec.csharp:
  - uid: AdvanceFileUpload
    name: AdvanceFileUpload
    href: AdvanceFileUpload.html
  - name: .
  - uid: AdvanceFileUpload.Data
    name: Data
    href: AdvanceFileUpload.Data.html
  spec.vb:
  - uid: AdvanceFileUpload
    name: AdvanceFileUpload
    href: AdvanceFileUpload.html
  - name: .
  - uid: AdvanceFileUpload.Data
    name: Data
    href: AdvanceFileUpload.Data.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}
  commentId: T:AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}
  parent: AdvanceFileUpload.Domain.Core
  definition: AdvanceFileUpload.Domain.Core.IRepository`1
  name: IRepository<FileUploadSession>
  nameWithType: IRepository<FileUploadSession>
  fullName: AdvanceFileUpload.Domain.Core.IRepository<AdvanceFileUpload.Domain.FileUploadSession>
  nameWithType.vb: IRepository(Of FileUploadSession)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of AdvanceFileUpload.Domain.FileUploadSession)
  name.vb: IRepository(Of FileUploadSession)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1
    name: IRepository
  - name: <
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: '>'
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1
    name: IRepository
  - name: (
  - name: Of
  - name: " "
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: AdvanceFileUpload.Domain.Core.IRepository`1
  commentId: T:AdvanceFileUpload.Domain.Core.IRepository`1
  href: AdvanceFileUpload.Domain.Core.IRepository-1.html
  name: IRepository<TEntity>
  nameWithType: IRepository<TEntity>
  fullName: AdvanceFileUpload.Domain.Core.IRepository<TEntity>
  nameWithType.vb: IRepository(Of TEntity)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of TEntity)
  name.vb: IRepository(Of TEntity)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1
    name: IRepository
    href: AdvanceFileUpload.Domain.Core.IRepository-1.html
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1
    name: IRepository
    href: AdvanceFileUpload.Domain.Core.IRepository-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: AdvanceFileUpload.Domain.Core
  commentId: N:AdvanceFileUpload.Domain.Core
  href: AdvanceFileUpload.html
  name: AdvanceFileUpload.Domain.Core
  nameWithType: AdvanceFileUpload.Domain.Core
  fullName: AdvanceFileUpload.Domain.Core
  spec.csharp:
  - uid: AdvanceFileUpload
    name: AdvanceFileUpload
    href: AdvanceFileUpload.html
  - name: .
  - uid: AdvanceFileUpload.Domain
    name: Domain
    href: AdvanceFileUpload.Domain.html
  - name: .
  - uid: AdvanceFileUpload.Domain.Core
    name: Core
    href: AdvanceFileUpload.Domain.Core.html
  spec.vb:
  - uid: AdvanceFileUpload
    name: AdvanceFileUpload
    href: AdvanceFileUpload.html
  - name: .
  - uid: AdvanceFileUpload.Domain
    name: Domain
    href: AdvanceFileUpload.Domain.html
  - name: .
  - uid: AdvanceFileUpload.Domain.Core
    name: Core
    href: AdvanceFileUpload.Domain.Core.html
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository
  commentId: T:AdvanceFileUpload.Data.FileUploadSessionRepository
  href: AdvanceFileUpload.Data.FileUploadSessionRepository.html
  name: FileUploadSessionRepository
  nameWithType: FileUploadSessionRepository
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.#ctor*
  commentId: Overload:AdvanceFileUpload.Data.FileUploadSessionRepository.#ctor
  href: AdvanceFileUpload.Data.FileUploadSessionRepository.html#AdvanceFileUpload_Data_FileUploadSessionRepository__ctor_AdvanceFileUpload_Data_ApploicationDbContext_Microsoft_Extensions_Logging_ILogger_AdvanceFileUpload_Data_FileUploadSessionRepository__
  name: FileUploadSessionRepository
  nameWithType: FileUploadSessionRepository.FileUploadSessionRepository
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.FileUploadSessionRepository
  nameWithType.vb: FileUploadSessionRepository.New
  fullName.vb: AdvanceFileUpload.Data.FileUploadSessionRepository.New
  name.vb: New
- uid: AdvanceFileUpload.Data.ApploicationDbContext
  commentId: T:AdvanceFileUpload.Data.ApploicationDbContext
  parent: AdvanceFileUpload.Data
  href: AdvanceFileUpload.Data.ApploicationDbContext.html
  name: ApploicationDbContext
  nameWithType: ApploicationDbContext
  fullName: AdvanceFileUpload.Data.ApploicationDbContext
- uid: Microsoft.Extensions.Logging.ILogger{AdvanceFileUpload.Data.FileUploadSessionRepository}
  commentId: T:Microsoft.Extensions.Logging.ILogger{AdvanceFileUpload.Data.FileUploadSessionRepository}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  name: ILogger<FileUploadSessionRepository>
  nameWithType: ILogger<FileUploadSessionRepository>
  fullName: Microsoft.Extensions.Logging.ILogger<AdvanceFileUpload.Data.FileUploadSessionRepository>
  nameWithType.vb: ILogger(Of FileUploadSessionRepository)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of AdvanceFileUpload.Data.FileUploadSessionRepository)
  name.vb: ILogger(Of FileUploadSessionRepository)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: <
  - uid: AdvanceFileUpload.Data.FileUploadSessionRepository
    name: FileUploadSessionRepository
    href: AdvanceFileUpload.Data.FileUploadSessionRepository.html
  - name: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: (
  - name: Of
  - name: " "
  - uid: AdvanceFileUpload.Data.FileUploadSessionRepository
    name: FileUploadSessionRepository
    href: AdvanceFileUpload.Data.FileUploadSessionRepository.html
  - name: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: <
  - name: TCategoryName
  - name: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: (
  - name: Of
  - name: " "
  - name: TCategoryName
  - name: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.AddAsync*
  commentId: Overload:AdvanceFileUpload.Data.FileUploadSessionRepository.AddAsync
  href: AdvanceFileUpload.Data.FileUploadSessionRepository.html#AdvanceFileUpload_Data_FileUploadSessionRepository_AddAsync_AdvanceFileUpload_Domain_FileUploadSession_System_Threading_CancellationToken_
  name: AddAsync
  nameWithType: FileUploadSessionRepository.AddAsync
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.AddAsync
- uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.AddAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.AddAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}
  definition: AdvanceFileUpload.Domain.Core.IRepository`1.AddAsync(`0,System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: AddAsync(FileUploadSession, CancellationToken)
  nameWithType: IRepository<FileUploadSession>.AddAsync(FileUploadSession, CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<AdvanceFileUpload.Domain.FileUploadSession>.AddAsync(AdvanceFileUpload.Domain.FileUploadSession, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of FileUploadSession).AddAsync(FileUploadSession, CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of AdvanceFileUpload.Domain.FileUploadSession).AddAsync(AdvanceFileUpload.Domain.FileUploadSession, System.Threading.CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.AddAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
    name: AddAsync
  - name: (
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.AddAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
    name: AddAsync
  - name: (
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: AdvanceFileUpload.Domain.FileUploadSession
  commentId: T:AdvanceFileUpload.Domain.FileUploadSession
  parent: AdvanceFileUpload.Domain
  href: AdvanceFileUpload.Domain.FileUploadSession.html
  name: FileUploadSession
  nameWithType: FileUploadSession
  fullName: AdvanceFileUpload.Domain.FileUploadSession
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{AdvanceFileUpload.Domain.FileUploadSession}
  commentId: T:System.Threading.Tasks.Task{AdvanceFileUpload.Domain.FileUploadSession}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<FileUploadSession>
  nameWithType: Task<FileUploadSession>
  fullName: System.Threading.Tasks.Task<AdvanceFileUpload.Domain.FileUploadSession>
  nameWithType.vb: Task(Of FileUploadSession)
  fullName.vb: System.Threading.Tasks.Task(Of AdvanceFileUpload.Domain.FileUploadSession)
  name.vb: Task(Of FileUploadSession)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: )
- uid: AdvanceFileUpload.Domain.Core.IRepository`1.AddAsync(`0,System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository`1.AddAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: AddAsync(TEntity, CancellationToken)
  nameWithType: IRepository<TEntity>.AddAsync(TEntity, CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<TEntity>.AddAsync(TEntity, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).AddAsync(TEntity, CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of TEntity).AddAsync(TEntity, System.Threading.CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.AddAsync(`0,System.Threading.CancellationToken)
    name: AddAsync
  - name: (
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.AddAsync(`0,System.Threading.CancellationToken)
    name: AddAsync
  - name: (
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: AdvanceFileUpload.Domain
  commentId: N:AdvanceFileUpload.Domain
  href: AdvanceFileUpload.html
  name: AdvanceFileUpload.Domain
  nameWithType: AdvanceFileUpload.Domain
  fullName: AdvanceFileUpload.Domain
  spec.csharp:
  - uid: AdvanceFileUpload
    name: AdvanceFileUpload
    href: AdvanceFileUpload.html
  - name: .
  - uid: AdvanceFileUpload.Domain
    name: Domain
    href: AdvanceFileUpload.Domain.html
  spec.vb:
  - uid: AdvanceFileUpload
    name: AdvanceFileUpload
    href: AdvanceFileUpload.html
  - name: .
  - uid: AdvanceFileUpload.Domain
    name: Domain
    href: AdvanceFileUpload.Domain.html
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.AnyAsync*
  commentId: Overload:AdvanceFileUpload.Data.FileUploadSessionRepository.AnyAsync
  href: AdvanceFileUpload.Data.FileUploadSessionRepository.html#AdvanceFileUpload_Data_FileUploadSessionRepository_AnyAsync_System_Threading_CancellationToken_
  name: AnyAsync
  nameWithType: FileUploadSessionRepository.AnyAsync
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.AnyAsync
- uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.AnyAsync(System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.AnyAsync(System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}
  definition: AdvanceFileUpload.Domain.Core.IRepository`1.AnyAsync(System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: AnyAsync(CancellationToken)
  nameWithType: IRepository<FileUploadSession>.AnyAsync(CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<AdvanceFileUpload.Domain.FileUploadSession>.AnyAsync(System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of FileUploadSession).AnyAsync(CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of AdvanceFileUpload.Domain.FileUploadSession).AnyAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.AnyAsync(System.Threading.CancellationToken)
    name: AnyAsync
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.AnyAsync(System.Threading.CancellationToken)
    name: AnyAsync
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: AdvanceFileUpload.Domain.Core.IRepository`1.AnyAsync(System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository`1.AnyAsync(System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: AnyAsync(CancellationToken)
  nameWithType: IRepository<TEntity>.AnyAsync(CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<TEntity>.AnyAsync(System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).AnyAsync(CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of TEntity).AnyAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.AnyAsync(System.Threading.CancellationToken)
    name: AnyAsync
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.AnyAsync(System.Threading.CancellationToken)
    name: AnyAsync
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.AnyAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.AnyAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}
  definition: AdvanceFileUpload.Domain.Core.IRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: AnyAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken)
  nameWithType: IRepository<FileUploadSession>.AnyAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<AdvanceFileUpload.Domain.FileUploadSession>.AnyAsync(System.Linq.Expressions.Expression<System.Func<AdvanceFileUpload.Domain.FileUploadSession, bool>>, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of FileUploadSession).AnyAsync(Expression(Of Func(Of FileUploadSession, Boolean)), CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of AdvanceFileUpload.Domain.FileUploadSession).AnyAsync(System.Linq.Expressions.Expression(Of System.Func(Of AdvanceFileUpload.Domain.FileUploadSession, Boolean)), System.Threading.CancellationToken)
  name.vb: AnyAsync(Expression(Of Func(Of FileUploadSession, Boolean)), CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.AnyAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
    name: AnyAsync
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.AnyAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
    name: AnyAsync
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<FileUploadSession, bool>>
  nameWithType: Expression<Func<FileUploadSession, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<AdvanceFileUpload.Domain.FileUploadSession, bool>>
  nameWithType.vb: Expression(Of Func(Of FileUploadSession, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of AdvanceFileUpload.Domain.FileUploadSession, Boolean))
  name.vb: Expression(Of Func(Of FileUploadSession, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: AdvanceFileUpload.Domain.Core.IRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: AnyAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType: IRepository<TEntity>.AnyAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<TEntity>.AnyAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).AnyAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of TEntity).AnyAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  name.vb: AnyAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
    name: AnyAsync
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
    name: AnyAsync
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.CountAsync*
  commentId: Overload:AdvanceFileUpload.Data.FileUploadSessionRepository.CountAsync
  href: AdvanceFileUpload.Data.FileUploadSessionRepository.html#AdvanceFileUpload_Data_FileUploadSessionRepository_CountAsync_System_Threading_CancellationToken_
  name: CountAsync
  nameWithType: FileUploadSessionRepository.CountAsync
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.CountAsync
- uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.CountAsync(System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.CountAsync(System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}
  definition: AdvanceFileUpload.Domain.Core.IRepository`1.CountAsync(System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CountAsync(CancellationToken)
  nameWithType: IRepository<FileUploadSession>.CountAsync(CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<AdvanceFileUpload.Domain.FileUploadSession>.CountAsync(System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of FileUploadSession).CountAsync(CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of AdvanceFileUpload.Domain.FileUploadSession).CountAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.CountAsync(System.Threading.CancellationToken)
    name: CountAsync
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.CountAsync(System.Threading.CancellationToken)
    name: CountAsync
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int>
  nameWithType: Task<int>
  fullName: System.Threading.Tasks.Task<int>
  nameWithType.vb: Task(Of Integer)
  fullName.vb: System.Threading.Tasks.Task(Of Integer)
  name.vb: Task(Of Integer)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: AdvanceFileUpload.Domain.Core.IRepository`1.CountAsync(System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository`1.CountAsync(System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CountAsync(CancellationToken)
  nameWithType: IRepository<TEntity>.CountAsync(CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<TEntity>.CountAsync(System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).CountAsync(CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of TEntity).CountAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.CountAsync(System.Threading.CancellationToken)
    name: CountAsync
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.CountAsync(System.Threading.CancellationToken)
    name: CountAsync
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.CountAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.CountAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}
  definition: AdvanceFileUpload.Domain.Core.IRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: CountAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken)
  nameWithType: IRepository<FileUploadSession>.CountAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<AdvanceFileUpload.Domain.FileUploadSession>.CountAsync(System.Linq.Expressions.Expression<System.Func<AdvanceFileUpload.Domain.FileUploadSession, bool>>, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of FileUploadSession).CountAsync(Expression(Of Func(Of FileUploadSession, Boolean)), CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of AdvanceFileUpload.Domain.FileUploadSession).CountAsync(System.Linq.Expressions.Expression(Of System.Func(Of AdvanceFileUpload.Domain.FileUploadSession, Boolean)), System.Threading.CancellationToken)
  name.vb: CountAsync(Expression(Of Func(Of FileUploadSession, Boolean)), CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.CountAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
    name: CountAsync
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.CountAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
    name: CountAsync
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: AdvanceFileUpload.Domain.Core.IRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: CountAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType: IRepository<TEntity>.CountAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<TEntity>.CountAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).CountAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of TEntity).CountAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  name.vb: CountAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
    name: CountAsync
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
    name: CountAsync
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.FindAsync*
  commentId: Overload:AdvanceFileUpload.Data.FileUploadSessionRepository.FindAsync
  href: AdvanceFileUpload.Data.FileUploadSessionRepository.html#AdvanceFileUpload_Data_FileUploadSessionRepository_FindAsync_System_Linq_Expressions_Expression_System_Func_AdvanceFileUpload_Domain_FileUploadSession_System_Boolean___System_Threading_CancellationToken_
  name: FindAsync
  nameWithType: FileUploadSessionRepository.FindAsync
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.FindAsync
- uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.FindAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.FindAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}
  definition: AdvanceFileUpload.Domain.Core.IRepository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: FindAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken)
  nameWithType: IRepository<FileUploadSession>.FindAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<AdvanceFileUpload.Domain.FileUploadSession>.FindAsync(System.Linq.Expressions.Expression<System.Func<AdvanceFileUpload.Domain.FileUploadSession, bool>>, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of FileUploadSession).FindAsync(Expression(Of Func(Of FileUploadSession, Boolean)), CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of AdvanceFileUpload.Domain.FileUploadSession).FindAsync(System.Linq.Expressions.Expression(Of System.Func(Of AdvanceFileUpload.Domain.FileUploadSession, Boolean)), System.Threading.CancellationToken)
  name.vb: FindAsync(Expression(Of Func(Of FileUploadSession, Boolean)), CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.FindAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
    name: FindAsync
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.FindAsync(System.Linq.Expressions.Expression{System.Func{AdvanceFileUpload.Domain.FileUploadSession,System.Boolean}},System.Threading.CancellationToken)
    name: FindAsync
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{AdvanceFileUpload.Domain.FileUploadSession}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{AdvanceFileUpload.Domain.FileUploadSession}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEnumerable<FileUploadSession>>
  nameWithType: Task<IEnumerable<FileUploadSession>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<AdvanceFileUpload.Domain.FileUploadSession>>
  nameWithType.vb: Task(Of IEnumerable(Of FileUploadSession))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of AdvanceFileUpload.Domain.FileUploadSession))
  name.vb: Task(Of IEnumerable(Of FileUploadSession))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: )
  - name: )
- uid: AdvanceFileUpload.Domain.Core.IRepository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: FindAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType: IRepository<TEntity>.FindAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<TEntity>.FindAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).FindAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of TEntity).FindAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  name.vb: FindAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
    name: FindAsync
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
    name: FindAsync
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.GetAllAsync*
  commentId: Overload:AdvanceFileUpload.Data.FileUploadSessionRepository.GetAllAsync
  href: AdvanceFileUpload.Data.FileUploadSessionRepository.html#AdvanceFileUpload_Data_FileUploadSessionRepository_GetAllAsync_System_Threading_CancellationToken_
  name: GetAllAsync
  nameWithType: FileUploadSessionRepository.GetAllAsync
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.GetAllAsync
- uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.GetAllAsync(System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.GetAllAsync(System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}
  definition: AdvanceFileUpload.Domain.Core.IRepository`1.GetAllAsync(System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: GetAllAsync(CancellationToken)
  nameWithType: IRepository<FileUploadSession>.GetAllAsync(CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<AdvanceFileUpload.Domain.FileUploadSession>.GetAllAsync(System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of FileUploadSession).GetAllAsync(CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of AdvanceFileUpload.Domain.FileUploadSession).GetAllAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.GetAllAsync(System.Threading.CancellationToken)
    name: GetAllAsync
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.GetAllAsync(System.Threading.CancellationToken)
    name: GetAllAsync
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: AdvanceFileUpload.Domain.Core.IRepository`1.GetAllAsync(System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository`1.GetAllAsync(System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: GetAllAsync(CancellationToken)
  nameWithType: IRepository<TEntity>.GetAllAsync(CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<TEntity>.GetAllAsync(System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).GetAllAsync(CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of TEntity).GetAllAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.GetAllAsync(System.Threading.CancellationToken)
    name: GetAllAsync
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.GetAllAsync(System.Threading.CancellationToken)
    name: GetAllAsync
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.GetByIdAsync*
  commentId: Overload:AdvanceFileUpload.Data.FileUploadSessionRepository.GetByIdAsync
  href: AdvanceFileUpload.Data.FileUploadSessionRepository.html#AdvanceFileUpload_Data_FileUploadSessionRepository_GetByIdAsync_System_Guid_System_Threading_CancellationToken_
  name: GetByIdAsync
  nameWithType: FileUploadSessionRepository.GetByIdAsync
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.GetByIdAsync
- uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.GetByIdAsync(System.Guid,System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.GetByIdAsync(System.Guid,System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}
  definition: AdvanceFileUpload.Domain.Core.IRepository`1.GetByIdAsync(System.Guid,System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: GetByIdAsync(Guid, CancellationToken)
  nameWithType: IRepository<FileUploadSession>.GetByIdAsync(Guid, CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<AdvanceFileUpload.Domain.FileUploadSession>.GetByIdAsync(System.Guid, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of FileUploadSession).GetByIdAsync(Guid, CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of AdvanceFileUpload.Domain.FileUploadSession).GetByIdAsync(System.Guid, System.Threading.CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.GetByIdAsync(System.Guid,System.Threading.CancellationToken)
    name: GetByIdAsync
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.GetByIdAsync(System.Guid,System.Threading.CancellationToken)
    name: GetByIdAsync
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: AdvanceFileUpload.Domain.Core.IRepository`1.GetByIdAsync(System.Guid,System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository`1.GetByIdAsync(System.Guid,System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: GetByIdAsync(Guid, CancellationToken)
  nameWithType: IRepository<TEntity>.GetByIdAsync(Guid, CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<TEntity>.GetByIdAsync(System.Guid, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).GetByIdAsync(Guid, CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of TEntity).GetByIdAsync(System.Guid, System.Threading.CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.GetByIdAsync(System.Guid,System.Threading.CancellationToken)
    name: GetByIdAsync
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.GetByIdAsync(System.Guid,System.Threading.CancellationToken)
    name: GetByIdAsync
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.RemoveAsync*
  commentId: Overload:AdvanceFileUpload.Data.FileUploadSessionRepository.RemoveAsync
  href: AdvanceFileUpload.Data.FileUploadSessionRepository.html#AdvanceFileUpload_Data_FileUploadSessionRepository_RemoveAsync_AdvanceFileUpload_Domain_FileUploadSession_System_Threading_CancellationToken_
  name: RemoveAsync
  nameWithType: FileUploadSessionRepository.RemoveAsync
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.RemoveAsync
- uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.RemoveAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.RemoveAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}
  definition: AdvanceFileUpload.Domain.Core.IRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: RemoveAsync(FileUploadSession, CancellationToken)
  nameWithType: IRepository<FileUploadSession>.RemoveAsync(FileUploadSession, CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<AdvanceFileUpload.Domain.FileUploadSession>.RemoveAsync(AdvanceFileUpload.Domain.FileUploadSession, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of FileUploadSession).RemoveAsync(FileUploadSession, CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of AdvanceFileUpload.Domain.FileUploadSession).RemoveAsync(AdvanceFileUpload.Domain.FileUploadSession, System.Threading.CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.RemoveAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
    name: RemoveAsync
  - name: (
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.RemoveAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
    name: RemoveAsync
  - name: (
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: AdvanceFileUpload.Domain.Core.IRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: RemoveAsync(TEntity, CancellationToken)
  nameWithType: IRepository<TEntity>.RemoveAsync(TEntity, CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<TEntity>.RemoveAsync(TEntity, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).RemoveAsync(TEntity, CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of TEntity).RemoveAsync(TEntity, System.Threading.CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)
    name: RemoveAsync
  - name: (
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)
    name: RemoveAsync
  - name: (
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: AdvanceFileUpload.Data.FileUploadSessionRepository.UpdateAsync*
  commentId: Overload:AdvanceFileUpload.Data.FileUploadSessionRepository.UpdateAsync
  href: AdvanceFileUpload.Data.FileUploadSessionRepository.html#AdvanceFileUpload_Data_FileUploadSessionRepository_UpdateAsync_AdvanceFileUpload_Domain_FileUploadSession_System_Threading_CancellationToken_
  name: UpdateAsync
  nameWithType: FileUploadSessionRepository.UpdateAsync
  fullName: AdvanceFileUpload.Data.FileUploadSessionRepository.UpdateAsync
- uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.UpdateAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.UpdateAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
  parent: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}
  definition: AdvanceFileUpload.Domain.Core.IRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: UpdateAsync(FileUploadSession, CancellationToken)
  nameWithType: IRepository<FileUploadSession>.UpdateAsync(FileUploadSession, CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<AdvanceFileUpload.Domain.FileUploadSession>.UpdateAsync(AdvanceFileUpload.Domain.FileUploadSession, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of FileUploadSession).UpdateAsync(FileUploadSession, CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of AdvanceFileUpload.Domain.FileUploadSession).UpdateAsync(AdvanceFileUpload.Domain.FileUploadSession, System.Threading.CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.UpdateAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
    name: UpdateAsync
  - name: (
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository{AdvanceFileUpload.Domain.FileUploadSession}.UpdateAsync(AdvanceFileUpload.Domain.FileUploadSession,System.Threading.CancellationToken)
    name: UpdateAsync
  - name: (
  - uid: AdvanceFileUpload.Domain.FileUploadSession
    name: FileUploadSession
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: AdvanceFileUpload.Domain.Core.IRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)
  commentId: M:AdvanceFileUpload.Domain.Core.IRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: UpdateAsync(TEntity, CancellationToken)
  nameWithType: IRepository<TEntity>.UpdateAsync(TEntity, CancellationToken)
  fullName: AdvanceFileUpload.Domain.Core.IRepository<TEntity>.UpdateAsync(TEntity, System.Threading.CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).UpdateAsync(TEntity, CancellationToken)
  fullName.vb: AdvanceFileUpload.Domain.Core.IRepository(Of TEntity).UpdateAsync(TEntity, System.Threading.CancellationToken)
  spec.csharp:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
  - name: (
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: AdvanceFileUpload.Domain.Core.IRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
  - name: (
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
