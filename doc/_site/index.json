{
  "api/AdvanceFileUpload.API.CertificateSettings.html": {
    "href": "api/AdvanceFileUpload.API.CertificateSettings.html",
    "title": "Class CertificateSettings | Advance File Uploading API",
    "keywords": "Class CertificateSettings Namespace AdvanceFileUpload.API Assembly AdvanceFileUpload.API.dll Represents the certificate configuration options for HTTPS endpoints. Provides information for locating and authenticating the certificate. public class CertificateSettings Inheritance object CertificateSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Location Gets or sets the certificate store location, such as \"LocalMachine\" or \"CurrentUser\". public string Location { get; set; } Property Value string Password Gets or sets the certificate password. It is recommended to use environment variables or secure stores for production. public string Password { get; set; } Property Value string Path Gets or sets the file path to the certificate (PFX or P12 format). public string Path { get; set; } Property Value string Store Gets or sets the name of the Windows certificate store (e.g., \"My\", \"Root\"). public string Store { get; set; } Property Value string Subject Gets or sets the subject name for certificate lookup in the store. public string Subject { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.API.Controllers.FileUploadController.html": {
    "href": "api/AdvanceFileUpload.API.Controllers.FileUploadController.html",
    "title": "Class FileUploadController | Advance File Uploading API",
    "keywords": "Class FileUploadController Namespace AdvanceFileUpload.API.Controllers Assembly AdvanceFileUpload.API.dll [ApiController] public class FileUploadController : ControllerBase Inheritance object ControllerBase FileUploadController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadController(IUploadManger) public FileUploadController(IUploadManger uploadManager) Parameters uploadManager IUploadManger Methods CancelUploadSessionAsync(CancelUploadSessionRequest, CancellationToken) Cancels the file upload session. [HttpPost(\"api/upload/cancel-session\")] [ProducesResponseType(200)] [ProducesResponseType(400)] [ProducesResponseType(429)] public Task<ActionResult<bool>> CancelUploadSessionAsync(CancelUploadSessionRequest request, CancellationToken cancellationToken) Parameters request CancelUploadSessionRequest cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult<bool>> Indicates whether the session was canceled successfully. CompleteUploadSessionAsync(CompleteUploadSessionRequest, CancellationToken) Completes the file upload session. [HttpPost(\"api/upload/complete-session\")] [ProducesResponseType(200)] [ProducesResponseType(400)] [ProducesResponseType(429)] public Task<ActionResult<bool>> CompleteUploadSessionAsync(CompleteUploadSessionRequest request, CancellationToken cancellationToken) Parameters request CompleteUploadSessionRequest The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult<bool>> Indicates whether the file upload was completed successfully. CreateUploadSessionAsync(CreateUploadSessionRequest, CancellationToken) Creates a new file upload session. [HttpPost(\"api/upload/create-session\")] [ProducesResponseType(200)] [ProducesResponseType(400)] [ProducesResponseType(429)] public Task<ActionResult<CreateUploadSessionResponse>> CreateUploadSessionAsync(CreateUploadSessionRequest request, CancellationToken cancellationToken) Parameters request CreateUploadSessionRequest The request containing the details of the file to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult<CreateUploadSessionResponse>> The response with the details of the created upload session. GetUploadSessionStatusAsync(Guid, CancellationToken) Gets the status of the upload session. [HttpGet(\"api/upload/session-status\")] [ProducesResponseType(200)] [ProducesResponseType(404)] [ProducesResponseType(429)] public Task<ActionResult<UploadSessionStatusResponse?>> GetUploadSessionStatusAsync(Guid sessionId, CancellationToken cancellationToken) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult<UploadSessionStatusResponse>> The response with the status of the upload session. PauseUploadSessionAsync(PauseUploadSessionRequest, CancellationToken) Pauses the file upload session. [HttpPost(\"api/upload/pause-session\")] [ProducesResponseType(200)] [ProducesResponseType(400)] [ProducesResponseType(429)] public Task<ActionResult<bool>> PauseUploadSessionAsync(PauseUploadSessionRequest request, CancellationToken cancellationToken) Parameters request PauseUploadSessionRequest cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult<bool>> Indicates whether the session was paused successfully. RedirectToHealthEndpoint() [HttpGet(\"api/upload/health\")] public RedirectResult RedirectToHealthEndpoint() Returns RedirectResult RedirectToSwaggerUi() [Route(\"\")] [HttpGet] [ApiExplorerSettings(IgnoreApi = true)] public RedirectResult RedirectToSwaggerUi() Returns RedirectResult UploadChunkAsync(UploadChunkRequest, CancellationToken) Uploads a chunk of the file. [HttpPost(\"api/upload/upload-chunk\")] [ProducesResponseType(200)] [ProducesResponseType(400)] [ProducesResponseType(429)] public Task<ActionResult<bool>> UploadChunkAsync(UploadChunkRequest request, CancellationToken cancellationToken) Parameters request UploadChunkRequest The request containing the details of the chunk to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult<bool>> Indicates whether the chunk was uploaded successfully."
  },
  "api/AdvanceFileUpload.API.Controllers.html": {
    "href": "api/AdvanceFileUpload.API.Controllers.html",
    "title": "Namespace AdvanceFileUpload.API.Controllers | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.API.Controllers Classes FileUploadController"
  },
  "api/AdvanceFileUpload.API.DailyPeriodicTimer.html": {
    "href": "api/AdvanceFileUpload.API.DailyPeriodicTimer.html",
    "title": "Class DailyPeriodicTimer | Advance File Uploading API",
    "keywords": "Class DailyPeriodicTimer Namespace AdvanceFileUpload.API Assembly AdvanceFileUpload.API.dll A timer that provides periodic ticks for executing tasks on a daily basis. public sealed class DailyPeriodicTimer : IPeriodicTimer, IDisposable Inheritance object DailyPeriodicTimer Implements IPeriodicTimer IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Period Gets the period of the timer. public TimeSpan Period { get; } Property Value TimeSpan Methods Dispose() Releases the resources used by the timer. public void Dispose() WaitForNextTickAsync(CancellationToken) Waits asynchronously for the next tick of the timer. public ValueTask<bool> WaitForNextTickAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. Returns ValueTask<bool> A task that resolves to true if the timer ticked, or false if the wait was canceled."
  },
  "api/AdvanceFileUpload.API.EndpointSettings.html": {
    "href": "api/AdvanceFileUpload.API.EndpointSettings.html",
    "title": "Class EndpointSettings | Advance File Uploading API",
    "keywords": "Class EndpointSettings Namespace AdvanceFileUpload.API Assembly AdvanceFileUpload.API.dll Defines the configuration for an individual endpoint, including network binding, security, and protocol options. public class EndpointSettings Inheritance object EndpointSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Certificate Gets or sets the certificate settings for HTTPS on this endpoint. public CertificateSettings Certificate { get; set; } Property Value CertificateSettings ClientCertificateMode Gets or sets the client certificate mode. Options include: \"NoCertificate\", \"AllowCertificate\", \"RequireCertificate\". public string ClientCertificateMode { get; set; } Property Value string Https Gets or sets a value indicating whether HTTPS is enabled for this endpoint. public bool Https { get; set; } Property Value bool Ip Gets or sets the IP address to bind. Use \"0.0.0.0\" to listen on all network interfaces. public string Ip { get; set; } Property Value string Default Value: 0.0.0.0 Port Gets or sets the port number on which the server will listen. public int Port { get; set; } Property Value int Protocols Gets or sets the allowed HTTP protocols for this endpoint. Supported values are \"Http1\", \"Http2\", and \"Http3\". public List<string> Protocols { get; set; } Property Value List<string> SslProtocols Gets or sets the allowed SSL/TLS protocol versions. Typically includes \"Tls12\" and \"Tls13\". public List<string> SslProtocols { get; set; } Property Value List<string>"
  },
  "api/AdvanceFileUpload.API.IPeriodicTimer.html": {
    "href": "api/AdvanceFileUpload.API.IPeriodicTimer.html",
    "title": "Interface IPeriodicTimer | Advance File Uploading API",
    "keywords": "Interface IPeriodicTimer Namespace AdvanceFileUpload.API Assembly AdvanceFileUpload.API.dll Represents a timer that provides periodic ticks for executing tasks. public interface IPeriodicTimer : IDisposable Inherited Members IDisposable.Dispose() Properties Period Gets the period of the timer. TimeSpan Period { get; } Property Value TimeSpan Methods WaitForNextTickAsync(CancellationToken) Waits asynchronously for the next tick of the timer. ValueTask<bool> WaitForNextTickAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. Returns ValueTask<bool> A task that resolves to true if the timer ticked, or false if the wait was canceled."
  },
  "api/AdvanceFileUpload.API.KestrelConfiguration.html": {
    "href": "api/AdvanceFileUpload.API.KestrelConfiguration.html",
    "title": "Class KestrelConfiguration | Advance File Uploading API",
    "keywords": "Class KestrelConfiguration Namespace AdvanceFileUpload.API Assembly AdvanceFileUpload.API.dll Represents the configurable settings for the Kestrel web server. Includes endpoint definitions, connection limits, HTTPS defaults, and HTTP/2 and HTTP/3 specific configurations. public class KestrelConfiguration Inheritance object KestrelConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SectionName The configuration section name for Kestrel server options. public const string SectionName = \"KestrelConfiguration\" Field Value string Properties Endpoints Gets or sets the dictionary of endpoints for the server. Key represents the endpoint identifier, and value holds the endpoint settings. public Dictionary<string, EndpointSettings> Endpoints { get; set; } Property Value Dictionary<string, EndpointSettings> Http2 Gets or sets the HTTP/2 specific configuration settings. public KestrelHttp2Settings Http2 { get; set; } Property Value KestrelHttp2Settings Http3 Gets or sets the HTTP/3 specific configuration settings. public KestrelHttp3Settings Http3 { get; set; } Property Value KestrelHttp3Settings Https Gets or sets the global HTTPS configuration defaults. public KestrelHttpsSettings Https { get; set; } Property Value KestrelHttpsSettings Limits Gets or sets the server-wide connection and request limits. public KestrelLimits Limits { get; set; } Property Value KestrelLimits"
  },
  "api/AdvanceFileUpload.API.KestrelHttp2Settings.html": {
    "href": "api/AdvanceFileUpload.API.KestrelHttp2Settings.html",
    "title": "Class KestrelHttp2Settings | Advance File Uploading API",
    "keywords": "Class KestrelHttp2Settings Namespace AdvanceFileUpload.API Assembly AdvanceFileUpload.API.dll Contains configuration settings specific to HTTP/2. Manages stream limits, header compression, and frame sizes. public class KestrelHttp2Settings Inheritance object KestrelHttp2Settings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderTableSize Gets or sets the size of the HPACK header compression table. Limits the size of the header compression tables, in octets, the HPACK encoder and decoder on the server can use. <p> Value must be greater than or equal to 0, defaults to 4096 octets (4 KiB). </p> public int HeaderTableSize { get; set; } Property Value int MaxFrameSize Gets or sets the maximum allowed frame size in bytes. Indicates the size of the largest frame payload that is allowed to be received, in octets. The size must be between 2^14 and 2^24-1. <p> Value must be between 2^14 and 2^24, defaults to 2^14 octets (16 KiB). </p> public int MaxFrameSize { get; set; } Property Value int MaxStreamsPerConnection Gets or sets the maximum number of concurrent streams allowed per connection. Limits the number of concurrent request streams per HTTP/2 connection. Excess streams will be refused. <p> Value must be greater than 0, defaults to 100 streams. </p> public int MaxStreamsPerConnection { get; set; } Property Value int"
  },
  "api/AdvanceFileUpload.API.KestrelHttp3Settings.html": {
    "href": "api/AdvanceFileUpload.API.KestrelHttp3Settings.html",
    "title": "Class KestrelHttp3Settings | Advance File Uploading API",
    "keywords": "Class KestrelHttp3Settings Namespace AdvanceFileUpload.API Assembly AdvanceFileUpload.API.dll Contains configuration settings specific to HTTP/3. Enables or disables HTTP/3 support on the server. public class KestrelHttp3Settings Inheritance object KestrelHttp3Settings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Enable Gets or sets a value indicating whether HTTP/3 is enabled. public bool Enable { get; set; } Property Value bool"
  },
  "api/AdvanceFileUpload.API.KestrelHttpsSettings.html": {
    "href": "api/AdvanceFileUpload.API.KestrelHttpsSettings.html",
    "title": "Class KestrelHttpsSettings | Advance File Uploading API",
    "keywords": "Class KestrelHttpsSettings Namespace AdvanceFileUpload.API Assembly AdvanceFileUpload.API.dll Represents the global HTTPS configuration defaults for Kestrel. This configuration is applied if not overridden by endpoints. public class KestrelHttpsSettings Inheritance object KestrelHttpsSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllowedProtocols Gets or sets a list of allowed SSL protocols. Options include \"None\", \"Ssl2\", \"Ssl3\", \"Tls\",\"Default\",\"Tls11\",\"Tls12\", \"Tls13\" Defaults typically include \"Default\", \"Tls12\" and \"Tls13\". public List<string> AllowedProtocols { get; set; } Property Value List<string> CheckCertificateRevocation Gets or sets a value indicating whether the server should check for certificate revocation. Default is true. public bool CheckCertificateRevocation { get; set; } Property Value bool ClientCertificateMode Gets or sets the default client certificate mode. Options include \"NoCertificate\", \"AllowCertificate\", and \"RequireCertificate\". public string ClientCertificateMode { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.API.KestrelLimits.html": {
    "href": "api/AdvanceFileUpload.API.KestrelLimits.html",
    "title": "Class KestrelLimits | Advance File Uploading API",
    "keywords": "Class KestrelLimits Namespace AdvanceFileUpload.API Assembly AdvanceFileUpload.API.dll Describes the server-wide limits for connections and requests. Controls settings such as timeouts, maximum sizes, and data rates. public class KestrelLimits Inheritance object KestrelLimits Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllowSynchronousIO Gets or sets a value that controls whether synchronous IO is allowed for the Request and Response public bool AllowSynchronousIO { get; set; } Property Value bool KeepAliveTimeout Gets or sets the keep-alive timeout. Defaults to 130 seconds. public TimeSpan KeepAliveTimeout { get; set; } Property Value TimeSpan MaxConcurrentConnections Gets or sets the maximum number of open connections. When set to null, the number of connections is unlimited. Defaults to null. public int? MaxConcurrentConnections { get; set; } Property Value int? MaxConcurrentUpgradedConnections Gets or sets the maximum number of open, upgraded connections. When set to null, the number of upgraded connections is unlimited. An upgraded connection is one that has been switched from HTTP to another protocol, such as WebSockets. Defaults to null. public int? MaxConcurrentUpgradedConnections { get; set; } Property Value int? MaxRequestBodySize Gets or sets the maximum allowed size of any request body in bytes. When set to null, the maximum request body size is unlimited. This limit has no effect on upgraded connections which are always unlimited. This can be overridden per-request via IHttpMaxRequestBodySizeFeature. Defaults to 30,000,000 bytes, which is approximately 28.6MB. public long MaxRequestBodySize { get; set; } Property Value long MaxRequestBufferSize Gets or sets the maximum size of the request buffer. Defaults to 1,048,576 bytes (1 MB). public long? MaxRequestBufferSize { get; set; } Property Value long? MaxRequestHeaderCount Gets or sets the maximum allowed number of headers per HTTP request. Defaults to 100. public int MaxRequestHeaderCount { get; set; } Property Value int MaxRequestHeadersTotalSize Gets or sets the maximum allowed size for the HTTP request headers. Defaults to 32,768 bytes (32 KB). public int MaxRequestHeadersTotalSize { get; set; } Property Value int MaxRequestLineSize Gets or sets the maximum allowed size for the HTTP request line. Defaults to 8,192 bytes (8 KB). public int MaxRequestLineSize { get; set; } Property Value int MaxResponseBufferSize Gets or sets the maximum size of the response buffer before write calls begin to block or return tasks that don't complete until the buffer size drops below the configured limit. Defaults to 65,536 bytes (64 KB). public long? MaxResponseBufferSize { get; set; } Property Value long? MinRequestBodyDataRate Gets or sets the request body minimum data rate in bytes/second. Setting this property to null indicates no minimum data rate should be enforced. This limit has no effect on upgraded connections which are always unlimited. This can be overridden per-request via IHttpMinRequestBodyDataRateFeature. Defaults to 240 bytes/second with a 5 second grace period. public double? MinRequestBodyDataRate { get; set; } Property Value double? MinRequestBodyDataRatePeriod The grace period for the minimum request body data rate. Default is 15 seconds. public TimeSpan? MinRequestBodyDataRatePeriod { get; set; } Property Value TimeSpan? MinResponseDataRate Gets or sets the response minimum data rate in bytes/second. Setting this property to null indicates no minimum data rate should be enforced. This limit has no effect on upgraded connections which are always unlimited. This can be overridden per-request via IHttpMinResponseDataRateFeature. Defaults to 240 bytes/second with a 5 second grace period. public double? MinResponseDataRate { get; set; } Property Value double? MinResponseDataRatePeriod The grace period for the minimum response data rate. Default is 15 seconds. public TimeSpan? MinResponseDataRatePeriod { get; set; } Property Value TimeSpan? RequestHeadersTimeout Gets or sets the maximum amount of time the server will spend receiving request headers. Defaults to 30 seconds. public TimeSpan RequestHeadersTimeout { get; set; } Property Value TimeSpan"
  },
  "api/AdvanceFileUpload.API.Middleware.APIKeyMiddleware.html": {
    "href": "api/AdvanceFileUpload.API.Middleware.APIKeyMiddleware.html",
    "title": "Class APIKeyMiddleware | Advance File Uploading API",
    "keywords": "Class APIKeyMiddleware Namespace AdvanceFileUpload.API.Middleware Assembly AdvanceFileUpload.API.dll Middleware to handle API Key authentication for incoming HTTP requests. public sealed class APIKeyMiddleware Inheritance object APIKeyMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors APIKeyMiddleware(RequestDelegate, ILogger<APIKeyMiddleware>) Initializes a new instance of the APIKeyMiddleware class. public APIKeyMiddleware(RequestDelegate next, ILogger<APIKeyMiddleware> logger) Parameters next RequestDelegate The next middleware in the pipeline. logger ILogger<APIKeyMiddleware> The logger instance for logging information. Exceptions ArgumentNullException Thrown when next or logger is null. Methods InvokeAsync(HttpContext, IOptionsMonitor<ApiKeyOptions>) Middleware invocation method to process the HTTP request. public Task InvokeAsync(HttpContext context, IOptionsMonitor<ApiKeyOptions> apiKeyOptions) Parameters context HttpContext The HTTP context of the current request. apiKeyOptions IOptionsMonitor<ApiKeyOptions> The API key options configuration. Returns Task A task that represents the asynchronous operation. Exceptions ArgumentNullException Thrown when context or apiKeyOptions is null. InvalidOperationException Thrown when API key authentication is not properly configured."
  },
  "api/AdvanceFileUpload.API.Middleware.ExceptionHandlingMiddleware.html": {
    "href": "api/AdvanceFileUpload.API.Middleware.ExceptionHandlingMiddleware.html",
    "title": "Class ExceptionHandlingMiddleware | Advance File Uploading API",
    "keywords": "Class ExceptionHandlingMiddleware Namespace AdvanceFileUpload.API.Middleware Assembly AdvanceFileUpload.API.dll Middleware to handle exceptions globally. public sealed class ExceptionHandlingMiddleware Inheritance object ExceptionHandlingMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ExceptionHandlingMiddleware(RequestDelegate, ILogger<ExceptionHandlingMiddleware>) Initializes a new instance of the ExceptionHandlingMiddleware class. public ExceptionHandlingMiddleware(RequestDelegate next, ILogger<ExceptionHandlingMiddleware> logger) Parameters next RequestDelegate The next middleware in the pipeline. logger ILogger<ExceptionHandlingMiddleware> The logger instance. Methods InvokeAsync(HttpContext) Invokes the middleware to handle the HTTP context. public Task InvokeAsync(HttpContext context) Parameters context HttpContext The HTTP context. Returns Task A task that represents the completion of request processing."
  },
  "api/AdvanceFileUpload.API.Middleware.ExceptionResponse.html": {
    "href": "api/AdvanceFileUpload.API.Middleware.ExceptionResponse.html",
    "title": "Class ExceptionResponse | Advance File Uploading API",
    "keywords": "Class ExceptionResponse Namespace AdvanceFileUpload.API.Middleware Assembly AdvanceFileUpload.API.dll Represents the response for an exception. public record ExceptionResponse : IEquatable<ExceptionResponse> Inheritance object ExceptionResponse Implements IEquatable<ExceptionResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExceptionResponse(HttpStatusCode, string) Represents the response for an exception. public ExceptionResponse(HttpStatusCode StatusCode, string Description) Parameters StatusCode HttpStatusCode The HTTP status code. Description string The description of the exception. Properties Description The description of the exception. public string Description { get; init; } Property Value string StatusCode The HTTP status code. public HttpStatusCode StatusCode { get; init; } Property Value HttpStatusCode"
  },
  "api/AdvanceFileUpload.API.Middleware.html": {
    "href": "api/AdvanceFileUpload.API.Middleware.html",
    "title": "Namespace AdvanceFileUpload.API.Middleware | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.API.Middleware Classes APIKeyMiddleware Middleware to handle API Key authentication for incoming HTTP requests. ExceptionHandlingMiddleware Middleware to handle exceptions globally. ExceptionResponse Represents the response for an exception."
  },
  "api/AdvanceFileUpload.API.Security.APIKey.html": {
    "href": "api/AdvanceFileUpload.API.Security.APIKey.html",
    "title": "Class APIKey | Advance File Uploading API",
    "keywords": "Class APIKey Namespace AdvanceFileUpload.API.Security Assembly AdvanceFileUpload.API.dll Represents an API key used for authentication and rate limiting. public class APIKey Inheritance object APIKey Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClientId The name of the client associated with the API key. public required string ClientId { get; init; } Property Value string Key The API key string used for authentication. public required string Key { get; init; } Property Value string RateLimit The RateLimit associated with the API key. public ClientRateLimit? RateLimit { get; init; } Property Value ClientRateLimit Remarks if RateLimit set to null then it means there is no rate limit for that client"
  },
  "api/AdvanceFileUpload.API.Security.ApiKeyOptions.html": {
    "href": "api/AdvanceFileUpload.API.Security.ApiKeyOptions.html",
    "title": "Class ApiKeyOptions | Advance File Uploading API",
    "keywords": "Class ApiKeyOptions Namespace AdvanceFileUpload.API.Security Assembly AdvanceFileUpload.API.dll Represents the configuration options for API key authentication and rate limiting. public class ApiKeyOptions Inheritance object ApiKeyOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SectionName The name of the configuration section for API key options. public const string SectionName = \"APIKeyOptions\" Field Value string Properties APIKeys A list of API keys used for authentication and rate limiting. public List<APIKey> APIKeys { get; set; } Property Value List<APIKey> DefaultMaxRequestsPerMinute The default maximum number of requests allowed per minute for rate limiting. public int DefaultMaxRequestsPerMinute { get; set; } Property Value int EnableAPIKeyAuthentication Indicates whether API key authentication is enabled. public bool EnableAPIKeyAuthentication { get; set; } Property Value bool EnableRateLimiting Indicates whether rate limiting is enabled. public bool EnableRateLimiting { get; set; } Property Value bool"
  },
  "api/AdvanceFileUpload.API.Security.ClientRateLimit.html": {
    "href": "api/AdvanceFileUpload.API.Security.ClientRateLimit.html",
    "title": "Class ClientRateLimit | Advance File Uploading API",
    "keywords": "Class ClientRateLimit Namespace AdvanceFileUpload.API.Security Assembly AdvanceFileUpload.API.dll Represents the rate limit configuration for a client. public class ClientRateLimit Inheritance object ClientRateLimit Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties RequestsPerMinute Gets or sets the maximum number of requests a client can make per minute. public int RequestsPerMinute { get; set; } Property Value int"
  },
  "api/AdvanceFileUpload.API.Security.html": {
    "href": "api/AdvanceFileUpload.API.Security.html",
    "title": "Namespace AdvanceFileUpload.API.Security | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.API.Security Classes APIKey Represents an API key used for authentication and rate limiting. ApiKeyOptions Represents the configuration options for API key authentication and rate limiting. ClientRateLimit Represents the rate limit configuration for a client."
  },
  "api/AdvanceFileUpload.API.ServiceConfiguration.html": {
    "href": "api/AdvanceFileUpload.API.ServiceConfiguration.html",
    "title": "Class ServiceConfiguration | Advance File Uploading API",
    "keywords": "Class ServiceConfiguration Namespace AdvanceFileUpload.API Assembly AdvanceFileUpload.API.dll public static class ServiceConfiguration Inheritance object ServiceConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigureApplicationServices(IServiceCollection, IConfiguration) Configures the application services by setting up core services and rate limiting. public static void ConfigureApplicationServices(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection The service collection to which services are added. configuration IConfiguration The application configuration containing settings. ConfigureUploadServer(IHostApplicationBuilder, IWebHostBuilder) Configures the upload server using Kestrel. public static void ConfigureUploadServer(this IHostApplicationBuilder builder, IWebHostBuilder webHost) Parameters builder IHostApplicationBuilder webHost IWebHostBuilder Exceptions ArgumentNullException InvalidOperationException EnsureDbMigration(IApplicationBuilder) Ensures that the database schema is up-to-date by applying any pending migrations. This method should only be used in development environments. public static void EnsureDbMigration(this IApplicationBuilder app) Parameters app IApplicationBuilder The application builder used to configure the app's request pipeline."
  },
  "api/AdvanceFileUpload.API.SessionStatusCheckerWorker.html": {
    "href": "api/AdvanceFileUpload.API.SessionStatusCheckerWorker.html",
    "title": "Class SessionStatusCheckerWorker | Advance File Uploading API",
    "keywords": "Class SessionStatusCheckerWorker Namespace AdvanceFileUpload.API Assembly AdvanceFileUpload.API.dll Background service that periodically checks the status of sessions. public class SessionStatusCheckerWorker : BackgroundService, IHostedService, IDisposable Inheritance object BackgroundService SessionStatusCheckerWorker Implements IHostedService IDisposable Inherited Members BackgroundService.StartAsync(CancellationToken) BackgroundService.StopAsync(CancellationToken) BackgroundService.Dispose() BackgroundService.ExecuteTask object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SessionStatusCheckerWorker(IPeriodicTimer, IServiceProvider, ILogger<SessionStatusCheckerWorker>) Initializes a new instance of the SessionStatusCheckerWorker class. public SessionStatusCheckerWorker(IPeriodicTimer periodicTimer, IServiceProvider serviceProvider, ILogger<SessionStatusCheckerWorker> logger) Parameters periodicTimer IPeriodicTimer The timer used to control the periodic execution. serviceProvider IServiceProvider The service provider for resolving dependencies. logger ILogger<SessionStatusCheckerWorker> The logger for logging information and errors. Exceptions ArgumentNullException Thrown when any of the parameters are null. Methods ExecuteAsync(CancellationToken) Executes the background service logic. protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation."
  },
  "api/AdvanceFileUpload.API.ThreadPoolOptions.html": {
    "href": "api/AdvanceFileUpload.API.ThreadPoolOptions.html",
    "title": "Class ThreadPoolOptions | Advance File Uploading API",
    "keywords": "Class ThreadPoolOptions Namespace AdvanceFileUpload.API Assembly AdvanceFileUpload.API.dll public sealed class ThreadPoolOptions Inheritance object ThreadPoolOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields SectionName public const string SectionName = \"ThreadPoolOptions\" Field Value string Properties MaxThreads public int MaxThreads { get; set; } Property Value int MinThreads public int MinThreads { get; set; } Property Value int"
  },
  "api/AdvanceFileUpload.API.html": {
    "href": "api/AdvanceFileUpload.API.html",
    "title": "Namespace AdvanceFileUpload.API | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.API Classes CertificateSettings Represents the certificate configuration options for HTTPS endpoints. Provides information for locating and authenticating the certificate. DailyPeriodicTimer A timer that provides periodic ticks for executing tasks on a daily basis. EndpointSettings Defines the configuration for an individual endpoint, including network binding, security, and protocol options. KestrelConfiguration Represents the configurable settings for the Kestrel web server. Includes endpoint definitions, connection limits, HTTPS defaults, and HTTP/2 and HTTP/3 specific configurations. KestrelHttp2Settings Contains configuration settings specific to HTTP/2. Manages stream limits, header compression, and frame sizes. KestrelHttp3Settings Contains configuration settings specific to HTTP/3. Enables or disables HTTP/3 support on the server. KestrelHttpsSettings Represents the global HTTPS configuration defaults for Kestrel. This configuration is applied if not overridden by endpoints. KestrelLimits Describes the server-wide limits for connections and requests. Controls settings such as timeouts, maximum sizes, and data rates. ServiceConfiguration SessionStatusCheckerWorker Background service that periodically checks the status of sessions. ThreadPoolOptions Interfaces IPeriodicTimer Represents a timer that provides periodic ticks for executing tasks."
  },
  "api/AdvanceFileUpload.Application.Compression.CompressionAlgorithmOption.html": {
    "href": "api/AdvanceFileUpload.Application.Compression.CompressionAlgorithmOption.html",
    "title": "Enum CompressionAlgorithmOption | Advance File Uploading API",
    "keywords": "Enum CompressionAlgorithmOption Namespace AdvanceFileUpload.Application.Compression Assembly AdvanceFileUpload.Application.Shared.dll Specifies the compression algorithms available. public enum CompressionAlgorithmOption Fields Brotli = 2 Brotli compression algorithm. Benefits: High compression ratio, especially for web content, better than GZip in many cases. Deflate = 1 Deflate compression algorithm. Benefits: Fast compression and decompression, good for real-time applications. GZip = 0 GZip compression algorithm. Benefits: Good compression ratio and speed, widely supported."
  },
  "api/AdvanceFileUpload.Application.Compression.CompressionLevelOption.html": {
    "href": "api/AdvanceFileUpload.Application.Compression.CompressionLevelOption.html",
    "title": "Enum CompressionLevelOption | Advance File Uploading API",
    "keywords": "Enum CompressionLevelOption Namespace AdvanceFileUpload.Application.Compression Assembly AdvanceFileUpload.Application.Shared.dll Specifies values that indicate whether a compression operation emphasizes speed or compression size. public enum CompressionLevelOption Fields Fastest = 1 The compression operation should complete as quickly as possible, even if the resulting file is not optimally compressed. NoCompression = 2 No compression should be performed on the file. Optimal = 0 The compression operation should optimally balance compression speed and output size. SmallestSize = 3 The compression operation should create output as small as possible, even if the operation takes a longer time to complete."
  },
  "api/AdvanceFileUpload.Application.Compression.FileCompressor.html": {
    "href": "api/AdvanceFileUpload.Application.Compression.FileCompressor.html",
    "title": "Class FileCompressor | Advance File Uploading API",
    "keywords": "Class FileCompressor Namespace AdvanceFileUpload.Application.Compression Assembly AdvanceFileUpload.Application.Shared.dll Provides methods for compressing and decompressing files using various algorithms. public class FileCompressor : IFileCompressor Inheritance object FileCompressor Implements IFileCompressor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileCompressor(ILogger<FileCompressor>) Initializes a new instance of the FileCompressor class. public FileCompressor(ILogger<FileCompressor> logger) Parameters logger ILogger<FileCompressor> The logger instance to use for logging. Exceptions ArgumentNullException Thrown when the logger is null. Properties ExcludedExtension Get a list of file extensions that will be ignored during compression. public IReadOnlyList<string> ExcludedExtension { get; } Property Value IReadOnlyList<string> Methods AddExcludedExtension(string) Adds an excluded file extension to the list of extensions that should not be compressed. public void AddExcludedExtension(string extension) Parameters extension string CompressFileAsync(string, string, CompressionAlgorithmOption, CompressionLevelOption, CancellationToken) Compresses a single file asynchronously. public Task CompressFileAsync(string inputFilePath, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CompressionLevelOption compressionLevelOption, CancellationToken cancellationToken = default) Parameters inputFilePath string The path of the file to compress. outputDirectory string The directory where the compressed file will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. compressionLevelOption CompressionLevelOption The level of compression to apply. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. CompressFilesAsync(string[], string, CompressionAlgorithmOption, CompressionLevelOption, CancellationToken) Compresses multiple files asynchronously. public Task CompressFilesAsync(string[] inputFilePaths, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CompressionLevelOption compressionLevelOption, CancellationToken cancellationToken = default) Parameters inputFilePaths string[] An array of file paths to compress. outputDirectory string The directory where the compressed files will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. compressionLevelOption CompressionLevelOption The level of compression to apply. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. DecompressFileAsync(string, string, CompressionAlgorithmOption, CancellationToken) Decompresses a single file asynchronously. public Task DecompressFileAsync(string inputFilePath, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CancellationToken cancellationToken = default) Parameters inputFilePath string The path of the file to decompress. outputDirectory string The directory where the decompressed file will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. DecompressFilesAsync(string[], string, CompressionAlgorithmOption, CancellationToken) Decompresses multiple files asynchronously. public Task DecompressFilesAsync(string[] inputFilePaths, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CancellationToken cancellationToken = default) Parameters inputFilePaths string[] An array of file paths to decompress. outputDirectory string The directory where the decompressed files will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. IsFileApplicableForCompression(string) Determines whether a file is applicable for compression. public bool IsFileApplicableForCompression(string filePath) Parameters filePath string Returns bool"
  },
  "api/AdvanceFileUpload.Application.Compression.IFileCompressor.html": {
    "href": "api/AdvanceFileUpload.Application.Compression.IFileCompressor.html",
    "title": "Interface IFileCompressor | Advance File Uploading API",
    "keywords": "Interface IFileCompressor Namespace AdvanceFileUpload.Application.Compression Assembly AdvanceFileUpload.Application.Shared.dll Interface for file compression and decompression operations. public interface IFileCompressor Properties ExcludedExtension Get a list of file extensions that will be ignored during compression. IReadOnlyList<string> ExcludedExtension { get; } Property Value IReadOnlyList<string> Methods AddExcludedExtension(string) Adds an excluded file extension to the list of extensions that should not be compressed. void AddExcludedExtension(string extension) Parameters extension string CompressFileAsync(string, string, CompressionAlgorithmOption, CompressionLevelOption, CancellationToken) Compresses a single file asynchronously. Task CompressFileAsync(string inputFilePath, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CompressionLevelOption compressionLevelOption, CancellationToken cancellationToken = default) Parameters inputFilePath string The path of the file to compress. outputDirectory string The directory where the compressed file will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. compressionLevelOption CompressionLevelOption The level of compression to apply. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. CompressFilesAsync(string[], string, CompressionAlgorithmOption, CompressionLevelOption, CancellationToken) Compresses multiple files asynchronously. Task CompressFilesAsync(string[] inputFilePaths, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CompressionLevelOption compressionLevelOption, CancellationToken cancellationToken = default) Parameters inputFilePaths string[] An array of file paths to compress. outputDirectory string The directory where the compressed files will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. compressionLevelOption CompressionLevelOption The level of compression to apply. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. DecompressFileAsync(string, string, CompressionAlgorithmOption, CancellationToken) Decompresses a single file asynchronously. Task DecompressFileAsync(string inputFilePath, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CancellationToken cancellationToken = default) Parameters inputFilePath string The path of the file to decompress. outputDirectory string The directory where the decompressed file will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. DecompressFilesAsync(string[], string, CompressionAlgorithmOption, CancellationToken) Decompresses multiple files asynchronously. Task DecompressFilesAsync(string[] inputFilePaths, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CancellationToken cancellationToken = default) Parameters inputFilePaths string[] An array of file paths to decompress. outputDirectory string The directory where the decompressed files will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. IsFileApplicableForCompression(string) Determines whether a file is applicable for compression. bool IsFileApplicableForCompression(string filePath) Parameters filePath string Returns bool"
  },
  "api/AdvanceFileUpload.Application.Compression.html": {
    "href": "api/AdvanceFileUpload.Application.Compression.html",
    "title": "Namespace AdvanceFileUpload.Application.Compression | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Application.Compression Classes FileCompressor Provides methods for compressing and decompressing files using various algorithms. Interfaces IFileCompressor Interface for file compression and decompression operations. Enums CompressionAlgorithmOption Specifies the compression algorithms available. CompressionLevelOption Specifies values that indicate whether a compression operation emphasizes speed or compression size."
  },
  "api/AdvanceFileUpload.Application.EventHandling.ChunkUploadedEventHandler.html": {
    "href": "api/AdvanceFileUpload.Application.EventHandling.ChunkUploadedEventHandler.html",
    "title": "Class ChunkUploadedEventHandler | Advance File Uploading API",
    "keywords": "Class ChunkUploadedEventHandler Namespace AdvanceFileUpload.Application.EventHandling Assembly AdvanceFileUpload.Application.dll Handles the ChunkUploadedEvent notification. and publishes integration events if enabled in the settings. public sealed class ChunkUploadedEventHandler : INotificationHandler<ChunkUploadedEvent> Inheritance object ChunkUploadedEventHandler Implements INotificationHandler<ChunkUploadedEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ChunkUploadedEventHandler(IRepository<FileUploadSession>, IUploadProcessNotifier, IIntegrationEventPublisher, IOptions<UploadSetting>, ILogger<ChunkUploadedEventHandler>) Initializes a new instance of the ChunkUploadedEventHandler class. public ChunkUploadedEventHandler(IRepository<FileUploadSession> fileUploadSessionRepository, IUploadProcessNotifier uploadProcessNotifier, IIntegrationEventPublisher integrationEventPublisher, IOptions<UploadSetting> uploadSetting, ILogger<ChunkUploadedEventHandler> logger) Parameters fileUploadSessionRepository IRepository<FileUploadSession> The repository for managing file upload sessions. uploadProcessNotifier IUploadProcessNotifier The notifier for upload progress updates. integrationEventPublisher IIntegrationEventPublisher The publisher for integration events. uploadSetting IOptions<UploadSetting> The upload settings configuration. logger ILogger<ChunkUploadedEventHandler> The logger for logging information and warnings. Exceptions ArgumentNullException Thrown when any of the dependencies are null. Methods Handle(ChunkUploadedEvent, CancellationToken) Handles the ChunkUploadedEvent notification. public Task Handle(ChunkUploadedEvent notification, CancellationToken cancellationToken) Parameters notification ChunkUploadedEvent The event notification containing details of the uploaded chunk. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. Exceptions ArgumentNullException Thrown when the notification is null."
  },
  "api/AdvanceFileUpload.Application.EventHandling.DomainEventPublisher.html": {
    "href": "api/AdvanceFileUpload.Application.EventHandling.DomainEventPublisher.html",
    "title": "Class DomainEventPublisher | Advance File Uploading API",
    "keywords": "Class DomainEventPublisher Namespace AdvanceFileUpload.Application.EventHandling Assembly AdvanceFileUpload.Application.dll Represents a domain event publisher. public class DomainEventPublisher : IDomainEventPublisher Inheritance object DomainEventPublisher Implements IDomainEventPublisher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DomainEventPublisher(IPublisher, ILogger<DomainEventPublisher>) Initializes a new instance of the DomainEventPublisher class. public DomainEventPublisher(IPublisher publisher, ILogger<DomainEventPublisher> logger) Parameters publisher IPublisher logger ILogger<DomainEventPublisher> Exceptions ArgumentNullException Methods PublishAsync(IDomainEvent, CancellationToken) Publishes a single domain event asynchronously. public Task PublishAsync(IDomainEvent domainEvent, CancellationToken cancellationToken = default) Parameters domainEvent IDomainEvent The domain event to be published. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation. PublishAsync(IEnumerable<IDomainEvent>, CancellationToken) Publishes multiple domain events asynchronously. public Task PublishAsync(IEnumerable<IDomainEvent> domainEvents, CancellationToken cancellationToken = default) Parameters domainEvents IEnumerable<IDomainEvent> The collection of domain events to be published. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation."
  },
  "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionCanceledEventHandler.html": {
    "href": "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionCanceledEventHandler.html",
    "title": "Class FileUploadSessionCanceledEventHandler | Advance File Uploading API",
    "keywords": "Class FileUploadSessionCanceledEventHandler Namespace AdvanceFileUpload.Application.EventHandling Assembly AdvanceFileUpload.Application.dll Handles the FileUploadSessionCanceledEvent to perform necessary actions when a file upload session is canceled. public sealed class FileUploadSessionCanceledEventHandler : INotificationHandler<FileUploadSessionCanceledEvent> Inheritance object FileUploadSessionCanceledEventHandler Implements INotificationHandler<FileUploadSessionCanceledEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionCanceledEventHandler(IOptions<UploadSetting>, IIntegrationEventPublisher, IRepository<FileUploadSession>, ILogger<FileUploadSessionCreatedEventHandler>) Initializes a new instance of the FileUploadSessionCanceledEventHandler class. public FileUploadSessionCanceledEventHandler(IOptions<UploadSetting> uploadSetting, IIntegrationEventPublisher integrationEventPublisher, IRepository<FileUploadSession> fileUploadSessionRepository, ILogger<FileUploadSessionCreatedEventHandler> logger) Parameters uploadSetting IOptions<UploadSetting> The upload settings. integrationEventPublisher IIntegrationEventPublisher The integration event publisher. fileUploadSessionRepository IRepository<FileUploadSession> The repository for file upload sessions. logger ILogger<FileUploadSessionCreatedEventHandler> The logger instance. Exceptions ArgumentNullException Thrown when any of the parameters are null. Methods Handle(FileUploadSessionCanceledEvent, CancellationToken) Handles the FileUploadSessionCanceledEvent by deleting associated chunk files and publishing an integration event if enabled. public Task Handle(FileUploadSessionCanceledEvent notification, CancellationToken cancellationToken) Parameters notification FileUploadSessionCanceledEvent The event notification containing the file upload session details. cancellationToken CancellationToken The cancellation token. Returns Task A task that represents the asynchronous operation."
  },
  "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionCompletedEventHandler.html": {
    "href": "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionCompletedEventHandler.html",
    "title": "Class FileUploadSessionCompletedEventHandler | Advance File Uploading API",
    "keywords": "Class FileUploadSessionCompletedEventHandler Namespace AdvanceFileUpload.Application.EventHandling Assembly AdvanceFileUpload.Application.dll Handles the FileUploadSessionCompletedEvent to process the uploaded file session. public sealed class FileUploadSessionCompletedEventHandler : INotificationHandler<FileUploadSessionCompletedEvent> Inheritance object FileUploadSessionCompletedEventHandler Implements INotificationHandler<FileUploadSessionCompletedEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionCompletedEventHandler(IFileProcessor, IFileCompressor, IOptions<UploadSetting>, IIntegrationEventPublisher, ILogger<FileUploadSessionCompletedEventHandler>) Initializes a new instance of the FileUploadSessionCompletedEventHandler class. public FileUploadSessionCompletedEventHandler(IFileProcessor fileProcessor, IFileCompressor fileCompressor, IOptions<UploadSetting> uploadSetting, IIntegrationEventPublisher integrationEventPublisher, ILogger<FileUploadSessionCompletedEventHandler> logger) Parameters fileProcessor IFileProcessor The file processor to handle file operations. fileCompressor IFileCompressor The file compressor to handle compression and decompression. uploadSetting IOptions<UploadSetting> The upload settings configuration. integrationEventPublisher IIntegrationEventPublisher The integration event publisher for publishing events. logger ILogger<FileUploadSessionCompletedEventHandler> The logger instance for logging operations. Exceptions ArgumentNullException Thrown when any of the required dependencies are null. Methods Handle(FileUploadSessionCompletedEvent, CancellationToken) Handles the FileUploadSessionCompletedEvent to process the uploaded file session. public Task Handle(FileUploadSessionCompletedEvent notification, CancellationToken cancellationToken) Parameters notification FileUploadSessionCompletedEvent The event notification containing the file upload session details. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. Exceptions ArgumentNullException Thrown when the notification is null."
  },
  "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionCreatedEventHandler.html": {
    "href": "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionCreatedEventHandler.html",
    "title": "Class FileUploadSessionCreatedEventHandler | Advance File Uploading API",
    "keywords": "Class FileUploadSessionCreatedEventHandler Namespace AdvanceFileUpload.Application.EventHandling Assembly AdvanceFileUpload.Application.dll Handles the FileUploadSessionCreatedEvent to publish integration events if enabled. public sealed class FileUploadSessionCreatedEventHandler : INotificationHandler<FileUploadSessionCreatedEvent> Inheritance object FileUploadSessionCreatedEventHandler Implements INotificationHandler<FileUploadSessionCreatedEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionCreatedEventHandler(IOptions<UploadSetting>, IIntegrationEventPublisher, ILogger<FileUploadSessionCreatedEventHandler>) Initializes a new instance of the FileUploadSessionCreatedEventHandler class. public FileUploadSessionCreatedEventHandler(IOptions<UploadSetting> uploadSetting, IIntegrationEventPublisher integrationEventPublisher, ILogger<FileUploadSessionCreatedEventHandler> logger) Parameters uploadSetting IOptions<UploadSetting> The upload settings. integrationEventPublisher IIntegrationEventPublisher The integration event publisher. logger ILogger<FileUploadSessionCreatedEventHandler> The logger instance. Exceptions ArgumentNullException Thrown when any of the parameters are null. Methods Handle(FileUploadSessionCreatedEvent, CancellationToken) Handles the FileUploadSessionCreatedEvent by publishing an integration event if enabled in the settings. public Task Handle(FileUploadSessionCreatedEvent notification, CancellationToken cancellationToken) Parameters notification FileUploadSessionCreatedEvent The event notification containing the file upload session details. cancellationToken CancellationToken The cancellation token. Returns Task A task that represents the asynchronous operation. Exceptions ArgumentNullException Thrown when the notification is null."
  },
  "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionFieldEventHandler.html": {
    "href": "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionFieldEventHandler.html",
    "title": "Class FileUploadSessionFieldEventHandler | Advance File Uploading API",
    "keywords": "Class FileUploadSessionFieldEventHandler Namespace AdvanceFileUpload.Application.EventHandling Assembly AdvanceFileUpload.Application.dll Handles the FileUploadSessionFailedEvent notification. public sealed class FileUploadSessionFieldEventHandler : INotificationHandler<FileUploadSessionFailedEvent> Inheritance object FileUploadSessionFieldEventHandler Implements INotificationHandler<FileUploadSessionFailedEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionFieldEventHandler(IOptions<UploadSetting>, IIntegrationEventPublisher, ILogger<FileUploadSessionCreatedEventHandler>) Initializes a new instance of the FileUploadSessionFieldEventHandler class. public FileUploadSessionFieldEventHandler(IOptions<UploadSetting> uploadSetting, IIntegrationEventPublisher integrationEventPublisher, ILogger<FileUploadSessionCreatedEventHandler> logger) Parameters uploadSetting IOptions<UploadSetting> The upload settings. integrationEventPublisher IIntegrationEventPublisher The integration event publisher. logger ILogger<FileUploadSessionCreatedEventHandler> The logger instance. Exceptions ArgumentNullException Thrown when any of the required dependencies are null. Methods Handle(FileUploadSessionFailedEvent, CancellationToken) Handles the FileUploadSessionFailedEvent by deleting chunk files and optionally publishing an integration event. public Task Handle(FileUploadSessionFailedEvent notification, CancellationToken cancellationToken) Parameters notification FileUploadSessionFailedEvent The event notification containing details of the failed file upload session. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation."
  },
  "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionPausedEventHandler.html": {
    "href": "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionPausedEventHandler.html",
    "title": "Class FileUploadSessionPausedEventHandler | Advance File Uploading API",
    "keywords": "Class FileUploadSessionPausedEventHandler Namespace AdvanceFileUpload.Application.EventHandling Assembly AdvanceFileUpload.Application.dll Handles the FileUploadSessionPausedEvent to perform necessary actions when a file upload session is paused. public sealed class FileUploadSessionPausedEventHandler : INotificationHandler<FileUploadSessionPausedEvent> Inheritance object FileUploadSessionPausedEventHandler Implements INotificationHandler<FileUploadSessionPausedEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionPausedEventHandler(IOptions<UploadSetting>, IIntegrationEventPublisher, ILogger<FileUploadSessionCreatedEventHandler>) Initializes a new instance of the FileUploadSessionPausedEventHandler class. public FileUploadSessionPausedEventHandler(IOptions<UploadSetting> uploadSetting, IIntegrationEventPublisher integrationEventPublisher, ILogger<FileUploadSessionCreatedEventHandler> logger) Parameters uploadSetting IOptions<UploadSetting> The upload settings configuration. integrationEventPublisher IIntegrationEventPublisher The integration event publisher for publishing events. logger ILogger<FileUploadSessionCreatedEventHandler> The logger instance for logging information. Exceptions ArgumentNullException Thrown when any of the required dependencies are null. Methods Handle(FileUploadSessionPausedEvent, CancellationToken) Handles the FileUploadSessionPausedEvent by logging the event and publishing an integration event if enabled. public Task Handle(FileUploadSessionPausedEvent notification, CancellationToken cancellationToken) Parameters notification FileUploadSessionPausedEvent The event notification containing details of the paused file upload session. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation."
  },
  "api/AdvanceFileUpload.Application.EventHandling.html": {
    "href": "api/AdvanceFileUpload.Application.EventHandling.html",
    "title": "Namespace AdvanceFileUpload.Application.EventHandling | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Application.EventHandling Classes ChunkUploadedEventHandler Handles the ChunkUploadedEvent notification. and publishes integration events if enabled in the settings. DomainEventPublisher Represents a domain event publisher. FileUploadSessionCanceledEventHandler Handles the FileUploadSessionCanceledEvent to perform necessary actions when a file upload session is canceled. FileUploadSessionCompletedEventHandler Handles the FileUploadSessionCompletedEvent to process the uploaded file session. FileUploadSessionCreatedEventHandler Handles the FileUploadSessionCreatedEvent to publish integration events if enabled. FileUploadSessionFieldEventHandler Handles the FileUploadSessionFailedEvent notification. FileUploadSessionPausedEventHandler Handles the FileUploadSessionPausedEvent to perform necessary actions when a file upload session is paused."
  },
  "api/AdvanceFileUpload.Application.FileProcessing.FileProcessor.html": {
    "href": "api/AdvanceFileUpload.Application.FileProcessing.FileProcessor.html",
    "title": "Class FileProcessor | Advance File Uploading API",
    "keywords": "Class FileProcessor Namespace AdvanceFileUpload.Application.FileProcessing Assembly AdvanceFileUpload.Application.Shared.dll Provides methods for file operations such as concatenating file chunks, saving files, and splitting files into chunks. public class FileProcessor : IFileProcessor Inheritance object FileProcessor Implements IFileProcessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileProcessor(ILogger<FileProcessor>) public FileProcessor(ILogger<FileProcessor> logger) Parameters logger ILogger<FileProcessor> Methods MergeChunksAsync(List<string>, string, CancellationToken) Merge multiple file chunks into a single file. public Task MergeChunksAsync(List<string> chunkPaths, string outputFilePath, CancellationToken cancellationToken = default) Parameters chunkPaths List<string> The list of paths to the file chunks. outputFilePath string The path where the Merged file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SaveFileAsync(string, byte[], string, CancellationToken) Saves a file to the specified directory. public Task SaveFileAsync(string fileName, byte[] fileData, string outputDirectory, CancellationToken cancellationToken = default) Parameters fileName string The name of the file to save. fileData byte[] The byte array containing the file data. outputDirectory string The directory where the file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SplitFileIntoChunksAsync(string, long, string, CancellationToken) Splits a file into multiple chunks. public Task<List<string>> SplitFileIntoChunksAsync(string filePath, long chunkSize, string outputDirectory, CancellationToken cancellationToken = default) Parameters filePath string The path to the file to be split. chunkSize long The size of each chunk in bytes. outputDirectory string The directory where the chunks will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<List<string>> A task that represents the asynchronous operation. The task result contains a list of paths to the created chunks."
  },
  "api/AdvanceFileUpload.Application.FileProcessing.IFileProcessor.html": {
    "href": "api/AdvanceFileUpload.Application.FileProcessing.IFileProcessor.html",
    "title": "Interface IFileProcessor | Advance File Uploading API",
    "keywords": "Interface IFileProcessor Namespace AdvanceFileUpload.Application.FileProcessing Assembly AdvanceFileUpload.Application.Shared.dll Provides methods for file operations such as concatenating file chunks, saving files, and splitting files into chunks. public interface IFileProcessor Methods MergeChunksAsync(List<string>, string, CancellationToken) Merge multiple file chunks into a single file. Task MergeChunksAsync(List<string> chunkPaths, string outputFilePath, CancellationToken cancellationToken = default) Parameters chunkPaths List<string> The list of paths to the file chunks. outputFilePath string The path where the Merged file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SaveFileAsync(string, byte[], string, CancellationToken) Saves a file to the specified directory. Task SaveFileAsync(string fileName, byte[] fileData, string outputDirectory, CancellationToken cancellationToken = default) Parameters fileName string The name of the file to save. fileData byte[] The byte array containing the file data. outputDirectory string The directory where the file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SplitFileIntoChunksAsync(string, long, string, CancellationToken) Splits a file into multiple chunks. Task<List<string>> SplitFileIntoChunksAsync(string filePath, long chunkSize, string outputDirectory, CancellationToken cancellationToken = default) Parameters filePath string The path to the file to be split. chunkSize long The size of each chunk in bytes. outputDirectory string The directory where the chunks will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<List<string>> A task that represents the asynchronous operation. The task result contains a list of paths to the created chunks."
  },
  "api/AdvanceFileUpload.Application.FileProcessing.html": {
    "href": "api/AdvanceFileUpload.Application.FileProcessing.html",
    "title": "Namespace AdvanceFileUpload.Application.FileProcessing | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Application.FileProcessing Classes FileProcessor Provides methods for file operations such as concatenating file chunks, saving files, and splitting files into chunks. Interfaces IFileProcessor Provides methods for file operations such as concatenating file chunks, saving files, and splitting files into chunks."
  },
  "api/AdvanceFileUpload.Application.Hubs.IUploadProcessNotifier.html": {
    "href": "api/AdvanceFileUpload.Application.Hubs.IUploadProcessNotifier.html",
    "title": "Interface IUploadProcessNotifier | Advance File Uploading API",
    "keywords": "Interface IUploadProcessNotifier Namespace AdvanceFileUpload.Application.Hubs Assembly AdvanceFileUpload.Application.dll Interface for notifying clients about the progress of an upload session. public interface IUploadProcessNotifier Methods NotifyUploadProgressAsync(string?, UploadSessionStatusNotification, CancellationToken) Sends a notification to a specific client about the progress of an upload session. Task NotifyUploadProgressAsync(string? connectionId, UploadSessionStatusNotification uploadSessionStatusNotification, CancellationToken cancellationToken = default) Parameters connectionId string The unique identifier of the client connection. uploadSessionStatusNotification UploadSessionStatusNotification The status notification of the upload session. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation."
  },
  "api/AdvanceFileUpload.Application.Hubs.UploadProcessHub.html": {
    "href": "api/AdvanceFileUpload.Application.Hubs.UploadProcessHub.html",
    "title": "Class UploadProcessHub | Advance File Uploading API",
    "keywords": "Class UploadProcessHub Namespace AdvanceFileUpload.Application.Hubs Assembly AdvanceFileUpload.Application.dll Represents a SignalR hub for managing upload process notifications. public class UploadProcessHub : Hub, IDisposable Inheritance object Hub UploadProcessHub Implements IDisposable Inherited Members Hub.OnConnectedAsync() Hub.OnDisconnectedAsync(Exception) Hub.Dispose(bool) Hub.Dispose() Hub.Clients Hub.Context Hub.Groups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MethodName The name of the method used to send upload process notifications to clients. public const string MethodName = \"ReceiveUploadProcessNotification\" Field Value string Methods SendUploadProcessNotificationAsync(string, UploadSessionStatusNotification, CancellationToken) Sends an upload process notification to a specific client. public Task SendUploadProcessNotificationAsync(string connectionId, UploadSessionStatusNotification uploadSessionStatusNotification, CancellationToken cancellationToken = default) Parameters connectionId string The connection ID of the client to send the notification to. uploadSessionStatusNotification UploadSessionStatusNotification The upload session status notification to send. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation."
  },
  "api/AdvanceFileUpload.Application.Hubs.UploadProcessNotifier.html": {
    "href": "api/AdvanceFileUpload.Application.Hubs.UploadProcessNotifier.html",
    "title": "Class UploadProcessNotifier | Advance File Uploading API",
    "keywords": "Class UploadProcessNotifier Namespace AdvanceFileUpload.Application.Hubs Assembly AdvanceFileUpload.Application.dll Notifies clients about the progress of an upload session. public class UploadProcessNotifier : IUploadProcessNotifier Inheritance object UploadProcessNotifier Implements IUploadProcessNotifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadProcessNotifier(IHubContext<UploadProcessHub>, ILogger<UploadProcessNotifier>) Initializes a new instance of the UploadProcessNotifier class. public UploadProcessNotifier(IHubContext<UploadProcessHub> hubContext, ILogger<UploadProcessNotifier> logger) Parameters hubContext IHubContext<UploadProcessHub> The SignalR hub context used to send notifications to clients. logger ILogger<UploadProcessNotifier> The logger used for logging information and warnings. Exceptions ArgumentNullException Thrown when hubContext or logger is null. Methods NotifyUploadProgressAsync(string?, UploadSessionStatusNotification, CancellationToken) Sends a notification to a specific client about the progress of an upload session. public Task NotifyUploadProgressAsync(string? connectionId, UploadSessionStatusNotification uploadSessionStatusNotification, CancellationToken cancellationToken = default) Parameters connectionId string The unique identifier of the client connection. uploadSessionStatusNotification UploadSessionStatusNotification The status notification of the upload session. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation."
  },
  "api/AdvanceFileUpload.Application.Hubs.html": {
    "href": "api/AdvanceFileUpload.Application.Hubs.html",
    "title": "Namespace AdvanceFileUpload.Application.Hubs | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Application.Hubs Classes UploadProcessHub Represents a SignalR hub for managing upload process notifications. UploadProcessNotifier Notifies clients about the progress of an upload session. Interfaces IUploadProcessNotifier Interface for notifying clients about the progress of an upload session."
  },
  "api/AdvanceFileUpload.Application.IUploadManger.html": {
    "href": "api/AdvanceFileUpload.Application.IUploadManger.html",
    "title": "Interface IUploadManger | Advance File Uploading API",
    "keywords": "Interface IUploadManger Namespace AdvanceFileUpload.Application Assembly AdvanceFileUpload.Application.dll Interface for managing file upload sessions. public interface IUploadManger Methods CancelUploadSessionAsync(Guid, CancellationToken) Cancels the file upload session asynchronously. Task<bool> CancelUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the session was canceled successfully. CompleteUploadSessionAsync(Guid, CancellationToken) Completes the file upload session asynchronously. Task<bool> CompleteUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the File was Uploading Completed successfully. CreateUploadSessionAsync(CreateUploadSessionRequest, CancellationToken) Creates a new file upload session asynchronously. Task<CreateUploadSessionResponse> CreateUploadSessionAsync(CreateUploadSessionRequest request, CancellationToken cancellationToken = default) Parameters request CreateUploadSessionRequest The request containing the details of the file to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<CreateUploadSessionResponse> A task that represents the asynchronous operation. The task result contains the response with the details of the created upload session. GetUploadSessionStatusAsync(Guid, CancellationToken) Gets the status of the upload session asynchronously. Task<UploadSessionStatusResponse?> GetUploadSessionStatusAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<UploadSessionStatusResponse> A task that represents the asynchronous operation. The task result contains the response with the status of the upload session. PauseUploadSessionAsync(Guid, CancellationToken) pause the file upload session asynchronously. Task<bool> PauseUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the session was paused successfully. UploadChunkAsync(UploadChunkRequest, CancellationToken) Uploads a chunk of the file asynchronously. Task<bool> UploadChunkAsync(UploadChunkRequest request, CancellationToken cancellationToken = default) Parameters request UploadChunkRequest The request containing the details of the chunk to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the chunk was uploaded successfully."
  },
  "api/AdvanceFileUpload.Application.Request.CancelUploadSessionRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Request.CancelUploadSessionRequest.html",
    "title": "Class CancelUploadSessionRequest | Advance File Uploading API",
    "keywords": "Class CancelUploadSessionRequest Namespace AdvanceFileUpload.Application.Request Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to cancel an upload session. public sealed record CancelUploadSessionRequest : IEquatable<CancelUploadSessionRequest> Inheritance object CancelUploadSessionRequest Implements IEquatable<CancelUploadSessionRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Application.Request.CompleteUploadSessionRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Request.CompleteUploadSessionRequest.html",
    "title": "Class CompleteUploadSessionRequest | Advance File Uploading API",
    "keywords": "Class CompleteUploadSessionRequest Namespace AdvanceFileUpload.Application.Request Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to complete a file upload session. public sealed record CompleteUploadSessionRequest : IEquatable<CompleteUploadSessionRequest> Inheritance object CompleteUploadSessionRequest Implements IEquatable<CompleteUploadSessionRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Application.Request.CompressionOption.html": {
    "href": "api/AdvanceFileUpload.Application.Request.CompressionOption.html",
    "title": "Class CompressionOption | Advance File Uploading API",
    "keywords": "Class CompressionOption Namespace AdvanceFileUpload.Application.Request Assembly AdvanceFileUpload.Application.Shared.dll Represents the compression options for a file upload session. public sealed record CompressionOption : IEquatable<CompressionOption> Inheritance object CompressionOption Implements IEquatable<CompressionOption> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Algorithm Gets the compression algorithm to use. public CompressionAlgorithmOption Algorithm { get; init; } Property Value CompressionAlgorithmOption Level Gets the compression level to use. public CompressionLevelOption Level { get; init; } Property Value CompressionLevelOption"
  },
  "api/AdvanceFileUpload.Application.Request.CreateUploadSessionRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Request.CreateUploadSessionRequest.html",
    "title": "Class CreateUploadSessionRequest | Advance File Uploading API",
    "keywords": "Class CreateUploadSessionRequest Namespace AdvanceFileUpload.Application.Request Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to create a new file upload session. public sealed record CreateUploadSessionRequest : IEquatable<CreateUploadSessionRequest> Inheritance object CreateUploadSessionRequest Implements IEquatable<CreateUploadSessionRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CompressedFileSize public required long? CompressedFileSize { get; init; } Property Value long? Compression Gets the Compression Option of the file upload session. public CompressionOption? Compression { get; init; } Property Value CompressionOption FileExtension Gets the file extension of the file to be uploaded. public required string FileExtension { get; init; } Property Value string FileName Gets the name of the file to be uploaded. public required string FileName { get; init; } Property Value string FileSize Gets the size of the file to be uploaded. public required long FileSize { get; init; } Property Value long HubConnectionId Gets the unique identifier of the hub connection. public string? HubConnectionId { get; init; } Property Value string UseCompression Gets a value indicating whether compression is used. public bool UseCompression { get; } Property Value bool"
  },
  "api/AdvanceFileUpload.Application.Request.GetUploadSessionStatusRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Request.GetUploadSessionStatusRequest.html",
    "title": "Class GetUploadSessionStatusRequest | Advance File Uploading API",
    "keywords": "Class GetUploadSessionStatusRequest Namespace AdvanceFileUpload.Application.Request Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to get the status of an upload session. public sealed record GetUploadSessionStatusRequest : IEquatable<GetUploadSessionStatusRequest> Inheritance object GetUploadSessionStatusRequest Implements IEquatable<GetUploadSessionStatusRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Application.Request.PauseUploadSessionRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Request.PauseUploadSessionRequest.html",
    "title": "Class PauseUploadSessionRequest | Advance File Uploading API",
    "keywords": "Class PauseUploadSessionRequest Namespace AdvanceFileUpload.Application.Request Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to pause an upload session. public sealed record PauseUploadSessionRequest : IEquatable<PauseUploadSessionRequest> Inheritance object PauseUploadSessionRequest Implements IEquatable<PauseUploadSessionRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Application.Request.UploadChunkRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Request.UploadChunkRequest.html",
    "title": "Class UploadChunkRequest | Advance File Uploading API",
    "keywords": "Class UploadChunkRequest Namespace AdvanceFileUpload.Application.Request Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to upload a chunk of a file. public sealed record UploadChunkRequest : IEquatable<UploadChunkRequest> Inheritance object UploadChunkRequest Implements IEquatable<UploadChunkRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ChunkData Gets the data of the chunk being uploaded. public required byte[] ChunkData { get; init; } Property Value byte[] ChunkIndex Gets the index of the chunk being uploaded,(Zero based index). public int ChunkIndex { get; init; } Property Value int HubConnectionId Gets the unique identifier of the hub connection. public string? HubConnectionId { get; init; } Property Value string SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Application.Request.html": {
    "href": "api/AdvanceFileUpload.Application.Request.html",
    "title": "Namespace AdvanceFileUpload.Application.Request | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Application.Request Classes CancelUploadSessionRequest Represents a request to cancel an upload session. CompleteUploadSessionRequest Represents a request to complete a file upload session. CompressionOption Represents the compression options for a file upload session. CreateUploadSessionRequest Represents a request to create a new file upload session. GetUploadSessionStatusRequest Represents a request to get the status of an upload session. PauseUploadSessionRequest Represents a request to pause an upload session. UploadChunkRequest Represents a request to upload a chunk of a file."
  },
  "api/AdvanceFileUpload.Application.Response.CreateUploadSessionResponse.html": {
    "href": "api/AdvanceFileUpload.Application.Response.CreateUploadSessionResponse.html",
    "title": "Class CreateUploadSessionResponse | Advance File Uploading API",
    "keywords": "Class CreateUploadSessionResponse Namespace AdvanceFileUpload.Application.Response Assembly AdvanceFileUpload.Application.Shared.dll Represents the response after creating a new file upload session. public sealed record CreateUploadSessionResponse : IEquatable<CreateUploadSessionResponse> Inheritance object CreateUploadSessionResponse Implements IEquatable<CreateUploadSessionResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long MaxChunkSize Gets the maximum size of each chunk. public long MaxChunkSize { get; init; } Property Value long SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid SessionStartDate Gets the start date and time of the upload session. public DateTime SessionStartDate { get; init; } Property Value DateTime TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; init; } Property Value int UploadStatus Gets the current status of the upload session. public UploadStatus UploadStatus { get; init; } Property Value UploadStatus"
  },
  "api/AdvanceFileUpload.Application.Response.UploadSessionStatusNotification.html": {
    "href": "api/AdvanceFileUpload.Application.Response.UploadSessionStatusNotification.html",
    "title": "Class UploadSessionStatusNotification | Advance File Uploading API",
    "keywords": "Class UploadSessionStatusNotification Namespace AdvanceFileUpload.Application.Response Assembly AdvanceFileUpload.Application.Shared.dll Represent the status of the upload session Notification. public sealed record UploadSessionStatusNotification : IEquatable<UploadSessionStatusNotification> Inheritance object UploadSessionStatusNotification Implements IEquatable<UploadSessionStatusNotification> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long MaxChunkSize Gets the maximum size of each chunk. public long MaxChunkSize { get; init; } Property Value long ProgressPercentage Gets the progress percentage of the file upload. public double ProgressPercentage { get; init; } Property Value double RemainChunks Gets the list of remaining chunks to be uploaded. public List<int>? RemainChunks { get; init; } Property Value List<int> SessionEndDate Gets the end date and time of the upload session, if it has ended. public DateTime? SessionEndDate { get; init; } Property Value DateTime? SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid SessionStartDate Gets the start date and time of the upload session. public DateTime SessionStartDate { get; init; } Property Value DateTime TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; init; } Property Value int TotalUploadedChunks Gets the total number of chunks that have been uploaded. public int TotalUploadedChunks { get; init; } Property Value int UploadStatus Gets the current status of the upload session. public UploadStatus UploadStatus { get; init; } Property Value UploadStatus"
  },
  "api/AdvanceFileUpload.Application.Response.UploadSessionStatusResponse.html": {
    "href": "api/AdvanceFileUpload.Application.Response.UploadSessionStatusResponse.html",
    "title": "Class UploadSessionStatusResponse | Advance File Uploading API",
    "keywords": "Class UploadSessionStatusResponse Namespace AdvanceFileUpload.Application.Response Assembly AdvanceFileUpload.Application.Shared.dll Represents the status response of an upload session. public sealed record UploadSessionStatusResponse : IEquatable<UploadSessionStatusResponse> Inheritance object UploadSessionStatusResponse Implements IEquatable<UploadSessionStatusResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long MaxChunkSize Gets the maximum size of each chunk. public long MaxChunkSize { get; init; } Property Value long ProgressPercentage Gets the progress percentage of the file upload. public double ProgressPercentage { get; init; } Property Value double RemainChunks Gets the list of remaining chunks to be uploaded. public List<int>? RemainChunks { get; init; } Property Value List<int> SessionEndDate Gets the end date and time of the upload session, if it has ended. public DateTime? SessionEndDate { get; init; } Property Value DateTime? SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid SessionStartDate Gets the start date and time of the upload session. public DateTime SessionStartDate { get; init; } Property Value DateTime TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; init; } Property Value int TotalUploadedChunks Gets the total number of chunks that have been uploaded. public int TotalUploadedChunks { get; init; } Property Value int UploadStatus Gets the current status of the upload session. public UploadStatus UploadStatus { get; init; } Property Value UploadStatus"
  },
  "api/AdvanceFileUpload.Application.Response.UploadStatus.html": {
    "href": "api/AdvanceFileUpload.Application.Response.UploadStatus.html",
    "title": "Enum UploadStatus | Advance File Uploading API",
    "keywords": "Enum UploadStatus Namespace AdvanceFileUpload.Application.Response Assembly AdvanceFileUpload.Application.Shared.dll Represents the status of an upload session. public enum UploadStatus Fields Canceled = 5 The file upload session is canceled. Completed = 4 The file upload session is completed. Failed = 6 The file upload session has failed. InProgress = 1 The file upload session is in progress. Paused = 2 The file upload session is paused. PendingToComplete = 3 The file upload session is Watling to be Completed."
  },
  "api/AdvanceFileUpload.Application.Response.html": {
    "href": "api/AdvanceFileUpload.Application.Response.html",
    "title": "Namespace AdvanceFileUpload.Application.Response | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Application.Response Classes CreateUploadSessionResponse Represents the response after creating a new file upload session. UploadSessionStatusNotification Represent the status of the upload session Notification. UploadSessionStatusResponse Represents the status response of an upload session. Enums UploadStatus Represents the status of an upload session."
  },
  "api/AdvanceFileUpload.Application.SessionsStatusCheckerService.html": {
    "href": "api/AdvanceFileUpload.Application.SessionsStatusCheckerService.html",
    "title": "Class SessionsStatusCheckerService | Advance File Uploading API",
    "keywords": "Class SessionsStatusCheckerService Namespace AdvanceFileUpload.Application Assembly AdvanceFileUpload.Application.dll Service responsible for checking the status of file upload sessions and marking them as failed if they are older than 48 hours and not completed. public sealed class SessionsStatusCheckerService Inheritance object SessionsStatusCheckerService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SessionsStatusCheckerService(IRepository<FileUploadSession>, ILogger<SessionsStatusCheckerService>) Initializes a new instance of the SessionsStatusCheckerService class. public SessionsStatusCheckerService(IRepository<FileUploadSession> fileUploadSessionRepository, ILogger<SessionsStatusCheckerService> logger) Parameters fileUploadSessionRepository IRepository<FileUploadSession> The repository for managing file upload sessions. logger ILogger<SessionsStatusCheckerService> The logger for logging information and errors. Exceptions ArgumentNullException Thrown when fileUploadSessionRepository or logger is null. Methods CheckStatusAsync(CancellationToken) Checks the status of file upload sessions that are older than 48 hours and not completed. Marks such sessions as failed and updates them in the repository. public Task CheckStatusAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. Remarks This method fetches sessions with statuses InProgress, Paused, or PendingToComplete that started more than 48 hours ago. It marks them as failed and updates the repository."
  },
  "api/AdvanceFileUpload.Application.Settings.IUploadSetting.html": {
    "href": "api/AdvanceFileUpload.Application.Settings.IUploadSetting.html",
    "title": "Interface IUploadSetting | Advance File Uploading API",
    "keywords": "Interface IUploadSetting Namespace AdvanceFileUpload.Application.Settings Assembly AdvanceFileUpload.Application.dll Interface for upload settings. public interface IUploadSetting Properties AllowedExtensions Gets or sets the allowed file extensions. string[] AllowedExtensions { get; set; } Property Value string[] Examples For example: new string[] { \".jpg\", \".png\", \".pdf\" } EnableCompression Gets or sets a value indicating whether to enable compression. bool EnableCompression { get; set; } Property Value bool EnableIntegrationEventPublishing Gets or sets a value indicating whether to enable integration event publishing. bool EnableIntegrationEventPublishing { get; set; } Property Value bool MaxChunkSize Gets or sets the maximum chunk size for file uploads. long MaxChunkSize { get; set; } Property Value long MaxFileSize Gets or sets the maximum file size for uploads. long MaxFileSize { get; set; } Property Value long SavingDirectory Gets or sets the directory where files will be saved. string SavingDirectory { get; set; } Property Value string TempDirectory Gets or sets the directory where temporary files will be saved. string TempDirectory { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.Application.Settings.UploadSetting.html": {
    "href": "api/AdvanceFileUpload.Application.Settings.UploadSetting.html",
    "title": "Class UploadSetting | Advance File Uploading API",
    "keywords": "Class UploadSetting Namespace AdvanceFileUpload.Application.Settings Assembly AdvanceFileUpload.Application.dll Represents the upload settings. public sealed class UploadSetting : IUploadSetting Inheritance object UploadSetting Implements IUploadSetting Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields DefaultMaxChunkSize The default maximum chunk file size. public const long DefaultMaxChunkSize = 2097152 Field Value long SectionName The name of the section in the configuration file. public const string SectionName = \"UploadSetting\" Field Value string Properties AllowedExtensions Gets or sets the allowed file extensions. public required string[] AllowedExtensions { get; set; } Property Value string[] Examples For example: new string[] { \".jpg\", \".png\", \".pdf\" } EnableCompression Gets or sets a value indicating whether to enable compression. public bool EnableCompression { get; set; } Property Value bool EnableIntegrationEventPublishing Gets or sets a value indicating whether to enable integration event publishing. public bool EnableIntegrationEventPublishing { get; set; } Property Value bool MaxChunkSize Gets or sets the maximum chunk size for file uploads. public long MaxChunkSize { get; set; } Property Value long MaxFileSize Gets or sets the maximum file size for uploads. public long MaxFileSize { get; set; } Property Value long SavingDirectory Gets or sets the directory where files will be saved. public required string SavingDirectory { get; set; } Property Value string TempDirectory Gets or sets the directory where temporary files will be saved. public required string TempDirectory { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.Application.Settings.html": {
    "href": "api/AdvanceFileUpload.Application.Settings.html",
    "title": "Namespace AdvanceFileUpload.Application.Settings | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Application.Settings Classes UploadSetting Represents the upload settings. Interfaces IUploadSetting Interface for upload settings."
  },
  "api/AdvanceFileUpload.Application.Shared.RouteTemplates.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.RouteTemplates.html",
    "title": "Class RouteTemplates | Advance File Uploading API",
    "keywords": "Class RouteTemplates Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Contains route templates for the file upload API. public static class RouteTemplates Inheritance object RouteTemplates Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields APIHealthEndPoint The route for the health check endpoint. public const string APIHealthEndPoint = \"/health\" Field Value string Base The base route for the file upload API. public const string Base = \"api/upload/\" Field Value string CancelSession The route for canceling an upload session. public const string CancelSession = \"api/upload/cancel-session\" Field Value string Remarks Requires a session ID. CompleteSession The route for completing an upload session. public const string CompleteSession = \"api/upload/complete-session\" Field Value string Remarks Requires a session ID. CreateSession The route for creating a new upload session. public const string CreateSession = \"api/upload/create-session\" Field Value string PauseSession The route for pausing an upload session. public const string PauseSession = \"api/upload/pause-session\" Field Value string Remarks Requires a session ID. SessionStatus The route for checking the status of an upload session. public const string SessionStatus = \"api/upload/session-status\" Field Value string Remarks Requires a session ID. UploadChunk The route for uploading a chunk of a file. public const string UploadChunk = \"api/upload/upload-chunk\" Field Value string UploadProcessHub The route for the upload process hub. public const string UploadProcessHub = \"api/UploadProcessHub\" Field Value string"
  },
  "api/AdvanceFileUpload.Application.Shared.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.html",
    "title": "Namespace AdvanceFileUpload.Application.Shared | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Application.Shared Classes RouteTemplates Contains route templates for the file upload API."
  },
  "api/AdvanceFileUpload.Application.UploadManger.html": {
    "href": "api/AdvanceFileUpload.Application.UploadManger.html",
    "title": "Class UploadManger | Advance File Uploading API",
    "keywords": "Class UploadManger Namespace AdvanceFileUpload.Application Assembly AdvanceFileUpload.Application.dll Represents the upload manager. public class UploadManger : IUploadManger Inheritance object UploadManger Implements IUploadManger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadManger(IRepository<FileUploadSession>, IDomainEventPublisher, IFileValidator, IChunkValidator, IOptions<UploadSetting>, IFileProcessor, IFileCompressor, ILogger<UploadManger>) Initializes a new instance of the UploadManger class. public UploadManger(IRepository<FileUploadSession> repository, IDomainEventPublisher domainEventPublisher, IFileValidator fileValidator, IChunkValidator chunkValidator, IOptions<UploadSetting> uploadSetting, IFileProcessor fileProcessor, IFileCompressor fileCompressor, ILogger<UploadManger> logger) Parameters repository IRepository<FileUploadSession> The repository for managing file upload sessions. domainEventPublisher IDomainEventPublisher The publisher for domain events. fileValidator IFileValidator The validator for file properties. chunkValidator IChunkValidator The validator for file chunks. uploadSetting IOptions<UploadSetting> The settings for file uploads. fileProcessor IFileProcessor The service for file operations. fileCompressor IFileCompressor The service for file compressor logger ILogger<UploadManger> The logger for logging information. Exceptions ArgumentNullException Thrown when any of the parameters are null. Methods CancelUploadSessionAsync(Guid, CancellationToken) Cancels the file upload session asynchronously. public Task<bool> CancelUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the session was canceled successfully. CompleteUploadSessionAsync(Guid, CancellationToken) Completes the file upload session asynchronously. public Task<bool> CompleteUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the File was Uploading Completed successfully. CreateUploadSessionAsync(CreateUploadSessionRequest, CancellationToken) Creates a new file upload session asynchronously. public Task<CreateUploadSessionResponse> CreateUploadSessionAsync(CreateUploadSessionRequest request, CancellationToken cancellationToken = default) Parameters request CreateUploadSessionRequest The request containing the details of the file to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<CreateUploadSessionResponse> A task that represents the asynchronous operation. The task result contains the response with the details of the created upload session. GetUploadSessionStatusAsync(Guid, CancellationToken) Gets the status of the upload session asynchronously. public Task<UploadSessionStatusResponse?> GetUploadSessionStatusAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<UploadSessionStatusResponse> A task that represents the asynchronous operation. The task result contains the response with the status of the upload session. PauseUploadSessionAsync(Guid, CancellationToken) pause the file upload session asynchronously. public Task<bool> PauseUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the session was paused successfully. UploadChunkAsync(UploadChunkRequest, CancellationToken) Uploads a chunk of the file asynchronously. public Task<bool> UploadChunkAsync(UploadChunkRequest request, CancellationToken cancellationToken = default) Parameters request UploadChunkRequest The request containing the details of the chunk to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the chunk was uploaded successfully."
  },
  "api/AdvanceFileUpload.Application.Validators.ChunkValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Validators.ChunkValidator.html",
    "title": "Class ChunkValidator | Advance File Uploading API",
    "keywords": "Class ChunkValidator Namespace AdvanceFileUpload.Application.Validators Assembly AdvanceFileUpload.Application.Shared.dll Represents a chunk validator. public class ChunkValidator : IChunkValidator Inheritance object ChunkValidator Implements IChunkValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsValidChunkData(byte[], long) Validates the chunk data. public bool IsValidChunkData(byte[] chunkData, long MaxChunkSize) Parameters chunkData byte[] The data of the chunk to validate. MaxChunkSize long The maximum size of the chunk. Returns bool True if the chunk data is valid; otherwise, false. IsValidChunkIndex(int) Validates the chunk index. public bool IsValidChunkIndex(int chunkIndex) Parameters chunkIndex int The index of the chunk to validate. Returns bool True if the chunk index is valid; otherwise, false. IsValidChunkSize(long, long) Validates the size of the chunk. public bool IsValidChunkSize(long chunkSize, long maxChunkSize) Parameters chunkSize long The size of the chunk to validate. maxChunkSize long The maximum allowed size of the chunk. Returns bool True if the chunk size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Validators.FileCompressionValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Validators.FileCompressionValidator.html",
    "title": "Class FileCompressionValidator | Advance File Uploading API",
    "keywords": "Class FileCompressionValidator Namespace AdvanceFileUpload.Application.Validators Assembly AdvanceFileUpload.Application.Shared.dll Represents a File Compression validator. public class FileCompressionValidator : IFileCompressionValidator Inheritance object FileCompressionValidator Implements IFileCompressionValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsValidCompressedData(byte[], CompressionAlgorithmOption) Validates if the provided file data is correctly compressed using the specified compression algorithm. public bool IsValidCompressedData(byte[] data, CompressionAlgorithmOption compressionAlgorithmOption) Parameters data byte[] The file data to validate. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm used to compress the data. Returns bool True if the data is valid compressed data; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Validators.FileValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Validators.FileValidator.html",
    "title": "Class FileValidator | Advance File Uploading API",
    "keywords": "Class FileValidator Namespace AdvanceFileUpload.Application.Validators Assembly AdvanceFileUpload.Application.Shared.dll Represents a file validator. public class FileValidator : IFileValidator Inheritance object FileValidator Implements IFileValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsValidFileExtension(string, string[]) Validates the file extension. public bool IsValidFileExtension(string fileExtension, string[] allowedExtensions) Parameters fileExtension string The extension of the file to validate. allowedExtensions string[] The allowed extensions of the file to validate. Returns bool True if the file extension is valid; otherwise, false. IsValidFileName(string) Validates the file name. public bool IsValidFileName(string fileName) Parameters fileName string The name of the file to validate. Returns bool True if the file name is valid; otherwise, false. IsValidFileSize(long, long) Validates the file size. public bool IsValidFileSize(long fileSize, long maxFileSize) Parameters fileSize long The size of the file to validate. maxFileSize long The maximum allowed size of the file. Returns bool True if the file size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Validators.IChunkValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Validators.IChunkValidator.html",
    "title": "Interface IChunkValidator | Advance File Uploading API",
    "keywords": "Interface IChunkValidator Namespace AdvanceFileUpload.Application.Validators Assembly AdvanceFileUpload.Application.Shared.dll Interface for validating file chunks. public interface IChunkValidator Methods IsValidChunkData(byte[], long) Validates the chunk data. bool IsValidChunkData(byte[] chunkData, long MaxChunkSize) Parameters chunkData byte[] The data of the chunk to validate. MaxChunkSize long The maximum size of the chunk. Returns bool True if the chunk data is valid; otherwise, false. IsValidChunkIndex(int) Validates the chunk index. bool IsValidChunkIndex(int chunkIndex) Parameters chunkIndex int The index of the chunk to validate. Returns bool True if the chunk index is valid; otherwise, false. IsValidChunkSize(long, long) Validates the size of the chunk. bool IsValidChunkSize(long chunkSize, long maxChunkSize) Parameters chunkSize long The size of the chunk to validate. maxChunkSize long The maximum allowed size of the chunk. Returns bool True if the chunk size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Validators.IFileCompressionValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Validators.IFileCompressionValidator.html",
    "title": "Interface IFileCompressionValidator | Advance File Uploading API",
    "keywords": "Interface IFileCompressionValidator Namespace AdvanceFileUpload.Application.Validators Assembly AdvanceFileUpload.Application.Shared.dll Interface for validating compressed file data. public interface IFileCompressionValidator Methods IsValidCompressedData(byte[], CompressionAlgorithmOption) Validates if the provided file data is correctly compressed using the specified compression algorithm. bool IsValidCompressedData(byte[] data, CompressionAlgorithmOption compressionAlgorithmOption) Parameters data byte[] The file data to validate. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm used to compress the data. Returns bool True if the data is valid compressed data; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Validators.IFileValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Validators.IFileValidator.html",
    "title": "Interface IFileValidator | Advance File Uploading API",
    "keywords": "Interface IFileValidator Namespace AdvanceFileUpload.Application.Validators Assembly AdvanceFileUpload.Application.Shared.dll Interface for validating files. public interface IFileValidator Methods IsValidFileExtension(string, string[]) Validates the file extension. bool IsValidFileExtension(string fileExtension, string[] allowedExtensions) Parameters fileExtension string The extension of the file to validate. allowedExtensions string[] The allowed extensions of the file to validate. Returns bool True if the file extension is valid; otherwise, false. IsValidFileName(string) Validates the file name. bool IsValidFileName(string fileName) Parameters fileName string The name of the file to validate. Returns bool True if the file name is valid; otherwise, false. IsValidFileSize(long, long) Validates the file size. bool IsValidFileSize(long fileSize, long maxFileSize) Parameters fileSize long The size of the file to validate. maxFileSize long The maximum allowed size of the file. Returns bool True if the file size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Validators.html": {
    "href": "api/AdvanceFileUpload.Application.Validators.html",
    "title": "Namespace AdvanceFileUpload.Application.Validators | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Application.Validators Classes ChunkValidator Represents a chunk validator. FileCompressionValidator Represents a File Compression validator. FileValidator Represents a file validator. Interfaces IChunkValidator Interface for validating file chunks. IFileCompressionValidator Interface for validating compressed file data. IFileValidator Interface for validating files."
  },
  "api/AdvanceFileUpload.Application.html": {
    "href": "api/AdvanceFileUpload.Application.html",
    "title": "Namespace AdvanceFileUpload.Application | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Application Classes SessionsStatusCheckerService Service responsible for checking the status of file upload sessions and marking them as failed if they are older than 48 hours and not completed. UploadManger Represents the upload manager. Interfaces IUploadManger Interface for managing file upload sessions."
  },
  "api/AdvanceFileUpload.Client.ChunkUploadedEventArgs.html": {
    "href": "api/AdvanceFileUpload.Client.ChunkUploadedEventArgs.html",
    "title": "Class ChunkUploadedEventArgs | Advance File Uploading API",
    "keywords": "Class ChunkUploadedEventArgs Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Provides data for the ChunkUploaded event. public class ChunkUploadedEventArgs : EventArgs Inheritance object EventArgs ChunkUploadedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChunkUploadedEventArgs(Guid, int, long) Initializes a new instance of the ChunkUploadedEventArgs class. public ChunkUploadedEventArgs(Guid sessionId, int chunkIndex, long chunkSize) Parameters sessionId Guid The session ID associated with the uploaded chunk. chunkIndex int The index of the uploaded chunk. chunkSize long The size of the uploaded chunk. Properties ChunkIndex Gets the index of the uploaded chunk. public int ChunkIndex { get; } Property Value int ChunkSize Gets the size of the uploaded chunk. public long ChunkSize { get; } Property Value long SessionId Gets the session ID associated with the uploaded chunk. public Guid SessionId { get; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Client.FileCompressionCompletedEventArg.html": {
    "href": "api/AdvanceFileUpload.Client.FileCompressionCompletedEventArg.html",
    "title": "Class FileCompressionCompletedEventArg | Advance File Uploading API",
    "keywords": "Class FileCompressionCompletedEventArg Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Provides data for the event that is raised when a file compression operation is completed. public class FileCompressionCompletedEventArg : EventArgs Inheritance object EventArgs FileCompressionCompletedEventArg Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class contains information about the original file size and the compressed file size, which can be used to analyze the effectiveness of the compression process. Constructors FileCompressionCompletedEventArg(long, long) Provides data for the event that is raised when a file compression operation is completed. public FileCompressionCompletedEventArg(long originalFileSize, long compressedFileSize) Parameters originalFileSize long The size of the file, in bytes, before compression. compressedFileSize long The size of the file, in bytes, after compression. Properties CompressedFileSize Gets the size of the compressed file in bytes. public long CompressedFileSize { get; } Property Value long OriginalFileSize Gets the original size of the file in bytes. public long OriginalFileSize { get; } Property Value long"
  },
  "api/AdvanceFileUpload.Client.FileUploadBuilder.html": {
    "href": "api/AdvanceFileUpload.Client.FileUploadBuilder.html",
    "title": "Class FileUploadBuilder | Advance File Uploading API",
    "keywords": "Class FileUploadBuilder Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll A builder class for configuring and creating instances of FileUploadService. public sealed class FileUploadBuilder Inheritance object FileUploadBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Build() Builds and returns a new instance of FileUploadService based on the configured options. public FileUploadService Build() Returns FileUploadService A new instance of FileUploadService. Exceptions InvalidOperationException Thrown if the API key is not set. ExcludeCompressionExtension(string) Excludes a specific file extension from compression. public FileUploadBuilder ExcludeCompressionExtension(string extension) Parameters extension string The file extension to exclude. Returns FileUploadBuilder The current instance of FileUploadBuilder. Exceptions ArgumentException Thrown if extension is null or empty. ExcludeCompressionExtensions(IEnumerable<string>) Excludes multiple file extensions from compression. public FileUploadBuilder ExcludeCompressionExtensions(IEnumerable<string> extensions) Parameters extensions IEnumerable<string> The collection of file extensions to exclude. Returns FileUploadBuilder The current instance of FileUploadBuilder. Exceptions ArgumentException Thrown if extensions is null or empty. New(string) Creates a new instance of FileUploadBuilder with the specified base URL. public static FileUploadBuilder New(string baseUri) Parameters baseUri string The base URL for the file upload service. Returns FileUploadBuilder A new instance of FileUploadBuilder. Exceptions ArgumentException Thrown if baseUri is null or empty. New(string, string) Creates a new instance of FileUploadBuilder with the specified base URL and API key. public static FileUploadBuilder New(string baseUrl, string apiKey) Parameters baseUrl string The base URL for the file upload service as a string. apiKey string The API key to use for authentication. Returns FileUploadBuilder A new instance of FileUploadBuilder. Exceptions ArgumentException Thrown if baseUrl is null or empty, or if apiKey is null or empty. New(Uri) Creates a new instance of FileUploadBuilder with the specified base URL. public static FileUploadBuilder New(Uri baseUrl) Parameters baseUrl Uri The base URL for the file upload service. Returns FileUploadBuilder A new instance of FileUploadBuilder. Exceptions ArgumentException Thrown if baseUrl is null. New(Uri, string) Creates a new instance of FileUploadBuilder with the specified base URL and API key. public static FileUploadBuilder New(Uri baseUrl, string apiKey) Parameters baseUrl Uri The base URL for the file upload service. apiKey string The API key to use for authentication. Returns FileUploadBuilder A new instance of FileUploadBuilder. Exceptions ArgumentException Thrown if baseUrl is null or apiKey is null or empty. WithAPIKey(string) Sets the API key for the file upload service. public FileUploadBuilder WithAPIKey(string apiKey) Parameters apiKey string The API key to use for authentication. Returns FileUploadBuilder The current instance of FileUploadBuilder. Exceptions ArgumentException Thrown if apiKey is null or empty. WithCompressionOption(CompressionOption) Sets the compression options for the file upload service. public FileUploadBuilder WithCompressionOption(CompressionOption compressionOption) Parameters compressionOption CompressionOption The compression options to use. Returns FileUploadBuilder The current instance of FileUploadBuilder. WithCompressionOption(Func<CompressionOption>) Sets the compression options for the file upload service. public FileUploadBuilder WithCompressionOption(Func<CompressionOption> compressionOption) Parameters compressionOption Func<CompressionOption> The compression options to use. Returns FileUploadBuilder The current instance of FileUploadBuilder. WithMaxConcurrentUploads(int) Sets the maximum number of concurrent uploads. public FileUploadBuilder WithMaxConcurrentUploads(int maxConcurrentUploads) Parameters maxConcurrentUploads int The maximum number of concurrent uploads. Returns FileUploadBuilder The current instance of FileUploadBuilder. Exceptions ArgumentException Thrown if maxConcurrentUploads is less than or equal to zero. WithMaxRetriesCount(int) Sets the maximum number of retry attempts for failed uploads. public FileUploadBuilder WithMaxRetriesCount(int maxRetriesCount) Parameters maxRetriesCount int The maximum number of retry attempts. Returns FileUploadBuilder The current instance of FileUploadBuilder. Exceptions ArgumentException Thrown if maxRetriesCount is negative. WithRequestTimeOut(TimeSpan) Sets the request timeout for the file upload service. public FileUploadBuilder WithRequestTimeOut(TimeSpan requestTimeOut) Parameters requestTimeOut TimeSpan Returns FileUploadBuilder Exceptions ArgumentException WithTempDirectory(string) Sets the temporary directory for file uploads. public FileUploadBuilder WithTempDirectory(string tempDirectory) Parameters tempDirectory string The path to the temporary directory. Returns FileUploadBuilder The current instance of FileUploadBuilder. Exceptions ArgumentException Thrown if tempDirectory is null or empty."
  },
  "api/AdvanceFileUpload.Client.FileUploadService.html": {
    "href": "api/AdvanceFileUpload.Client.FileUploadService.html",
    "title": "Class FileUploadService | Advance File Uploading API",
    "keywords": "Class FileUploadService Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Provides functionality to upload files with support for compression, chunking, session management, and real-time progress tracking. public sealed class FileUploadService : IFileUploadService, IDisposable Inheritance object FileUploadService Implements IFileUploadService IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks The FileUploadService handles complete file upload lifecycle including: File compression using configurable algorithms Chunked uploads with configurable chunk sizes Automatic retries with exponential backoff Network health monitoring Real-time progress updates via SignalR Pause/resume capabilities Event Usage Pattern: Subscribe to lifecycle events (SessionCreated, SessionCompleted) for session tracking Use UploadProgressChanged for real-time progress updates Handle ChunkUploaded for per-chunk tracking Listen to error events (UploadError, NetworkError) for error handling Use pause/resume events (SessionPaused, SessionResumed) for UI state management Typical Event Sequence: FileCompressionStarted FileCompressionCompleted SessionCreated FileSplittingStarted FileSplittingCompleted Multiple ChunkUploaded events SessionCompleted Important Notes: Subscribe to events before calling UploadFileAsync(string) to ensure proper event capture Use Dispose() when upload session is completed to clean up temporary files Service instances are single-use - if you want to upload multiple files in parallel, you need to create a new instance of the FileUploadService for each file. Network connectivity is automatically monitored with NetworkError reporting The service will Ignore compression for already compressed file extensions. You can get the already compressed file extensions by using the CompressionIgnoredExtensions you can add your own extensions to the list of ignored extensions by using the ExcludedCompressionExtensions property in the UploadOptions class. Constructors FileUploadService(Uri, UploadOptions) Initializes a new instance of the FileUploadService class. public FileUploadService(Uri apiBaseAddress, UploadOptions uploadOptions) Parameters apiBaseAddress Uri The base address of the API. uploadOptions UploadOptions The options for uploading files. Exceptions ArgumentNullException Thrown when apiBaseAddress or uploadOptions is null. Properties CanCancelSession Gets a value indicating whether the session can be canceled. public bool CanCancelSession { get; } Property Value bool CanPauseSession Gets a value indicating whether the session can be paused. public bool CanPauseSession { get; } Property Value bool CanResumeSession Gets a value indicating whether the session can be resumed. public bool CanResumeSession { get; } Property Value bool CompressionIgnoredExtensions Get the list of file extensions that will be ignored during compression. public IReadOnlyList<string> CompressionIgnoredExtensions { get; } Property Value IReadOnlyList<string> IsSessionCanceled Gets a value indicating whether the session is canceled. public bool IsSessionCanceled { get; } Property Value bool IsSessionCompleted Gets a value indicating whether the session is completed. public bool IsSessionCompleted { get; } Property Value bool IsSessionPaused Gets a value indicating whether the session is paused. public bool IsSessionPaused { get; } Property Value bool Methods CancelUploadAsync() Cancels the ongoing file upload asynchronously. public Task CancelUploadAsync() Returns Task A task that represents the asynchronous operation. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() PauseUploadAsync() Pauses the ongoing file upload asynchronously. public Task PauseUploadAsync() Returns Task A task that represents the asynchronous operation. ResumeUploadAsync() Resumes the paused file upload asynchronously. public Task ResumeUploadAsync() Returns Task A task that represents the asynchronous operation. UploadFileAsync(string) Uploads a file asynchronously. public Task UploadFileAsync(string filePath) Parameters filePath string The path of the file to be uploaded. Returns Task A task that represents the asynchronous operation. Remarks Throws an UploadException if the service is already processing an upload request. Exceptions UploadException Events AuthenticationError Occurs when an authentication error happens. public event EventHandler<string>? AuthenticationError Event Type EventHandler<string> ChunkUploaded Occurs when a chunk is uploaded. public event EventHandler<ChunkUploadedEventArgs>? ChunkUploaded Event Type EventHandler<ChunkUploadedEventArgs> FileCompressionCompleted Occurs when the file compression process completes. public event EventHandler<FileCompressionCompletedEventArg>? FileCompressionCompleted Event Type EventHandler<FileCompressionCompletedEventArg> FileCompressionStarted Occurs when the file compression process starts. public event EventHandler? FileCompressionStarted Event Type EventHandler FileSplittingCompleted Occurs when the file splitting process completes. public event EventHandler? FileSplittingCompleted Event Type EventHandler FileSplittingStarted Occurs when the file splitting process starts. public event EventHandler? FileSplittingStarted Event Type EventHandler NetworkError Occurs when a network error happens. public event EventHandler<string>? NetworkError Event Type EventHandler<string> SessionCanceled Occurs when the upload session is canceled. public event EventHandler<SessionCanceledEventArgs>? SessionCanceled Event Type EventHandler<SessionCanceledEventArgs> SessionCanceling Occurs when the upload session is canceling. public event EventHandler? SessionCanceling Event Type EventHandler SessionCompleted Occurs when the upload session is completed. public event EventHandler<SessionCompletedEventArgs>? SessionCompleted Event Type EventHandler<SessionCompletedEventArgs> SessionCompleting Occurs when the upload session is completing. public event EventHandler? SessionCompleting Event Type EventHandler SessionCreated Occurs when a new upload session is created. public event EventHandler<SessionCreatedEventArgs>? SessionCreated Event Type EventHandler<SessionCreatedEventArgs> SessionPaused Occurs when the upload session is paused. public event EventHandler<SessionPausedEventArgs>? SessionPaused Event Type EventHandler<SessionPausedEventArgs> SessionPausing Occurs when the upload session is pausing. public event EventHandler? SessionPausing Event Type EventHandler SessionResumed Occurs when the upload session is resumed. public event EventHandler<SessionResumedEventArgs>? SessionResumed Event Type EventHandler<SessionResumedEventArgs> SessionResuming Occurs when the upload session is resuming. public event EventHandler? SessionResuming Event Type EventHandler UploadError Occurs when an upload error happens. public event EventHandler<string>? UploadError Event Type EventHandler<string> UploadProgressChanged Occurs when the upload progress changes. public event EventHandler<UploadProgressChangedEventArgs>? UploadProgressChanged Event Type EventHandler<UploadProgressChangedEventArgs> UploadRetryAttempt Occurs when a retry attempt is made during the upload process. public event EventHandler<string>? UploadRetryAttempt Event Type EventHandler<string>"
  },
  "api/AdvanceFileUpload.Client.Helper.ConnectionStatus.html": {
    "href": "api/AdvanceFileUpload.Client.Helper.ConnectionStatus.html",
    "title": "Enum ConnectionStatus | Advance File Uploading API",
    "keywords": "Enum ConnectionStatus Namespace AdvanceFileUpload.Client.Helper Assembly AdvanceFileUpload.Client.dll Represents the status of a connection. public enum ConnectionStatus Fields Degraded = 2 The connection is degraded. Healthy = 0 The connection is healthy. Timeout = 3 The connection has timed out. Unhealthy = 1 The connection is unhealthy."
  },
  "api/AdvanceFileUpload.Client.Helper.INetworkConnectionChecker.html": {
    "href": "api/AdvanceFileUpload.Client.Helper.INetworkConnectionChecker.html",
    "title": "Interface INetworkConnectionChecker | Advance File Uploading API",
    "keywords": "Interface INetworkConnectionChecker Namespace AdvanceFileUpload.Client.Helper Assembly AdvanceFileUpload.Client.dll Defines methods to check the health of a network connection. public interface INetworkConnectionChecker : IDisposable Inherited Members IDisposable.Dispose() Methods CheckApiHealthAsync(CancellationToken) Checks the health of the API asynchronously. Task<ConnectionStatus> CheckApiHealthAsync(CancellationToken ct = default) Parameters ct CancellationToken A cancellation token that can be used to cancel the operation. Returns Task<ConnectionStatus> A task that represents the asynchronous operation. The task result contains the connection status."
  },
  "api/AdvanceFileUpload.Client.Helper.NetworkCheckOptions.html": {
    "href": "api/AdvanceFileUpload.Client.Helper.NetworkCheckOptions.html",
    "title": "Class NetworkCheckOptions | Advance File Uploading API",
    "keywords": "Class NetworkCheckOptions Namespace AdvanceFileUpload.Client.Helper Assembly AdvanceFileUpload.Client.dll Configuration options for the NetworkConnectionChecker. public class NetworkCheckOptions Inheritance object NetworkCheckOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BaseAddress Gets or sets the base address of the API. public required Uri BaseAddress { get; set; } Property Value Uri HealthEndpoint Gets or sets the health endpoint to check. public string HealthEndpoint { get; set; } Property Value string Method Gets or sets the HTTP method to use for the health check. public HttpMethod Method { get; set; } Property Value HttpMethod Timeout Gets or sets the timeout duration for the health check request. public TimeSpan Timeout { get; set; } Property Value TimeSpan UseHttp2 Gets or sets a value indicating whether to use HTTP/2 for the health check request. public bool UseHttp2 { get; set; } Property Value bool"
  },
  "api/AdvanceFileUpload.Client.Helper.NetworkConnectionChecker.html": {
    "href": "api/AdvanceFileUpload.Client.Helper.NetworkConnectionChecker.html",
    "title": "Class NetworkConnectionChecker | Advance File Uploading API",
    "keywords": "Class NetworkConnectionChecker Namespace AdvanceFileUpload.Client.Helper Assembly AdvanceFileUpload.Client.dll Checks the health of a network connection by sending HTTP requests to a specified endpoint. public sealed class NetworkConnectionChecker : INetworkConnectionChecker, IDisposable Inheritance object NetworkConnectionChecker Implements INetworkConnectionChecker IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkConnectionChecker(NetworkCheckOptions) Initializes a new instance of the NetworkConnectionChecker class. public NetworkConnectionChecker(NetworkCheckOptions networkCheckOptions) Parameters networkCheckOptions NetworkCheckOptions The options for configuring the network check. Methods CheckApiHealthAsync(CancellationToken) Checks the health of the API asynchronously. public Task<ConnectionStatus> CheckApiHealthAsync(CancellationToken ct = default) Parameters ct CancellationToken A cancellation token that can be used to cancel the operation. Returns Task<ConnectionStatus> A task that represents the asynchronous operation. The task result contains the connection status. Dispose() Disposes the HTTP client. public void Dispose()"
  },
  "api/AdvanceFileUpload.Client.Helper.html": {
    "href": "api/AdvanceFileUpload.Client.Helper.html",
    "title": "Namespace AdvanceFileUpload.Client.Helper | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Client.Helper Classes NetworkCheckOptions Configuration options for the NetworkConnectionChecker. NetworkConnectionChecker Checks the health of a network connection by sending HTTP requests to a specified endpoint. Interfaces INetworkConnectionChecker Defines methods to check the health of a network connection. Enums ConnectionStatus Represents the status of a connection."
  },
  "api/AdvanceFileUpload.Client.IFileUploadService.html": {
    "href": "api/AdvanceFileUpload.Client.IFileUploadService.html",
    "title": "Interface IFileUploadService | Advance File Uploading API",
    "keywords": "Interface IFileUploadService Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Defines the contract for a file upload service. public interface IFileUploadService : IDisposable Inherited Members IDisposable.Dispose() Properties CanCancelSession Gets a value indicating whether the session can be canceled. bool CanCancelSession { get; } Property Value bool CanPauseSession Gets a value indicating whether the session can be paused. bool CanPauseSession { get; } Property Value bool CanResumeSession Gets a value indicating whether the session can be resumed. bool CanResumeSession { get; } Property Value bool CompressionIgnoredExtensions Get the list of file extensions that will be ignored during compression. IReadOnlyList<string> CompressionIgnoredExtensions { get; } Property Value IReadOnlyList<string> IsSessionCanceled Gets a value indicating whether the session is canceled. bool IsSessionCanceled { get; } Property Value bool IsSessionCompleted Gets a value indicating whether the session is completed. bool IsSessionCompleted { get; } Property Value bool IsSessionPaused Gets a value indicating whether the session is paused. bool IsSessionPaused { get; } Property Value bool Methods CancelUploadAsync() Cancels the ongoing file upload asynchronously. Task CancelUploadAsync() Returns Task A task that represents the asynchronous operation. PauseUploadAsync() Pauses the ongoing file upload asynchronously. Task PauseUploadAsync() Returns Task A task that represents the asynchronous operation. ResumeUploadAsync() Resumes the paused file upload asynchronously. Task ResumeUploadAsync() Returns Task A task that represents the asynchronous operation. UploadFileAsync(string) Uploads a file asynchronously. Task UploadFileAsync(string filePath) Parameters filePath string The path of the file to be uploaded. Returns Task A task that represents the asynchronous operation."
  },
  "api/AdvanceFileUpload.Client.SessionCanceledEventArgs.html": {
    "href": "api/AdvanceFileUpload.Client.SessionCanceledEventArgs.html",
    "title": "Class SessionCanceledEventArgs | Advance File Uploading API",
    "keywords": "Class SessionCanceledEventArgs Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Provides data for the session canceled event. public class SessionCanceledEventArgs : EventArgs Inheritance object EventArgs SessionCanceledEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SessionCanceledEventArgs(Guid, string, long) Initializes a new instance of the SessionCanceledEventArgs class. public SessionCanceledEventArgs(Guid sessionId, string fileName, long fileSize) Parameters sessionId Guid The unique identifier for the session. fileName string The name of the file associated with the session. fileSize long The size of the file associated with the session. Properties FileName Gets the name of the file associated with the session. public string FileName { get; } Property Value string FileSize Gets the size of the file associated with the session. public long FileSize { get; } Property Value long SessionId Gets the unique identifier for the session. public Guid SessionId { get; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Client.SessionCompletedEventArgs.html": {
    "href": "api/AdvanceFileUpload.Client.SessionCompletedEventArgs.html",
    "title": "Class SessionCompletedEventArgs | Advance File Uploading API",
    "keywords": "Class SessionCompletedEventArgs Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Provides data for the session completed event. public class SessionCompletedEventArgs : EventArgs Inheritance object EventArgs SessionCompletedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SessionCompletedEventArgs(Guid, string, long) Initializes a new instance of the SessionCompletedEventArgs class. public SessionCompletedEventArgs(Guid sessionId, string fileName, long fileSize) Parameters sessionId Guid The unique identifier for the session. fileName string The name of the file that was uploaded. fileSize long The size of the file that was uploaded. Properties FileName Gets the name of the file that was uploaded. public string FileName { get; } Property Value string FileSize Gets the size of the file that was uploaded. public long FileSize { get; } Property Value long SessionId Gets the unique identifier for the session. public Guid SessionId { get; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Client.SessionCreatedEventArgs.html": {
    "href": "api/AdvanceFileUpload.Client.SessionCreatedEventArgs.html",
    "title": "Class SessionCreatedEventArgs | Advance File Uploading API",
    "keywords": "Class SessionCreatedEventArgs Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll public class SessionCreatedEventArgs : EventArgs Inheritance object EventArgs SessionCreatedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long MaxChunkSize Gets the maximum size of each chunk. public long MaxChunkSize { get; init; } Property Value long SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid SessionStartDate Gets the start date and time of the upload session. public DateTime SessionStartDate { get; init; } Property Value DateTime TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; init; } Property Value int UploadStatus Gets the current status of the upload session. public UploadStatus UploadStatus { get; init; } Property Value UploadStatus Methods Create(CreateUploadSessionResponse) Creates a new instance of SessionCreatedEventArgs from the given CreateUploadSessionResponse. public static SessionCreatedEventArgs Create(CreateUploadSessionResponse createUploadSessionResponse) Parameters createUploadSessionResponse CreateUploadSessionResponse The response containing the details of the created upload session. Returns SessionCreatedEventArgs A new instance of SessionCreatedEventArgs."
  },
  "api/AdvanceFileUpload.Client.SessionPausedEventArgs.html": {
    "href": "api/AdvanceFileUpload.Client.SessionPausedEventArgs.html",
    "title": "Class SessionPausedEventArgs | Advance File Uploading API",
    "keywords": "Class SessionPausedEventArgs Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Provides data for the session paused event. public class SessionPausedEventArgs : EventArgs Inheritance object EventArgs SessionPausedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SessionPausedEventArgs(Guid, string, long) Initializes a new instance of the SessionPausedEventArgs class. public SessionPausedEventArgs(Guid sessionId, string fileName, long fileSize) Parameters sessionId Guid The unique identifier for the session. fileName string The name of the file being uploaded. fileSize long The size of the file being uploaded. Properties FileName Gets the name of the file being uploaded. public string FileName { get; } Property Value string FileSize Gets the size of the file being uploaded. public long FileSize { get; } Property Value long SessionId Gets the unique identifier for the session. public Guid SessionId { get; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Client.SessionResumedEventArgs.html": {
    "href": "api/AdvanceFileUpload.Client.SessionResumedEventArgs.html",
    "title": "Class SessionResumedEventArgs | Advance File Uploading API",
    "keywords": "Class SessionResumedEventArgs Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Provides data for the session resumed event. public class SessionResumedEventArgs : EventArgs Inheritance object EventArgs SessionResumedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SessionResumedEventArgs(Guid, string, long) Initializes a new instance of the SessionResumedEventArgs class. public SessionResumedEventArgs(Guid sessionId, string fileName, long fileSize) Parameters sessionId Guid The unique identifier for the session. fileName string The name of the file being uploaded. fileSize long The size of the file being uploaded. Properties FileName Gets the name of the file being uploaded. public string FileName { get; } Property Value string FileSize Gets the size of the file being uploaded. public long FileSize { get; } Property Value long SessionId Gets the unique identifier for the session. public Guid SessionId { get; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Client.UploadException.html": {
    "href": "api/AdvanceFileUpload.Client.UploadException.html",
    "title": "Class UploadException | Advance File Uploading API",
    "keywords": "Class UploadException Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Represents errors that occur during file upload operations. public class UploadException : Exception, ISerializable Inheritance object Exception UploadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UploadException(SerializationInfo, StreamingContext) Initializes a new instance of the UploadException class with serialized data. protected UploadException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The SerializationInfo that holds the serialized object data about the exception being thrown. context StreamingContext The StreamingContext that contains contextual information about the source or destination. UploadException(string?) Initializes a new instance of the UploadException class with a specified error message. public UploadException(string? message) Parameters message string The message that describes the error. UploadException(string?, Exception?) Initializes a new instance of the UploadException class with a specified error message and a reference to the inner exception that is the cause of this exception. public UploadException(string? message, Exception? innerException) Parameters message string The message that describes the error. innerException Exception The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "api/AdvanceFileUpload.Client.UploadOptions.html": {
    "href": "api/AdvanceFileUpload.Client.UploadOptions.html",
    "title": "Class UploadOptions | Advance File Uploading API",
    "keywords": "Class UploadOptions Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Represents the options for uploading files, including compression settings, excluded file extensions, temporary directory, maximum concurrent uploads, and maximum retry count. public class UploadOptions Inheritance object UploadOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties APIKey Gets or sets the API key for authentication. public required string APIKey { get; set; } Property Value string CompressionOption Gets or sets the compression option for the file upload. public CompressionOption? CompressionOption { get; set; } Property Value CompressionOption DefaultRetryDelayInSeconds Gets the delay between retries in seconds. Default is 5 seconds. public int DefaultRetryDelayInSeconds { get; } Property Value int ExcludedCompressionExtensions Gets the list of file extensions that should not be compressed. public List<string> ExcludedCompressionExtensions { get; init; } Property Value List<string> MaxConcurrentUploads Gets or sets the maximum number of concurrent uploads. Default is 4. public int MaxConcurrentUploads { get; set; } Property Value int MaxRetriesCount Gets or sets the maximum number of retry attempts for failed uploads. Default is 3. public int MaxRetriesCount { get; set; } Property Value int RequestTimeOut Get or sets the Request Timeout for the chunks uploading. Defaults 30 second. public TimeSpan RequestTimeOut { get; set; } Property Value TimeSpan TempDirectory Gets or sets the temporary directory used for file uploads. public string TempDirectory { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.Client.UploadProgressChangedEventArgs.html": {
    "href": "api/AdvanceFileUpload.Client.UploadProgressChangedEventArgs.html",
    "title": "Class UploadProgressChangedEventArgs | Advance File Uploading API",
    "keywords": "Class UploadProgressChangedEventArgs Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Provides data when the upload progress changes. public class UploadProgressChangedEventArgs : EventArgs Inheritance object EventArgs UploadProgressChangedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long MaxChunkSize Gets the maximum size of each chunk. public long MaxChunkSize { get; init; } Property Value long ProgressPercentage Gets the progress percentage of the file upload. public double ProgressPercentage { get; init; } Property Value double RemainChunks Gets the list of remaining chunks to be uploaded. public List<int>? RemainChunks { get; init; } Property Value List<int> SessionEndDate Gets the end date and time of the upload session, if it has ended. public DateTime? SessionEndDate { get; init; } Property Value DateTime? SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid SessionStartDate Gets the start date and time of the upload session. public DateTime SessionStartDate { get; init; } Property Value DateTime TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; init; } Property Value int TotalUploadedChunks Gets the total number of chunks that have been uploaded. public int TotalUploadedChunks { get; init; } Property Value int UploadStatus Gets the current status of the upload session. public UploadStatus UploadStatus { get; init; } Property Value UploadStatus Methods Create(UploadSessionStatusNotification) Creates a new instance of the UploadProgressChangedEventArgs class from the specified UploadSessionStatusNotification. public static UploadProgressChangedEventArgs Create(UploadSessionStatusNotification uploadSessionStatusNotification) Parameters uploadSessionStatusNotification UploadSessionStatusNotification The upload session status notification. Returns UploadProgressChangedEventArgs A new instance of the UploadProgressChangedEventArgs class."
  },
  "api/AdvanceFileUpload.Client.html": {
    "href": "api/AdvanceFileUpload.Client.html",
    "title": "Namespace AdvanceFileUpload.Client | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Client Classes ChunkUploadedEventArgs Provides data for the ChunkUploaded event. FileCompressionCompletedEventArg Provides data for the event that is raised when a file compression operation is completed. FileUploadBuilder A builder class for configuring and creating instances of FileUploadService. FileUploadService Provides functionality to upload files with support for compression, chunking, session management, and real-time progress tracking. SessionCanceledEventArgs Provides data for the session canceled event. SessionCompletedEventArgs Provides data for the session completed event. SessionCreatedEventArgs SessionPausedEventArgs Provides data for the session paused event. SessionResumedEventArgs Provides data for the session resumed event. UploadException Represents errors that occur during file upload operations. UploadOptions Represents the options for uploading files, including compression settings, excluded file extensions, temporary directory, maximum concurrent uploads, and maximum retry count. UploadProgressChangedEventArgs Provides data when the upload progress changes. Interfaces IFileUploadService Defines the contract for a file upload service."
  },
  "api/AdvanceFileUpload.Data.ApploicationDbContext.html": {
    "href": "api/AdvanceFileUpload.Data.ApploicationDbContext.html",
    "title": "Class ApploicationDbContext | Advance File Uploading API",
    "keywords": "Class ApploicationDbContext Namespace AdvanceFileUpload.Data Assembly AdvanceFileUpload.Data.dll public class ApploicationDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext ApploicationDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApploicationDbContext(DbContextOptions<ApploicationDbContext>) public ApploicationDbContext(DbContextOptions<ApploicationDbContext> options) Parameters options DbContextOptions<ApploicationDbContext> Properties FileUploadSessions public DbSet<FileUploadSession> FileUploadSessions { get; set; } Property Value DbSet<FileUploadSession> Methods OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples."
  },
  "api/AdvanceFileUpload.Data.DesignTimeDbContextFactory.html": {
    "href": "api/AdvanceFileUpload.Data.DesignTimeDbContextFactory.html",
    "title": "Class DesignTimeDbContextFactory | Advance File Uploading API",
    "keywords": "Class DesignTimeDbContextFactory Namespace AdvanceFileUpload.Data Assembly AdvanceFileUpload.Data.dll public class DesignTimeDbContextFactory : IDesignTimeDbContextFactory<ApploicationDbContext> Inheritance object DesignTimeDbContextFactory Implements IDesignTimeDbContextFactory<ApploicationDbContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateDbContext(string[]) Creates a new instance of a derived context. public ApploicationDbContext CreateDbContext(string[] args) Parameters args string[] Arguments provided by the design-time service. Returns ApploicationDbContext An instance of ApploicationDbContext."
  },
  "api/AdvanceFileUpload.Data.FileUploadSessionRepository.html": {
    "href": "api/AdvanceFileUpload.Data.FileUploadSessionRepository.html",
    "title": "Class FileUploadSessionRepository | Advance File Uploading API",
    "keywords": "Class FileUploadSessionRepository Namespace AdvanceFileUpload.Data Assembly AdvanceFileUpload.Data.dll Represents a repository for managing file upload session entities. public class FileUploadSessionRepository : IRepository<FileUploadSession> Inheritance object FileUploadSessionRepository Implements IRepository<FileUploadSession> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionRepository(ApploicationDbContext, ILogger<FileUploadSessionRepository>) Initializes a new instance of the FileUploadSessionRepository class. public FileUploadSessionRepository(ApploicationDbContext context, ILogger<FileUploadSessionRepository> logger) Parameters context ApploicationDbContext The Application Db Context logger ILogger<FileUploadSessionRepository> Exceptions ArgumentNullException Methods AddAsync(FileUploadSession, CancellationToken) Asynchronously adds a new entity to the repository. public Task<FileUploadSession> AddAsync(FileUploadSession entity, CancellationToken cancellationToken = default) Parameters entity FileUploadSession The entity to add. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<FileUploadSession> A task that represents the asynchronous operation. The task result contains the added entity. AnyAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken) Asynchronously determines whether any entities match the specified predicate. public Task<bool> AnyAsync(Expression<Func<FileUploadSession, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<FileUploadSession, bool>> The expression to filter entities. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<bool> A task that represents the asynchronous operation. The task result is true if any matching entities exist; otherwise, false. AnyAsync(CancellationToken) Asynchronously determines whether any entities exist in the repository. public Task<bool> AnyAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<bool> A task that represents the asynchronous operation. The task result is true if any entities exist; otherwise, false. CountAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken) Asynchronously counts the number of entities that match the specified predicate. public Task<int> CountAsync(Expression<Func<FileUploadSession, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<FileUploadSession, bool>> The expression to filter entities. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<int> A task that represents the asynchronous operation. The task result contains the count of matching entities. CountAsync(CancellationToken) Asynchronously counts the total number of entities in the repository. public Task<int> CountAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<int> A task that represents the asynchronous operation. The task result contains the count of entities. FindAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken) Asynchronously finds entities that match the specified predicate. public Task<IEnumerable<FileUploadSession>> FindAsync(Expression<Func<FileUploadSession, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<FileUploadSession, bool>> The expression to filter entities. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<IEnumerable<FileUploadSession>> A task that represents the asynchronous operation. The task result contains a collection of matching entities. GetAllAsync(CancellationToken) Asynchronously retrieves all entities from the repository. public Task<IEnumerable<FileUploadSession>> GetAllAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<IEnumerable<FileUploadSession>> A task that represents the asynchronous operation. The task result contains a collection of all entities. GetByIdAsync(Guid, CancellationToken) Asynchronously retrieves an entity by its unique identifier. public Task<FileUploadSession?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default) Parameters id Guid The unique identifier of the entity. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<FileUploadSession> A task that represents the asynchronous operation. The task result contains the entity if found. RemoveAsync(FileUploadSession, CancellationToken) Asynchronously removes an entity from the repository. public Task<bool> RemoveAsync(FileUploadSession entity, CancellationToken cancellationToken = default) Parameters entity FileUploadSession The entity to remove. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<bool> A task that represents the asynchronous operation. UpdateAsync(FileUploadSession, CancellationToken) Asynchronously updates an existing entity in the repository. public Task<FileUploadSession> UpdateAsync(FileUploadSession entity, CancellationToken cancellationToken = default) Parameters entity FileUploadSession The entity with updated values. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<FileUploadSession> A task that represents the asynchronous operation. The task result contains the updated entity."
  },
  "api/AdvanceFileUpload.Data.Migrations.AddConcurrencyToken.html": {
    "href": "api/AdvanceFileUpload.Data.Migrations.AddConcurrencyToken.html",
    "title": "Class AddConcurrencyToken | Advance File Uploading API",
    "keywords": "Class AddConcurrencyToken Namespace AdvanceFileUpload.Data.Migrations Assembly AdvanceFileUpload.Data.dll A base class inherited by each EF Core migration. [DbContext(typeof(ApploicationDbContext))] [Migration(\"20250320023148_AddConcurrencyToken\")] public class AddConcurrencyToken : Migration Inheritance object Migration AddConcurrencyToken Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/AdvanceFileUpload.Data.Migrations.AddRowVersion.html": {
    "href": "api/AdvanceFileUpload.Data.Migrations.AddRowVersion.html",
    "title": "Class AddRowVersion | Advance File Uploading API",
    "keywords": "Class AddRowVersion Namespace AdvanceFileUpload.Data.Migrations Assembly AdvanceFileUpload.Data.dll A base class inherited by each EF Core migration. [DbContext(typeof(ApploicationDbContext))] [Migration(\"20250320024432_AddRowVersion\")] public class AddRowVersion : Migration Inheritance object Migration AddRowVersion Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/AdvanceFileUpload.Data.Migrations.InitialCreate.html": {
    "href": "api/AdvanceFileUpload.Data.Migrations.InitialCreate.html",
    "title": "Class InitialCreate | Advance File Uploading API",
    "keywords": "Class InitialCreate Namespace AdvanceFileUpload.Data.Migrations Assembly AdvanceFileUpload.Data.dll A base class inherited by each EF Core migration. [DbContext(typeof(ApploicationDbContext))] [Migration(\"20250320011620_InitialCreate\")] public class InitialCreate : Migration Inheritance object Migration InitialCreate Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/AdvanceFileUpload.Data.Migrations.html": {
    "href": "api/AdvanceFileUpload.Data.Migrations.html",
    "title": "Namespace AdvanceFileUpload.Data.Migrations | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Data.Migrations Classes AddConcurrencyToken A base class inherited by each EF Core migration. AddRowVersion A base class inherited by each EF Core migration. InitialCreate A base class inherited by each EF Core migration."
  },
  "api/AdvanceFileUpload.Data.ServiceConfiguration.html": {
    "href": "api/AdvanceFileUpload.Data.ServiceConfiguration.html",
    "title": "Class ServiceConfiguration | Advance File Uploading API",
    "keywords": "Class ServiceConfiguration Namespace AdvanceFileUpload.Data Assembly AdvanceFileUpload.Data.dll Provides methods to configure data services for the application. public static class ServiceConfiguration Inheritance object ServiceConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigureDataServices(IServiceCollection, string?) Configures the data services for the application. public static void ConfigureDataServices(this IServiceCollection services, string? connectionString) Parameters services IServiceCollection The service collection to add the services to. connectionString string The connection string for the database."
  },
  "api/AdvanceFileUpload.Data.html": {
    "href": "api/AdvanceFileUpload.Data.html",
    "title": "Namespace AdvanceFileUpload.Data | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Data Classes ApploicationDbContext DesignTimeDbContextFactory FileUploadSessionRepository Represents a repository for managing file upload session entities. ServiceConfiguration Provides methods to configure data services for the application."
  },
  "api/AdvanceFileUpload.Domain.ChunkFile.html": {
    "href": "api/AdvanceFileUpload.Domain.ChunkFile.html",
    "title": "Class ChunkFile | Advance File Uploading API",
    "keywords": "Class ChunkFile Namespace AdvanceFileUpload.Domain Assembly AdvanceFileUpload.Domain.dll Represents a chunk file in a file upload session. public sealed class ChunkFile Inheritance object ChunkFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ChunkIndex Gets the index of the chunk. public int ChunkIndex { get; } Property Value int ChunkPath Gets the path of the chunk file. public string ChunkPath { get; } Property Value string ChunkSize Gets the size of the chunk file. public long ChunkSize { get; } Property Value long SessionId Gets the session identifier to which this chunk belongs. public Guid SessionId { get; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Domain.CompressionAlgorithm.html": {
    "href": "api/AdvanceFileUpload.Domain.CompressionAlgorithm.html",
    "title": "Enum CompressionAlgorithm | Advance File Uploading API",
    "keywords": "Enum CompressionAlgorithm Namespace AdvanceFileUpload.Domain Assembly AdvanceFileUpload.Domain.dll Specifies the compression algorithms. public enum CompressionAlgorithm Fields Brotli = 2 Brotli compression algorithm. Benefits: High compression ratio, especially for web content, better than GZip in many cases. Deflate = 1 Deflate compression algorithm. Benefits: Fast compression and decompression, good for real-time applications. GZip = 0 GZip compression algorithm. Benefits: Good compression ratio and speed, widely supported."
  },
  "api/AdvanceFileUpload.Domain.CompressionLevel.html": {
    "href": "api/AdvanceFileUpload.Domain.CompressionLevel.html",
    "title": "Enum CompressionLevel | Advance File Uploading API",
    "keywords": "Enum CompressionLevel Namespace AdvanceFileUpload.Domain Assembly AdvanceFileUpload.Domain.dll Specifies values that indicate whether a compression operation emphasizes speed or compression size. public enum CompressionLevel Fields Fastest = 1 The compression operation should complete as quickly as possible, even if the resulting file is not optimally compressed. NoCompression = 2 No compression should be performed on the file. Optimal = 0 The compression operation should optimally balance compression speed and output size. SmallestSize = 3 The compression operation should create output as small as possible, even if the operation takes a longer time to complete."
  },
  "api/AdvanceFileUpload.Domain.Core.DomainEventBase.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.DomainEventBase.html",
    "title": "Class DomainEventBase | Advance File Uploading API",
    "keywords": "Class DomainEventBase Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Represents the base class for all domain events. public abstract class DomainEventBase : IDomainEvent, INotification Inheritance object DomainEventBase Implements IDomainEvent INotification Derived ChunkUploadedEvent FileUploadSessionCanceledEvent FileUploadSessionCompletedEvent FileUploadSessionCreatedEvent FileUploadSessionFailedEvent FileUploadSessionPausedEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DomainEventBase() Initializes a new instance of the DomainEventBase class. protected DomainEventBase() Properties Id Gets the unique identifier of the domain event. public Guid Id { get; } Property Value Guid OccurredOn Gets the date and time when the event occurred. public DateTime OccurredOn { get; } Property Value DateTime"
  },
  "api/AdvanceFileUpload.Domain.Core.DomainException.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.DomainException.html",
    "title": "Class DomainException | Advance File Uploading API",
    "keywords": "Class DomainException Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Represents errors that occur during domain operations. public class DomainException : Exception, ISerializable Inheritance object Exception DomainException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DomainException(string?) Initializes a new instance of the DomainException class with a specified error message. public DomainException(string? message) Parameters message string The message that describes the error. DomainException(string?, Exception?) Initializes a new instance of the DomainException class with a specified error message and a reference to the inner exception that is the cause of this exception. public DomainException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception."
  },
  "api/AdvanceFileUpload.Domain.Core.EntityBase.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.EntityBase.html",
    "title": "Class EntityBase | Advance File Uploading API",
    "keywords": "Class EntityBase Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Represents the base class for all entities in the domain. public abstract class EntityBase Inheritance object EntityBase Derived FileUploadSession Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EntityBase() Initializes a new instance of the EntityBase class. protected EntityBase() Properties DomainEvents Gets the domain events associated with the entity. public IReadOnlyCollection<IDomainEvent> DomainEvents { get; } Property Value IReadOnlyCollection<IDomainEvent> Id Gets the unique identifier for the entity. public Guid Id { get; protected set; } Property Value Guid Methods AddDomainEvent(IDomainEvent) Adds a domain event to the entity. protected void AddDomainEvent(IDomainEvent domainEvent) Parameters domainEvent IDomainEvent The domain event to add. ClearDomainEvents() Clears all domain events from the entity. public void ClearDomainEvents() Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(EntityBase, EntityBase) Determines whether two instances of EntityBase are equal. public static bool operator ==(EntityBase left, EntityBase right) Parameters left EntityBase The left instance to compare. right EntityBase The right instance to compare. Returns bool True if the instances are equal; otherwise, false. operator !=(EntityBase, EntityBase) Determines whether two instances of EntityBase are not equal. public static bool operator !=(EntityBase left, EntityBase right) Parameters left EntityBase The left instance to compare. right EntityBase The right instance to compare. Returns bool True if the instances are not equal; otherwise, false."
  },
  "api/AdvanceFileUpload.Domain.Core.IAggregateRoot.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.IAggregateRoot.html",
    "title": "Interface IAggregateRoot | Advance File Uploading API",
    "keywords": "Interface IAggregateRoot Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Marker interface to indicate that an entity is an aggregate root. public interface IAggregateRoot"
  },
  "api/AdvanceFileUpload.Domain.Core.IDomainEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.IDomainEvent.html",
    "title": "Interface IDomainEvent | Advance File Uploading API",
    "keywords": "Interface IDomainEvent Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Represents a domain event within the system. public interface IDomainEvent : INotification Properties Id Gets the unique identifier of the domain event. Guid Id { get; } Property Value Guid OccurredOn Gets the date and time when the event occurred. DateTime OccurredOn { get; } Property Value DateTime"
  },
  "api/AdvanceFileUpload.Domain.Core.IDomainEventPublisher.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.IDomainEventPublisher.html",
    "title": "Interface IDomainEventPublisher | Advance File Uploading API",
    "keywords": "Interface IDomainEventPublisher Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Defines a contract for publishing domain events. public interface IDomainEventPublisher Methods PublishAsync(IDomainEvent, CancellationToken) Publishes a single domain event asynchronously. Task PublishAsync(IDomainEvent domainEvent, CancellationToken cancellationToken = default) Parameters domainEvent IDomainEvent The domain event to be published. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation. PublishAsync(IEnumerable<IDomainEvent>, CancellationToken) Publishes multiple domain events asynchronously. Task PublishAsync(IEnumerable<IDomainEvent> domainEvents, CancellationToken cancellationToken = default) Parameters domainEvents IEnumerable<IDomainEvent> The collection of domain events to be published. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation."
  },
  "api/AdvanceFileUpload.Domain.Core.IRepository-1.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.IRepository-1.html",
    "title": "Interface IRepository<TEntity> | Advance File Uploading API",
    "keywords": "Interface IRepository<TEntity> Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Defines a generic repository interface for performing CRUD operations on entities. public interface IRepository<TEntity> where TEntity : IAggregateRoot Type Parameters TEntity The type of the entity. Methods AddAsync(TEntity, CancellationToken) Asynchronously adds a new entity to the repository. Task<TEntity> AddAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity to add. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<TEntity> A task that represents the asynchronous operation. The task result contains the added entity. AnyAsync(Expression<Func<TEntity, bool>>, CancellationToken) Asynchronously determines whether any entities match the specified predicate. Task<bool> AnyAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<TEntity, bool>> The expression to filter entities. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<bool> A task that represents the asynchronous operation. The task result is true if any matching entities exist; otherwise, false. AnyAsync(CancellationToken) Asynchronously determines whether any entities exist in the repository. Task<bool> AnyAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<bool> A task that represents the asynchronous operation. The task result is true if any entities exist; otherwise, false. CountAsync(Expression<Func<TEntity, bool>>, CancellationToken) Asynchronously counts the number of entities that match the specified predicate. Task<int> CountAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<TEntity, bool>> The expression to filter entities. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<int> A task that represents the asynchronous operation. The task result contains the count of matching entities. CountAsync(CancellationToken) Asynchronously counts the total number of entities in the repository. Task<int> CountAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<int> A task that represents the asynchronous operation. The task result contains the count of entities. FindAsync(Expression<Func<TEntity, bool>>, CancellationToken) Asynchronously finds entities that match the specified predicate. Task<IEnumerable<TEntity>> FindAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<TEntity, bool>> The expression to filter entities. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<IEnumerable<TEntity>> A task that represents the asynchronous operation. The task result contains a collection of matching entities. GetAllAsync(CancellationToken) Asynchronously retrieves all entities from the repository. Task<IEnumerable<TEntity>> GetAllAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<IEnumerable<TEntity>> A task that represents the asynchronous operation. The task result contains a collection of all entities. GetByIdAsync(Guid, CancellationToken) Asynchronously retrieves an entity by its unique identifier. Task<TEntity?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default) Parameters id Guid The unique identifier of the entity. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<TEntity> A task that represents the asynchronous operation. The task result contains the entity if found. RemoveAsync(TEntity, CancellationToken) Asynchronously removes an entity from the repository. Task<bool> RemoveAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity to remove. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<bool> A task that represents the asynchronous operation. UpdateAsync(TEntity, CancellationToken) Asynchronously updates an existing entity in the repository. Task<TEntity> UpdateAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity with updated values. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<TEntity> A task that represents the asynchronous operation. The task result contains the updated entity."
  },
  "api/AdvanceFileUpload.Domain.Core.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.html",
    "title": "Namespace AdvanceFileUpload.Domain.Core | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Domain.Core Classes DomainEventBase Represents the base class for all domain events. DomainException Represents errors that occur during domain operations. EntityBase Represents the base class for all entities in the domain. Interfaces IAggregateRoot Marker interface to indicate that an entity is an aggregate root. IDomainEvent Represents a domain event within the system. IDomainEventPublisher Defines a contract for publishing domain events. IRepository<TEntity> Defines a generic repository interface for performing CRUD operations on entities."
  },
  "api/AdvanceFileUpload.Domain.Events.ChunkUploadedEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.ChunkUploadedEvent.html",
    "title": "Class ChunkUploadedEvent | Advance File Uploading API",
    "keywords": "Class ChunkUploadedEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll Event that is triggered when a chunk of a file is uploaded. public sealed class ChunkUploadedEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase ChunkUploadedEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ChunkUploadedEvent(ChunkFile) Initializes a new instance of the ChunkUploadedEvent class. public ChunkUploadedEvent(ChunkFile chunkFile) Parameters chunkFile ChunkFile The chunk file that has been uploaded. Exceptions ArgumentNullException Thrown when the chunk file is null. Properties ChunkFile Gets the chunk file associated with this event. public ChunkFile ChunkFile { get; } Property Value ChunkFile"
  },
  "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCanceledEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCanceledEvent.html",
    "title": "Class FileUploadSessionCanceledEvent | Advance File Uploading API",
    "keywords": "Class FileUploadSessionCanceledEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll Event that is triggered when a file upload session is canceled. public sealed class FileUploadSessionCanceledEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase FileUploadSessionCanceledEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionCanceledEvent(FileUploadSession) Initializes a new instance of the FileUploadSessionCanceledEvent class. public FileUploadSessionCanceledEvent(FileUploadSession fileUploadSession) Parameters fileUploadSession FileUploadSession The file upload session that has been canceled. Exceptions ArgumentNullException Thrown when the file upload session is null. Properties FileUploadSession Gets the file upload session associated with this event. public FileUploadSession FileUploadSession { get; } Property Value FileUploadSession"
  },
  "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCompletedEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCompletedEvent.html",
    "title": "Class FileUploadSessionCompletedEvent | Advance File Uploading API",
    "keywords": "Class FileUploadSessionCompletedEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll Event that is triggered when a file upload session is completed. public sealed class FileUploadSessionCompletedEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase FileUploadSessionCompletedEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionCompletedEvent(FileUploadSession) Initializes a new instance of the FileUploadSessionCompletedEvent class. public FileUploadSessionCompletedEvent(FileUploadSession fileUploadSession) Parameters fileUploadSession FileUploadSession The file upload session that has been completed. Exceptions ArgumentNullException Thrown when the file upload session is null. Properties FileUploadSession Gets the file upload session associated with this event. public FileUploadSession FileUploadSession { get; } Property Value FileUploadSession"
  },
  "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCreatedEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCreatedEvent.html",
    "title": "Class FileUploadSessionCreatedEvent | Advance File Uploading API",
    "keywords": "Class FileUploadSessionCreatedEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll Event that is triggered when a file upload session Created. public sealed class FileUploadSessionCreatedEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase FileUploadSessionCreatedEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionCreatedEvent(FileUploadSession) Initializes a new instance of the FileUploadSessionCreatedEvent class. public FileUploadSessionCreatedEvent(FileUploadSession fileUploadSession) Parameters fileUploadSession FileUploadSession The file upload session that has Created. Exceptions ArgumentNullException Thrown when the file upload session is null. Properties FileUploadSession Gets the file upload session associated with this event. public FileUploadSession FileUploadSession { get; } Property Value FileUploadSession"
  },
  "api/AdvanceFileUpload.Domain.Events.FileUploadSessionFailedEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.FileUploadSessionFailedEvent.html",
    "title": "Class FileUploadSessionFailedEvent | Advance File Uploading API",
    "keywords": "Class FileUploadSessionFailedEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll public sealed class FileUploadSessionFailedEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase FileUploadSessionFailedEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionFailedEvent(FileUploadSession) public FileUploadSessionFailedEvent(FileUploadSession fileUploadSession) Parameters fileUploadSession FileUploadSession Properties FileUploadSession public FileUploadSession FileUploadSession { get; } Property Value FileUploadSession"
  },
  "api/AdvanceFileUpload.Domain.Events.FileUploadSessionPausedEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.FileUploadSessionPausedEvent.html",
    "title": "Class FileUploadSessionPausedEvent | Advance File Uploading API",
    "keywords": "Class FileUploadSessionPausedEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll Event that is triggered when a file upload session is paused. public sealed class FileUploadSessionPausedEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase FileUploadSessionPausedEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionPausedEvent(FileUploadSession) Initializes a new instance of the FileUploadSessionPausedEvent class. public FileUploadSessionPausedEvent(FileUploadSession fileUploadSession) Parameters fileUploadSession FileUploadSession The file upload session that has been paused. Exceptions ArgumentNullException Thrown when the file upload session is null. Properties FileUploadSession Gets the file upload session associated with this event. public FileUploadSession FileUploadSession { get; } Property Value FileUploadSession"
  },
  "api/AdvanceFileUpload.Domain.Events.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.html",
    "title": "Namespace AdvanceFileUpload.Domain.Events | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Domain.Events Classes ChunkUploadedEvent Event that is triggered when a chunk of a file is uploaded. FileUploadSessionCanceledEvent Event that is triggered when a file upload session is canceled. FileUploadSessionCompletedEvent Event that is triggered when a file upload session is completed. FileUploadSessionCreatedEvent Event that is triggered when a file upload session Created. FileUploadSessionFailedEvent FileUploadSessionPausedEvent Event that is triggered when a file upload session is paused."
  },
  "api/AdvanceFileUpload.Domain.Extensions.DateTmeExtensions.html": {
    "href": "api/AdvanceFileUpload.Domain.Extensions.DateTmeExtensions.html",
    "title": "Class DateTmeExtensions | Advance File Uploading API",
    "keywords": "Class DateTmeExtensions Namespace AdvanceFileUpload.Domain.Extensions Assembly AdvanceFileUpload.Domain.dll Provides extension methods for DateTime objects. public static class DateTmeExtensions Inheritance object DateTmeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToDateOnly(DateTime) Converts a DateTime object to a DateOnly object. public static DateOnly ToDateOnly(this DateTime dateTime) Parameters dateTime DateTime The DateTime object to convert. Returns DateOnly A DateOnly object representing the date component of the DateTime object."
  },
  "api/AdvanceFileUpload.Domain.Extensions.html": {
    "href": "api/AdvanceFileUpload.Domain.Extensions.html",
    "title": "Namespace AdvanceFileUpload.Domain.Extensions | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Domain.Extensions Classes DateTmeExtensions Provides extension methods for DateTime objects."
  },
  "api/AdvanceFileUpload.Domain.FileUploadSession.html": {
    "href": "api/AdvanceFileUpload.Domain.FileUploadSession.html",
    "title": "Class FileUploadSession | Advance File Uploading API",
    "keywords": "Class FileUploadSession Namespace AdvanceFileUpload.Domain Assembly AdvanceFileUpload.Domain.dll Represents a file upload session. public class FileUploadSession : EntityBase, IAggregateRoot Inheritance object EntityBase FileUploadSession Implements IAggregateRoot Inherited Members EntityBase.Id EntityBase.DomainEvents EntityBase.AddDomainEvent(IDomainEvent) EntityBase.ClearDomainEvents() EntityBase.Equals(object) EntityBase.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSession(string, string, long, long?, long, CompressionAlgorithm?, CompressionLevel?) Initializes a new instance of the FileUploadSession class. public FileUploadSession(string fileName, string savingDirectory, long fileSize, long? compressedSize, long maxChunkSize, CompressionAlgorithm? compressionAlgorithm = null, CompressionLevel? compressionLevel = null) Parameters fileName string The name of the file being uploaded. savingDirectory string The directory where the file is being saved. fileSize long The size of the file being uploaded. compressedSize long? The size of the compressed file being uploaded. maxChunkSize long The maximum size of each chunk. compressionAlgorithm CompressionAlgorithm? The compression Algorithm for the file being uploaded. compressionLevel CompressionLevel? The compression level for the file being uploaded. Properties ChunkFiles Gets the collection of chunk files. public IReadOnlyCollection<ChunkFile> ChunkFiles { get; } Property Value IReadOnlyCollection<ChunkFile> CompressedFileSize Gets the size of the file after compression. public long? CompressedFileSize { get; } Property Value long? Remarks if the CompressedFileSize is not null. The CompressedFileSize will be used to figure the TotalChunksToUpload else FileSize will be used. CompressionAlgorithm Gets the compression Algorithm for the file being uploaded. public CompressionAlgorithm? CompressionAlgorithm { get; } Property Value CompressionAlgorithm? CompressionLevel Gets the compression Level for the file being uploaded. public CompressionLevel? CompressionLevel { get; } Property Value CompressionLevel? CurrentHubConnectionId Gets or set the current hub connection id. public string? CurrentHubConnectionId { get; set; } Property Value string FileExtension Gets the file extension of the file being uploaded. public string FileExtension { get; } Property Value string FileName Gets the name of the file being uploaded. public string FileName { get; } Property Value string FileSize Gets the size of the file being uploaded. public long FileSize { get; } Property Value long MaxChunkSize Gets the maximum size of each chunk. public long MaxChunkSize { get; } Property Value long ProgressPercentage Gets the progress percentage of the file upload. public double ProgressPercentage { get; } Property Value double SavingDirectory Gets the directory where the file is being saved. public string SavingDirectory { get; } Property Value string SessionEndDate Gets the end date of the session. public DateTime? SessionEndDate { get; } Property Value DateTime? SessionStartDate Gets the start date of the session. public DateTime SessionStartDate { get; } Property Value DateTime Status Gets the status of the file upload session. public FileUploadSessionStatus Status { get; } Property Value FileUploadSessionStatus TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; } Property Value int TotalUploadedChunks Gets the total number of chunks that have been uploaded. public int TotalUploadedChunks { get; } Property Value int UploadDate Gets the upload date of the file. public DateOnly UploadDate { get; } Property Value DateOnly UseCompression Gets a value indicating whether compression is used. public bool UseCompression { get; } Property Value bool Version The Row Version. public byte[] Version { get; set; } Property Value byte[] Methods AddChunk(int, string) Adds a chunk to the file upload session. public void AddChunk(int chunkIndex, string chunkPath) Parameters chunkIndex int The index of the chunk. chunkPath string The path of the chunk. Exceptions DomainException Thrown when the chunk cannot be added due to one of the following reasons: The upload session is already completed. The upload session is already canceled. All chunks are already uploaded. The chunk with the specified index is already uploaded. CancelSession() Cancels the file upload session. public void CancelSession() Exceptions DomainException Thrown when the session cannot be canceled because it is already completed or failed. CompleteSession() Completes the file upload session. public void CompleteSession() Exceptions DomainException Thrown when the session cannot be completed due to one of the following reasons: The session is already completed. The session is canceled. The session is failed. Not all chunks have been uploaded. GetRemainChunks() Gets the remaining chunks to be uploaded. public List<int> GetRemainChunks() Returns List<int> List<T> of the remaining chunks to be uploaded. IsAllChunkUploaded() Determines whether all chunks have been uploaded. public bool IsAllChunkUploaded() Returns bool true if all chunks have been uploaded; otherwise, false. IsCanceled() Determines whether the file upload session is canceled. public bool IsCanceled() Returns bool true if the session is canceled; otherwise, false. IsChunkInRange(int) Determines whether the specified chunk index is within the valid range of chunks for the file upload session. public bool IsChunkInRange(int chunkIndex) Parameters chunkIndex int The index of the chunk to check. Returns bool true if the chunk index is within the valid range (0 to TotalChunksToUpload - 1); otherwise, false. IsChunkUploaded(int) Determines whether a specific chunk has been uploaded. public bool IsChunkUploaded(int chunkIndex) Parameters chunkIndex int The index of the chunk. Returns bool true if the chunk has been uploaded; otherwise, false. IsCompleted() Determines whether the file upload session is completed. public bool IsCompleted() Returns bool true if the session is completed; otherwise, false. IsFailed() Determines whether the file upload session is failed. public bool IsFailed() Returns bool true if the session status is Failed; otherwise, false. MarkAsFailed() Marks the file upload session as failed. public void MarkAsFailed() Remarks This method updates the status of the session to Failed and sets the SessionEndDate to the current date and time. It also raises a FileUploadSessionFailedEvent to notify that the session has been failed. Exceptions DomainException Thrown when the session cannot be marked as failed due to one of the following reasons: The session is already completed. The session is canceled. PauseSession() Pauses the file upload session. public void PauseSession() Exceptions DomainException Thrown when the session cannot be paused because it is already completed, canceled or failed."
  },
  "api/AdvanceFileUpload.Domain.FileUploadSessionStatus.html": {
    "href": "api/AdvanceFileUpload.Domain.FileUploadSessionStatus.html",
    "title": "Enum FileUploadSessionStatus | Advance File Uploading API",
    "keywords": "Enum FileUploadSessionStatus Namespace AdvanceFileUpload.Domain Assembly AdvanceFileUpload.Domain.dll Represents the status of a file upload session. public enum FileUploadSessionStatus Fields Canceled = 5 The file upload session is canceled. Completed = 4 The file upload session is completed. Failed = 6 The file upload session has failed. InProgress = 1 The file upload session is in progress. Paused = 2 The file upload session is paused. PendingToComplete = 3 The file upload session is Watling to be Completed."
  },
  "api/AdvanceFileUpload.Domain.html": {
    "href": "api/AdvanceFileUpload.Domain.html",
    "title": "Namespace AdvanceFileUpload.Domain | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Domain Classes ChunkFile Represents a chunk file in a file upload session. FileUploadSession Represents a file upload session. Enums CompressionAlgorithm Specifies the compression algorithms. CompressionLevel Specifies values that indicate whether a compression operation emphasizes speed or compression size. FileUploadSessionStatus Represents the status of a file upload session."
  },
  "api/AdvanceFileUpload.Integration.ChunkUploadedIntegrationEvent.html": {
    "href": "api/AdvanceFileUpload.Integration.ChunkUploadedIntegrationEvent.html",
    "title": "Class ChunkUploadedIntegrationEvent | Advance File Uploading API",
    "keywords": "Class ChunkUploadedIntegrationEvent Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Event triggered when a chunk is uploaded. public class ChunkUploadedIntegrationEvent Inheritance object ChunkUploadedIntegrationEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ChunkIndex Gets or sets the chunk index. public int ChunkIndex { get; set; } Property Value int SessionId Gets or sets the session identifier. public Guid SessionId { get; set; } Property Value Guid Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/AdvanceFileUpload.Integration.ConsumingArgs.html": {
    "href": "api/AdvanceFileUpload.Integration.ConsumingArgs.html",
    "title": "Class ConsumingArgs | Advance File Uploading API",
    "keywords": "Class ConsumingArgs Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Represents the arguments required for consuming messages from a RabbitMQ queue. public class ConsumingArgs Inheritance object ConsumingArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoDelete Gets or sets a value indicating whether the queue and exchange should be automatically deleted when no longer in use. public bool AutoDelete { get; set; } Property Value bool Durable Gets or sets a value indicating whether the queue and exchange should be durable. Durable queues and exchanges survive broker restarts. public bool Durable { get; set; } Property Value bool Exchange Gets or sets the name of the exchange to consume messages from. public required string Exchange { get; set; } Property Value string ExchangeType Gets or sets the type of the exchange (e.g., direct, fanout, topic, headers). public required string ExchangeType { get; set; } Property Value string Exclusive Gets or sets a value indicating whether the queue should be exclusive to the connection that declares it. public bool Exclusive { get; set; } Property Value bool Queue Gets or sets the name of the queue to consume messages from. public required string Queue { get; set; } Property Value string RoutingKey Gets or sets the routing key used for binding the queue to the exchange. public required string RoutingKey { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.Integration.IIntegrationEventConsumer.html": {
    "href": "api/AdvanceFileUpload.Integration.IIntegrationEventConsumer.html",
    "title": "Interface IIntegrationEventConsumer | Advance File Uploading API",
    "keywords": "Interface IIntegrationEventConsumer Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Defines a contract for consuming integration events. public interface IIntegrationEventConsumer : IAsyncDisposable, IDisposable Inherited Members IAsyncDisposable.DisposeAsync() IDisposable.Dispose() Methods ConsumeAsync<T>(ConsumingArgs, Func<T, Task>, CancellationToken) Consumes an integration event of the specified type. Task ConsumeAsync<T>(ConsumingArgs args, Func<T, Task> onMessageReceived, CancellationToken cancellationToken = default) where T : class Parameters args ConsumingArgs The arguments required for consuming the event. onMessageReceived Func<T, Task> A callback function to handle the received message. cancellationToken CancellationToken Returns Task Type Parameters T The type of the event to consume."
  },
  "api/AdvanceFileUpload.Integration.IIntegrationEventPublisher.html": {
    "href": "api/AdvanceFileUpload.Integration.IIntegrationEventPublisher.html",
    "title": "Interface IIntegrationEventPublisher | Advance File Uploading API",
    "keywords": "Interface IIntegrationEventPublisher Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Defines a contract for publishing integration events to a message broker or event bus. public interface IIntegrationEventPublisher : IAsyncDisposable, IDisposable Inherited Members IAsyncDisposable.DisposeAsync() IDisposable.Dispose() Methods PublishAsync<T>(PublishMessage<T>, CancellationToken) Publishes an integration event message asynchronously. Task PublishAsync<T>(PublishMessage<T> message, CancellationToken cancellationToken = default) where T : class Parameters message PublishMessage<T> The message to be published, including metadata such as queue, exchange, and routing details. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous publish operation. Type Parameters T The type of the message payload."
  },
  "api/AdvanceFileUpload.Integration.IntegrationConstants.ChunkUploadedConstants.html": {
    "href": "api/AdvanceFileUpload.Integration.IntegrationConstants.ChunkUploadedConstants.html",
    "title": "Class IntegrationConstants.ChunkUploadedConstants | Advance File Uploading API",
    "keywords": "Class IntegrationConstants.ChunkUploadedConstants Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Constants related to the \"Chunk Uploaded\" event. public sealed class IntegrationConstants.ChunkUploadedConstants Inheritance object IntegrationConstants.ChunkUploadedConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AutoDelete Indicates whether the queue is auto-deleted for the \"Chunk Uploaded\" event. public const bool AutoDelete = false Field Value bool Durable Indicates whether the queue is durable for the \"Chunk Uploaded\" event. public const bool Durable = true Field Value bool Exchange The exchange name for the \"Chunk Uploaded\" event. public const string Exchange = \"Chunk-Uploaded\" Field Value string ExchangeType The type of exchange for the \"Chunk Uploaded\" event. public const string ExchangeType = \"direct\" Field Value string Exclusive Indicates whether the queue is exclusive for the \"Chunk Uploaded\" event. public const bool Exclusive = false Field Value bool Queue The name of the queue for the \"Chunk Uploaded\" event. public const string Queue = \"Chunk-Uploaded\" Field Value string RoutingKey The routing key for the \"Chunk Uploaded\" event. public const string RoutingKey = \"Chunk-Uploaded\" Field Value string"
  },
  "api/AdvanceFileUpload.Integration.IntegrationConstants.SessionCanceledConstants.html": {
    "href": "api/AdvanceFileUpload.Integration.IntegrationConstants.SessionCanceledConstants.html",
    "title": "Class IntegrationConstants.SessionCanceledConstants | Advance File Uploading API",
    "keywords": "Class IntegrationConstants.SessionCanceledConstants Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Constants related to the \"Session Canceled\" event. public sealed class IntegrationConstants.SessionCanceledConstants Inheritance object IntegrationConstants.SessionCanceledConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AutoDelete Indicates whether the queue is auto-deleted for the \"Session Canceled\" event. public const bool AutoDelete = false Field Value bool Durable Indicates whether the queue is durable for the \"Session Canceled\" event. public const bool Durable = true Field Value bool Exchange The exchange name for the \"Session Canceled\" event. public const string Exchange = \"Session-Canceled\" Field Value string ExchangeType The type of exchange for the \"Session Canceled\" event. public const string ExchangeType = \"direct\" Field Value string Exclusive Indicates whether the queue is exclusive for the \"Session Canceled\" event. public const bool Exclusive = false Field Value bool Queue The name of the queue for the \"Session Canceled\" event. public const string Queue = \"Session-Canceled\" Field Value string RoutingKey The routing key for the \"Session Canceled\" event. public const string RoutingKey = \"Session-Canceled\" Field Value string"
  },
  "api/AdvanceFileUpload.Integration.IntegrationConstants.SessionCompletedConstants.html": {
    "href": "api/AdvanceFileUpload.Integration.IntegrationConstants.SessionCompletedConstants.html",
    "title": "Class IntegrationConstants.SessionCompletedConstants | Advance File Uploading API",
    "keywords": "Class IntegrationConstants.SessionCompletedConstants Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Constants related to the \"Session Completed\" event. public sealed class IntegrationConstants.SessionCompletedConstants Inheritance object IntegrationConstants.SessionCompletedConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AutoDelete Indicates whether the queue is auto-deleted for the \"Session Completed\" event. public const bool AutoDelete = false Field Value bool Durable Indicates whether the queue is durable for the \"Session Completed\" event. public const bool Durable = true Field Value bool Exchange The exchange name for the \"Session Completed\" event. public const string Exchange = \"Session-Completed\" Field Value string ExchangeType The type of exchange for the \"Session Completed\" event. public const string ExchangeType = \"direct\" Field Value string Exclusive Indicates whether the queue is exclusive for the \"Session Completed\" event. public const bool Exclusive = false Field Value bool Queue The name of the queue for the \"Session Completed\" event. public const string Queue = \"Session-Completed\" Field Value string RoutingKey The routing key for the \"Session Completed\" event. public const string RoutingKey = \"Session-Completed\" Field Value string"
  },
  "api/AdvanceFileUpload.Integration.IntegrationConstants.SessionCreatedConstants.html": {
    "href": "api/AdvanceFileUpload.Integration.IntegrationConstants.SessionCreatedConstants.html",
    "title": "Class IntegrationConstants.SessionCreatedConstants | Advance File Uploading API",
    "keywords": "Class IntegrationConstants.SessionCreatedConstants Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Constants related to the \"Session Created\" event. public sealed class IntegrationConstants.SessionCreatedConstants Inheritance object IntegrationConstants.SessionCreatedConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AutoDelete Indicates whether the queue is auto-deleted for the \"Session Created\" event. public const bool AutoDelete = false Field Value bool Durable Indicates whether the queue is durable for the \"Session Created\" event. public const bool Durable = true Field Value bool Exchange The exchange name for the \"Session Created\" event. public const string Exchange = \"Session-Created\" Field Value string ExchangeType The type of exchange for the \"Session Created\" event. public const string ExchangeType = \"direct\" Field Value string Exclusive Indicates whether the queue is exclusive for the \"Session Created\" event. public const bool Exclusive = false Field Value bool Queue The name of the queue for the \"Session Created\" event. public const string Queue = \"Session-Created\" Field Value string RoutingKey The routing key for the \"Session Created\" event. public const string RoutingKey = \"Session-Created\" Field Value string"
  },
  "api/AdvanceFileUpload.Integration.IntegrationConstants.SessionFieldConstants.html": {
    "href": "api/AdvanceFileUpload.Integration.IntegrationConstants.SessionFieldConstants.html",
    "title": "Class IntegrationConstants.SessionFieldConstants | Advance File Uploading API",
    "keywords": "Class IntegrationConstants.SessionFieldConstants Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Constants related to the \"Session Field\" event. public sealed class IntegrationConstants.SessionFieldConstants Inheritance object IntegrationConstants.SessionFieldConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AutoDelete Indicates whether the queue is auto-deleted for the \"Session Field\" event. public const bool AutoDelete = false Field Value bool Durable Indicates whether the queue is durable for the \"Session Field\" event. public const bool Durable = true Field Value bool Exchange The exchange name for the \"Session Field\" event. public const string Exchange = \"Session-Field\" Field Value string ExchangeType The type of exchange for the \"Session Field\" event. public const string ExchangeType = \"direct\" Field Value string Exclusive Indicates whether the queue is exclusive for the \"Session Field\" event. public const bool Exclusive = false Field Value bool Queue The name of the queue for the \"Session Field\" event. public const string Queue = \"Session-Field\" Field Value string RoutingKey The routing key for the \"Session Field\" event. public const string RoutingKey = \"Session-Field\" Field Value string"
  },
  "api/AdvanceFileUpload.Integration.IntegrationConstants.SessionPausedConstants.html": {
    "href": "api/AdvanceFileUpload.Integration.IntegrationConstants.SessionPausedConstants.html",
    "title": "Class IntegrationConstants.SessionPausedConstants | Advance File Uploading API",
    "keywords": "Class IntegrationConstants.SessionPausedConstants Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Constants related to the \"Session Paused\" event. public sealed class IntegrationConstants.SessionPausedConstants Inheritance object IntegrationConstants.SessionPausedConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AutoDelete Indicates whether the queue is auto-deleted for the \"Session Paused\" event. public const bool AutoDelete = false Field Value bool Durable Indicates whether the queue is durable for the \"Session Paused\" event. public const bool Durable = true Field Value bool Exchange The exchange name for the \"Session Paused\" event. public const string Exchange = \"Session-Paused\" Field Value string ExchangeType The type of exchange for the \"Session Paused\" event. public const string ExchangeType = \"direct\" Field Value string Exclusive Indicates whether the queue is exclusive for the \"Session Paused\" event. public const bool Exclusive = false Field Value bool Queue The name of the queue for the \"Session Paused\" event. public const string Queue = \"Session-Paused\" Field Value string RoutingKey The routing key for the \"Session Paused\" event. public const string RoutingKey = \"Session-Paused\" Field Value string"
  },
  "api/AdvanceFileUpload.Integration.IntegrationConstants.SessionResumedConstants.html": {
    "href": "api/AdvanceFileUpload.Integration.IntegrationConstants.SessionResumedConstants.html",
    "title": "Class IntegrationConstants.SessionResumedConstants | Advance File Uploading API",
    "keywords": "Class IntegrationConstants.SessionResumedConstants Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Constants related to the \"Session Resumed\" event. public sealed class IntegrationConstants.SessionResumedConstants Inheritance object IntegrationConstants.SessionResumedConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AutoDelete Indicates whether the queue is auto-deleted for the \"Session Resumed\" event. public const bool AutoDelete = false Field Value bool Durable Indicates whether the queue is durable for the \"Session Resumed\" event. public const bool Durable = true Field Value bool Exchange The exchange name for the \"Session Resumed\" event. public const string Exchange = \"Session-Resumed\" Field Value string ExchangeType The type of exchange for the \"Session Resumed\" event. public const string ExchangeType = \"direct\" Field Value string Exclusive Indicates whether the queue is exclusive for the \"Session Resumed\" event. public const bool Exclusive = false Field Value bool Queue The name of the queue for the \"Session Resumed\" event. public const string Queue = \"Session-Resumed\" Field Value string RoutingKey The routing key for the \"Session Resumed\" event. public const string RoutingKey = \"Session-Resumed\" Field Value string"
  },
  "api/AdvanceFileUpload.Integration.IntegrationConstants.html": {
    "href": "api/AdvanceFileUpload.Integration.IntegrationConstants.html",
    "title": "Class IntegrationConstants | Advance File Uploading API",
    "keywords": "Class IntegrationConstants Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Contains constants used for integration purposes. public sealed class IntegrationConstants Inheritance object IntegrationConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AdvanceFileUpload.Integration.PublishMessage-1.html": {
    "href": "api/AdvanceFileUpload.Integration.PublishMessage-1.html",
    "title": "Class PublishMessage<T> | Advance File Uploading API",
    "keywords": "Class PublishMessage<T> Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Represents a message to be published to a message broker. public class PublishMessage<T> Type Parameters T The type of the message payload. Inheritance object PublishMessage<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoDelete Gets or sets a value indicating whether the queue is automatically deleted when the last consumer unsubscribes. public bool AutoDelete { get; set; } Property Value bool Durable Gets or sets a value indicating whether the queue is durable. Durable queues survive broker restarts. public bool Durable { get; set; } Property Value bool Exchange Gets or sets the name of the exchange to which the message will be published. public required string Exchange { get; set; } Property Value string ExchangeType Gets or sets the type of the exchange (e.g., direct, fanout, topic, headers). public required string ExchangeType { get; set; } Property Value string Exclusive Gets or sets a value indicating whether the queue is exclusive. Exclusive queues can only be accessed by the connection that declared them. public bool Exclusive { get; set; } Property Value bool Message Gets or sets the message payload. public required T Message { get; set; } Property Value T Queue Gets or sets the name of the queue to which the message will be published. public required string Queue { get; set; } Property Value string RoutingKey Gets or sets the routing key used to route the message. public required string RoutingKey { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.Integration.RabbitMQConsumer.html": {
    "href": "api/AdvanceFileUpload.Integration.RabbitMQConsumer.html",
    "title": "Class RabbitMQConsumer | Advance File Uploading API",
    "keywords": "Class RabbitMQConsumer Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Represents a RabbitMQ consumer for handling integration events. public class RabbitMQConsumer : IIntegrationEventConsumer, IAsyncDisposable, IDisposable Inheritance object RabbitMQConsumer Implements IIntegrationEventConsumer IAsyncDisposable IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RabbitMQConsumer(RabbitMQOptions) Initializes a new instance of the RabbitMQConsumer class. public RabbitMQConsumer(RabbitMQOptions rabbitMQOptions) Parameters rabbitMQOptions RabbitMQOptions The configuration options for RabbitMQ. Exceptions ArgumentNullException Thrown when rabbitMQOptions is null. Methods ConsumeAsync<T>(ConsumingArgs, Func<T, Task>, CancellationToken) Consumes messages from a RabbitMQ queue and processes them using the provided callback. public Task ConsumeAsync<T>(ConsumingArgs args, Func<T, Task> onMessageReceived, CancellationToken cancellationToken = default) where T : class Parameters args ConsumingArgs The arguments required for consuming the message. onMessageReceived Func<T, Task> A callback function to handle the received message. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. Type Parameters T The type of the message to consume. Dispose() Releases the unmanaged resources used by the RabbitMQConsumer and optionally releases the managed resources. public void Dispose() DisposeAsync() Asynchronously releases the unmanaged resources used by the RabbitMQConsumer and optionally releases the managed resources. public ValueTask DisposeAsync() Returns ValueTask A task that represents the asynchronous operation."
  },
  "api/AdvanceFileUpload.Integration.RabbitMQEventPublisher.html": {
    "href": "api/AdvanceFileUpload.Integration.RabbitMQEventPublisher.html",
    "title": "Class RabbitMQEventPublisher | Advance File Uploading API",
    "keywords": "Class RabbitMQEventPublisher Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll A publisher for RabbitMQ integration events, implementing the IIntegrationEventPublisher interface. public class RabbitMQEventPublisher : IIntegrationEventPublisher, IAsyncDisposable, IDisposable Inheritance object RabbitMQEventPublisher Implements IIntegrationEventPublisher IAsyncDisposable IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RabbitMQEventPublisher(IOptions<RabbitMQOptions>, ILogger<RabbitMQEventPublisher>) Initializes a new instance of the RabbitMQEventPublisher class. public RabbitMQEventPublisher(IOptions<RabbitMQOptions> rabbitMQOptions, ILogger<RabbitMQEventPublisher> logger) Parameters rabbitMQOptions IOptions<RabbitMQOptions> The RabbitMQ configuration options. logger ILogger<RabbitMQEventPublisher> The logger instance for logging events and errors. Exceptions ArgumentNullException Thrown when rabbitMQOptions is null. Methods Dispose() Disposes the resources used by the RabbitMQEventPublisher. public void Dispose() DisposeAsync() Asynchronously disposes the resources used by the RabbitMQEventPublisher. public ValueTask DisposeAsync() Returns ValueTask A ValueTask that represents the asynchronous dispose operation. PublishAsync<T>(PublishMessage<T>, CancellationToken) Publishes an integration event message asynchronously. public Task PublishAsync<T>(PublishMessage<T> message, CancellationToken cancellationToken = default) where T : class Parameters message PublishMessage<T> The message to be published, including metadata such as queue, exchange, and routing details. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous publish operation. Type Parameters T The type of the message payload. Exceptions BrokerUnreachableException Thrown when the RabbitMQ broker is unreachable. Exception Thrown when an error occurs during message publishing."
  },
  "api/AdvanceFileUpload.Integration.RabbitMQOptions.html": {
    "href": "api/AdvanceFileUpload.Integration.RabbitMQOptions.html",
    "title": "Class RabbitMQOptions | Advance File Uploading API",
    "keywords": "Class RabbitMQOptions Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Represents the configuration options for connecting to a RabbitMQ server. public class RabbitMQOptions Inheritance object RabbitMQOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SectionName The name of the configuration section for RabbitMQ options. public const string SectionName = \"RabbitMQOptions\" Field Value string Properties HostName Gets or sets the hostname of the RabbitMQ server. public required string HostName { get; set; } Property Value string Password Gets or sets the password for authenticating with the RabbitMQ server. public required string Password { get; set; } Property Value string Port Gets or sets the port number used to connect to the RabbitMQ server. public int Port { get; set; } Property Value int UseSSL Gets or sets a value indicating whether SSL should be used for the connection. public bool UseSSL { get; set; } Property Value bool UserName Gets or sets the username for authenticating with the RabbitMQ server. public required string UserName { get; set; } Property Value string VirtualHost Gets or sets the virtual host to use when connecting to the RabbitMQ server. public required string VirtualHost { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.Integration.SessionCancelledIntegrationEvent.html": {
    "href": "api/AdvanceFileUpload.Integration.SessionCancelledIntegrationEvent.html",
    "title": "Class SessionCancelledIntegrationEvent | Advance File Uploading API",
    "keywords": "Class SessionCancelledIntegrationEvent Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Event triggered when a session is cancelled. public class SessionCancelledIntegrationEvent Inheritance object SessionCancelledIntegrationEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties FileExtension Gets or sets the file extension. public string FileExtension { get; set; } Property Value string FileName Gets or sets the file name. public string FileName { get; set; } Property Value string FileSize Gets or sets the file size. public long FileSize { get; set; } Property Value long SessionEndDateTime Gets or sets the session end date and time. public DateTime? SessionEndDateTime { get; set; } Property Value DateTime? SessionId Gets or sets the session identifier. public Guid SessionId { get; set; } Property Value Guid SessionStartDateTime Gets or sets the session start date and time. public DateTime SessionStartDateTime { get; set; } Property Value DateTime Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/AdvanceFileUpload.Integration.SessionCompletedIntegrationEvent.html": {
    "href": "api/AdvanceFileUpload.Integration.SessionCompletedIntegrationEvent.html",
    "title": "Class SessionCompletedIntegrationEvent | Advance File Uploading API",
    "keywords": "Class SessionCompletedIntegrationEvent Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Event triggered when a session is completed. public class SessionCompletedIntegrationEvent Inheritance object SessionCompletedIntegrationEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties FileExtension Gets or sets the file extension. public string FileExtension { get; set; } Property Value string FileName Gets or sets the file name. public string FileName { get; set; } Property Value string FilePath Gets or sets the file path. public string FilePath { get; set; } Property Value string FileSize Gets or sets the file size. public long FileSize { get; set; } Property Value long SessionEndDateTime Gets or sets the session end date and time. public DateTime? SessionEndDateTime { get; set; } Property Value DateTime? SessionId Gets or sets the session identifier. public Guid SessionId { get; set; } Property Value Guid SessionStartDateTime Gets or sets the session start date and time. public DateTime SessionStartDateTime { get; set; } Property Value DateTime Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/AdvanceFileUpload.Integration.SessionCreatedIntegrationEvent.html": {
    "href": "api/AdvanceFileUpload.Integration.SessionCreatedIntegrationEvent.html",
    "title": "Class SessionCreatedIntegrationEvent | Advance File Uploading API",
    "keywords": "Class SessionCreatedIntegrationEvent Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Event triggered when a session is created. public class SessionCreatedIntegrationEvent Inheritance object SessionCreatedIntegrationEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties FileExtension Gets or sets the file extension. public string FileExtension { get; set; } Property Value string FileName Gets or sets the file name. public string FileName { get; set; } Property Value string FileSize Gets or sets the file size. public long FileSize { get; set; } Property Value long SessionId Gets or sets the session identifier. public Guid SessionId { get; set; } Property Value Guid SessionStartDateTime Gets or sets the session start date and time. public DateTime SessionStartDateTime { get; set; } Property Value DateTime Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/AdvanceFileUpload.Integration.SessionFieldIntegrationEvent.html": {
    "href": "api/AdvanceFileUpload.Integration.SessionFieldIntegrationEvent.html",
    "title": "Class SessionFieldIntegrationEvent | Advance File Uploading API",
    "keywords": "Class SessionFieldIntegrationEvent Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Event triggered when a session is Field. public class SessionFieldIntegrationEvent Inheritance object SessionFieldIntegrationEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FileExtension Gets or sets the file extension. public string FileExtension { get; set; } Property Value string FileName Gets or sets the file name. public string FileName { get; set; } Property Value string FileSize Gets or sets the file size. public long FileSize { get; set; } Property Value long SessionId Gets or sets the session identifier. public Guid SessionId { get; set; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Integration.SessionPausedIntegrationEvent.html": {
    "href": "api/AdvanceFileUpload.Integration.SessionPausedIntegrationEvent.html",
    "title": "Class SessionPausedIntegrationEvent | Advance File Uploading API",
    "keywords": "Class SessionPausedIntegrationEvent Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Event triggered when a session is paused. public class SessionPausedIntegrationEvent Inheritance object SessionPausedIntegrationEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties FileExtension Gets or sets the file extension. public string FileExtension { get; set; } Property Value string FileName Gets or sets the file name. public string FileName { get; set; } Property Value string FileSize Gets or sets the file size. public long FileSize { get; set; } Property Value long SessionEndDateTime Gets or sets the session end date and time. public DateTime? SessionEndDateTime { get; set; } Property Value DateTime? SessionId Gets or sets the session identifier. public Guid SessionId { get; set; } Property Value Guid SessionStartDateTime Gets or sets the session start date and time. public DateTime SessionStartDateTime { get; set; } Property Value DateTime Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/AdvanceFileUpload.Integration.SessionResumedIntegrationEvent.html": {
    "href": "api/AdvanceFileUpload.Integration.SessionResumedIntegrationEvent.html",
    "title": "Class SessionResumedIntegrationEvent | Advance File Uploading API",
    "keywords": "Class SessionResumedIntegrationEvent Namespace AdvanceFileUpload.Integration Assembly AdvanceFileUpload.Integration.dll Event triggered when a session is resumed. public class SessionResumedIntegrationEvent Inheritance object SessionResumedIntegrationEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FileExtension Gets or sets the file extension. public string FileExtension { get; set; } Property Value string FileName Gets or sets the file name. public string FileName { get; set; } Property Value string FileSize Gets or sets the file size. public long FileSize { get; set; } Property Value long SessionEndDateTime Gets or sets the session end date and time. public DateTime SessionEndDateTime { get; set; } Property Value DateTime SessionId Gets or sets the session identifier. public Guid SessionId { get; set; } Property Value Guid SessionStartDateTime Gets or sets the session start date and time. public DateTime SessionStartDateTime { get; set; } Property Value DateTime"
  },
  "api/AdvanceFileUpload.Integration.html": {
    "href": "api/AdvanceFileUpload.Integration.html",
    "title": "Namespace AdvanceFileUpload.Integration | Advance File Uploading API",
    "keywords": "Namespace AdvanceFileUpload.Integration Classes ChunkUploadedIntegrationEvent Event triggered when a chunk is uploaded. ConsumingArgs Represents the arguments required for consuming messages from a RabbitMQ queue. IntegrationConstants Contains constants used for integration purposes. IntegrationConstants.ChunkUploadedConstants Constants related to the \"Chunk Uploaded\" event. IntegrationConstants.SessionCanceledConstants Constants related to the \"Session Canceled\" event. IntegrationConstants.SessionCompletedConstants Constants related to the \"Session Completed\" event. IntegrationConstants.SessionCreatedConstants Constants related to the \"Session Created\" event. IntegrationConstants.SessionFieldConstants Constants related to the \"Session Field\" event. IntegrationConstants.SessionPausedConstants Constants related to the \"Session Paused\" event. IntegrationConstants.SessionResumedConstants Constants related to the \"Session Resumed\" event. PublishMessage<T> Represents a message to be published to a message broker. RabbitMQConsumer Represents a RabbitMQ consumer for handling integration events. RabbitMQEventPublisher A publisher for RabbitMQ integration events, implementing the IIntegrationEventPublisher interface. RabbitMQOptions Represents the configuration options for connecting to a RabbitMQ server. SessionCancelledIntegrationEvent Event triggered when a session is cancelled. SessionCompletedIntegrationEvent Event triggered when a session is completed. SessionCreatedIntegrationEvent Event triggered when a session is created. SessionFieldIntegrationEvent Event triggered when a session is Field. SessionPausedIntegrationEvent Event triggered when a session is paused. SessionResumedIntegrationEvent Event triggered when a session is resumed. Interfaces IIntegrationEventConsumer Defines a contract for consuming integration events. IIntegrationEventPublisher Defines a contract for publishing integration events to a message broker or event bus."
  },
  "docs/Architecture-Overview.html": {
    "href": "docs/Architecture-Overview.html",
    "title": "Architecture Overview | Advance File Uploading API",
    "keywords": "Architecture Overview The Advance Chunk File Upload API is built on a set of modern architectural patterns designed to ensure scalability, maintainability, and a clear separation of concerns. This document describes the high-level architecture of the system. Core Architectural Patterns The system's design is guided by the following principles: Client-Server Architecture: The system is split into two main parts: a server-side API that handles all the core logic, and a client-side SDK that simplifies integration for developers. Layered Architecture: The server application is organized into four distinct layers, each with a specific responsibility. This enforces a strict separation of concerns. Domain-Driven Design (DDD): The core business logic is modeled within a rich Domain layer, which is completely independent of infrastructure concerns like databases or APIs. The FileUploadSession is the central \"Aggregate Root\" that enforces all business rules for an upload. Event-Driven Architecture (EDA): The system uses events to communicate between different parts of the application in a decoupled manner. This is used for both internal workflows (e.g., notifying the system to merge chunks) and external integrations via RabbitMQ. Mediator Pattern: In-process communication between components is managed by the Mediator pattern (using the MediatR library), which reduces direct dependencies and keeps the application logic clean. System Components Client Tier Client SDK (AdvanceFileUpload.Client): A .NET library (distributed as a NuGet package) that abstracts the entire upload process. It handles session creation, file chunking, parallel chunk uploads, and automatic retries for failed requests using the Polly library. Developers interact with a simple IFileUploadService interface. Server Tier The server is composed of several logical layers, typically organized as separate projects within the solution. API Layer (AdvanceFileUpload.API): This is the entry point for all external communication. It exposes RESTful HTTP endpoints for actions like creating sessions, uploading chunks, and canceling uploads. It handles cross-cutting concerns like authentication (API Key validation), rate limiting, and global exception handling. It hosts a SignalR hub for real-time progress notifications. Application Layer (AdvanceFileUpload.Application): This layer orchestrates the business workflows or \"use cases.\" It contains services like UploadManager that receive requests from the API layer. It does not contain business logic itself but directs the Domain layer entities to perform actions and coordinates with the Data layer to persist results. It contains handlers for domain events. Domain Layer (AdvanceFileUpload.Domain): The heart of the system. It contains all the business logic, rules, and state. Key entities include FileUploadSession and ChunkFile. It is completely isolated from infrastructure. It has no dependencies on databases, file systems, or network protocols. It raises domain events (e.g., ChunkUploadedEvent, FileUploadSessionCompletedEvent) to signal state changes. Data Layer (AdvanceFileUpload.Data): This layer is responsible for all data persistence. It implements the IRepository<T> interface defined in the Domain layer. It uses Entity Framework Core to communicate with the SQL Server database, mapping domain entities to database tables. This layer isolates the rest of the application from the specific database technology being used."
  },
  "docs/Configuration-Settings.html": {
    "href": "docs/Configuration-Settings.html",
    "title": "Configuration Settings | Advance File Uploading API",
    "keywords": "Configuration Settings The Advance Chunk File Upload API is configured primarily through the appsettings.json file. This document explains the available settings and how they affect the application's behavior. UploadSetting (Required) This section controls the core file upload parameters. Key Type Description Default AllowedExtensions string[] An array of allowed file extensions (e.g., \".jpg\", \".pdf\"). N/A MaxFileSize long The maximum allowed size for a single file, in bytes. 1000000000 (1 GB) MaxChunkSize long The size of each chunk for uploads, in bytes. 2097152 (2 MB) SavingDirectory string The absolute path to the directory where completed files are stored. N/A TempDirectory string The absolute path to the directory where temporary chunks are stored during upload. N/A EnableCompression bool If true, allows clients to request file compression before uploading. true EnableIntegrationEventPublishing bool If true, the server will publish events (e.g., SessionCompleted) to a RabbitMQ message bus. true Example: \"UploadSetting\": { \"AllowedExtensions\": [ \".jpg\", \".png\", \".pdf\", \".mp4\" ], \"MaxFileSize\": 1073741824, \"MaxChunkSize\": 2097152, \"SavingDirectory\": \"D:\\\\\\\\Temp\\\\\\\\Savedir\", \"TempDirectory\": \"D:\\\\\\\\Temp\\\\\\\\T\", \"EnableCompression\": true, \"EnableIntegrationEventPublishing\": true } APIKeyOptions (Required) This section manages client authentication and rate limiting. Key Type Description Default EnableAPIKeyAuthentication bool If true, all API requests must include a valid X-APIKEY header. true EnableRateLimiting bool If true, requests are throttled based on the RateLimit settings for each API key. true DefaultMaxRequestsPerMinute int The rate limit applied to clients with a valid key that does not have a specific RateLimit defined. 1000 ApiKeys APIKey[] An array of client API key configurations. [] APIKey Object Key Type Description ClientId string A friendly name to identify the client. Key string The secret API key string. RateLimit object An object defining the rate limit for this specific key. Contains RequestsPerMinute (int). Example: \"APIKeyOptions\": { \"EnableAPIKeyAuthentication\": true, \"EnableRateLimiting\": true, \"DefaultMaxRequestsPerMinute\": 1000, \"ApiKeys\": [ { \"ClientId\": \"ClientA\", \"Key\": \"secret-key-for-client-a\", \"RateLimit\": { \"RequestsPerMinute\": 2000 } } ] } ConnectionStrings (Required) This section contains the database connection strings. Key Description SessionStorage The connection string for the SQL Server database used to store upload session data. RabbitMQOptions (Optional) This section is used to configure the connection to the RabbitMQ message broker. Key Type Description Default HostName string The hostname of the RabbitMQ server. localhost UserName string The username for connecting to RabbitMQ. guest Password string The password for connecting to RabbitMQ. guest Port int The port number for the RabbitMQ server. 5672 Kestrel Server Configuration (Required) Configure Kestrel Server settings in the appsettings.json file under the KestrelConfiguration section. Example: { \"KestrelConfiguration\": { \"Endpoints\": { \"PublicHttp\": { \"Ip\": \"Your server IP\", \"Port\": 5003, \"Https\": false, // true or false. If true, the endpoint will use HTTPS. \"Protocols\": [ \"Http1\", \"Http2\" ], // Options include \"Http1\", \"Http2\" \"Http3\". \"SslProtocols\": [ \"Default\"], \"Certificate\": { \"Subject\": \"CN=localhosttest\", \"Store\": \"Root\", \"Location\": \"LocalMachine\" // \"LocalMachine\" or \"CurrentUser\". } } } }, \"Limits\": { \"KeepAliveTimeout\": \"00:02:00\", // 5m \"RequestHeadersTimeout\": \"00:02:00\", // 3m \"MaxConcurrentConnections\": 10000, \"MaxConcurrentUpgradedConnections\": 500, //100, \"MaxRequestBodySize\": 30000000, // 28.6MB \"MinRequestBodyDataRate\": null, // 240byte/MinRequestBodyDataRatePeriod \"MinRequestBodyDataRatePeriod\": \"00:00:15\", // 15s \"MinResponseDataRate\": null, // 240byte/ MinResponseDataRatePeriod \"MinResponseDataRatePeriod\": \"00:00:15\", \"MaxRequestLineSize\": 81234543, //8192, // 8KB \"MaxRequestBufferSize\": null, //1048576, // 1MB \"MaxResponseBufferSize\": null, // 65536, // 64KB \"MaxRequestHeadersTotalSize\": 32768, // 32KB \"MaxRequestHeadersCount\": 100, // 100 headers \"AllowSynchronousIO\": false }, \"Https\": { \"CheckCertificateRevocation\": true, \"ClientCertificateMode\": \"AllowCertificate\", // Options include \"NoCertificate\", \"AllowCertificate\", and \"RequireCertificate\". \"AllowedProtocols\": [ \"Default\", \"Tls12\", \"Tls13\", \"Ssl2\" ] // \"None\", \"Ssl2\", \"Ssl3\", \"Tls\",\"Default\",\"Tls11\",\"Tls12\", \"Tls13\" }, \"Http2\": { \"MaxStreamsPerConnection\": 100, \"HeaderTableSize\": 4096, // 4KIB \"MaxFrameSize\": 16384 // 16KIB Min:16384 Max: 16777215 }, \"Http3\": { \"Enable\": false } } See Kestrel Configuration For More information."
  },
  "docs/FileUpload-Lifecycle.html": {
    "href": "docs/FileUpload-Lifecycle.html",
    "title": "File Upload Lifecycle | Advance File Uploading API",
    "keywords": "File Upload Lifecycle This article provides a detailed sequence diagram illustrating the interactions between the system's components during a large file upload. The diagram shows the flow of control from the client SDK to the server's internal services. File Upload Sequence Diagram Explanation of the Diagram Initiation: The process starts when a developer calls UploadFileAsync on the Client SDK. Session Creation: The SDK sends a POST request to the /api/upload/create-session endpoint on the API Server. The server's UploadManager service handles this request. It creates a new FileUploadSession domain aggregate, which represents the state of the upload. The server responds with a unique SessionId and the configured MaxChunkSize. Chunking: The SDK uses the MaxChunkSize to split the local file into multiple parts. Parallel Chunk Upload Loop: The SDK iterates through the chunks and uploads them in parallel. For each chunk, it sends a POST request to /api/upload/upload-chunk. The UploadManager calls the FileProcessor to save the chunk's data to a temporary file. It then updates the FileUploadSession aggregate by calling the AddChunk method. The FileUploadSession raises a ChunkUploadedEvent. The Event Publisher (via MediatR) dispatches this event. An event handler for ChunkUploadedEvent triggers a real-time progress update back to the client via a SignalR hub. Completion Request: After all chunks are successfully uploaded, the SDK sends a final POST request to /api/upload/complete-session. The UploadManager finds the corresponding session and calls its CompleteSession() method. Merging and Cleanup: Calling CompleteSession() raises a FileUploadSessionCompletedEvent. A dedicated event handler listens for this event and invokes the FileProcessor to perform the MergeChunksAsync operation. The FileProcessor reads all the temporary chunk files, concatenates them into the final file, and then deletes the temporary files. Final Acknowledgement: The server returns a success status to the SDK, which in turn signals completion to the developer's code."
  },
  "docs/Frequently-Asked-Questions.html": {
    "href": "docs/Frequently-Asked-Questions.html",
    "title": "| Advance File Uploading API",
    "keywords": "Frequently Asked Questions (FAQ) Q: What happens if the network connection drops during an upload? A: The system is designed to be resilient to network interruptions. The client SDK uses a retry policy (powered by Polly) to automatically re-attempt sending a failed chunk a configurable number of times. If the connection is lost for an extended period, the upload will be paused. When the connection is restored, you can call the ResumeUploadAsync() method. The SDK will then query the server to find out which chunks are missing and will only upload those, continuing from where it left off. You do not need to restart the entire file upload. Q: How does the resumable upload feature work? A: Resumability is managed through stateful sessions on the server. When an upload starts, the server creates a FileUploadSession in its database, identified by a unique SessionId. As each chunk is successfully uploaded, the server records it against that session. When you call ResumeUploadAsync(), the client SDK asks the server for the status of that SessionId. The server checks its records and sends back a list of the chunk indexes that it has not yet received. The SDK then proceeds to upload only those missing chunks. Q: What happens if a chunk fails to upload? A: You can retry uploading the same chunk. The session keeps track of uploaded chunks. Q: Can I upload multiple files at the same time? A: Yes, but you must create a separate instance of the IFileUploadService for each concurrent upload. A single service instance is designed to manage the lifecycle of a single file upload. To upload multiple files simultaneously, you would create and manage multiple FileUploadService objects, for example: var uploadTask1 = StartUploadForFile(\"path/to/file1.zip\"); var uploadTask2 = StartUploadForFile(\"path/to/file2.zip\"); await Task.WhenAll(uploadTask1, uploadTask2); async Task StartUploadForFile(string filePath) { // Each upload gets its own service instance IFileUploadService uploader = FileUploadBuilder.New(...).Build(); try { await uploader.UploadFileAsync(filePath); } } Q: What file types should not be compressed? A: You should avoid compressing files that are already in a compressed format. Attempting to re-compress these files provides little to no size reduction and wastes CPU resources on both the client and the server. The client SDK is pre-configured to automatically skip compression for many of these file types. Examples of file types that should not be compressed include: Archives: .zip, .rar, .7z, .gz Images: .jpg, .jpeg, .png, .gif Videos: .mp4, .mov, .mkv Audio: .mp3, .aac Documents: .pdf, .docx, .pptx Q: How do I monitor the progress of an upload? A: The best way to monitor progress is by subscribing to the UploadProgressChanged event on your IFileUploadService instance. The server uses SignalR to push real-time updates to the client as chunks are received, so this event will fire frequently during an active upload. fileUploadService.UploadProgressChanged += (sender, args) => { // Update your UI here, e.g., a progress bar myProgressBar.Value = args.ProgressPercentage; Console.WriteLine($\"Progress: {args.ProgressPercentage:F2}%\"); }; Q: How does the server clean up abandoned or failed uploads? A: The API includes a background service (SessionStatusCheckerWorker) that runs periodically (e.g., once every 24 hours). This service queries the database for sessions that have been in an InProgress or Paused state for an extended period (e.g., more than 48 hours). It marks these abandoned sessions as Failed and triggers a cleanup process to delete any associated temporary chunk files from the disk, preventing orphaned files from consuming storage space. Q: How can I customize the chunk size? A: The chunk size is a server-side configuration and cannot be set by the client. This design choice ensures that the server has control over its resource allocation (like memory and temporary storage) and can enforce policies consistently for all clients. An administrator can change the MaxChunkSize value in the appsettings.json file on the server. A smaller chunk size (e.g., 1-2 MB) can improve reliability on very unstable networks, as less data needs to be re-transmitted on failure. A larger chunk size (e.g., 5-10 MB) can be more efficient on stable, high-speed networks by reducing the overhead of numerous HTTP requests. Q: What compression algorithms are supported? A: The API supports GZip, Brotli, and Deflate. You can specify your desired algorithm and compression level (e.g., Fastest or Optimal) when configuring the FileUploadService using the client SDK's WithCompressionOption() method. Q: Can I upload chunks out of order? A: Yes. The system is designed to handle chunks arriving in any order. Each chunk upload request includes a specific index number (e.g., chunk 5 of 100). The server uses this index to correctly reassemble the file in the final step, regardless of the upload sequence. This allows the client SDK to upload chunks in parallel without waiting for the previous one to complete. Q: What if a session remains incomplete for a long time? A: Sessions that are inactive for over 48 hours are automatically marked as failed by a background service. Q: Is there a size limit on files? A: There is no hard-coded limit in the API itself, but the practical maximum file size is determined by the MaxFileSize setting in the server's appsettings.json file. By default, this is set to 1 GB, but an administrator can increase it. The ultimate limit is also constrained by the available disk space on the server for storing the final merged file. Q: How is data integrity ensured? A: Currently, data integrity is ensured by tracking the successful reception of all chunks. The server verifies that it has received the correct number of chunks before it will allow a session to be completed. For future enhancements, a more robust mechanism involving checksums (e.g., SHA-256) for each chunk and for the complete file is planned. This would allow the server to verify that the transmitted data has not been corrupted in transit. Q: Can I restart a failed session from the beginning? A: You cannot \"restart\" a session that has been marked as Failed . However, you can simply start a new upload for the same file. This will create a completely new session with a new SessionId`. The old, failed session will eventually be cleaned up by the server's background service. Q: Is HTTPS required for uploading? A: While not strictly required and the API can function over HTTP, using HTTPS is strongly recommended for all production environments. Without HTTPS, your file data and API key are transmitted in plaintext over the network, making them vulnerable to interception. The server can and should be configured to enforce HTTPS on its endpoints for secure communication. Q: Can I upload from a mobile or low-bandwidth device? A: Yes. Chunking and resumable uploads are designed to tolerate unstable or low-bandwidth connections. Q: What happens if two clients try to upload to the same session? A: Simultaneous uploads are supported as long as chunk indices are coordinated correctly. Otherwise, the server may reject duplicates. Q: How are files stored on disk? A: During an upload, each chunk is stored as a small, separate temporary file in the TempDirectory specified in the server configuration. Once the upload is complete and finalized, the server reads these temporary files in the correct order and merges them into a single, complete file, which is then saved to the final SavingDirectory. The temporary chunk files are deleted immediately after the merge is successful."
  },
  "docs/Hosting-as-a-Windows-Service.html": {
    "href": "docs/Hosting-as-a-Windows-Service.html",
    "title": "Hosting as a Windows Service | Advance File Uploading API",
    "keywords": "Hosting as a Windows Service The Advance Chunk File Upload API is pre-configured to be deployed and run as a background Windows Service, which is the recommended approach for production environments on Windows Server. This ensures the API starts automatically with the server and runs continuously without a user session. 1. Publishing the Application First, you need to publish the application as a self-contained executable for Windows. Open a terminal or command prompt in the root directory of the AdvanceFileUpload.API project. Run the following dotnet publish command: dotnet publish -c Release -r win-x64 --self-contained true -c Release: Builds the project in Release mode for production optimization. -r win-x64: Specifies the target runtime as Windows 64-bit. --self-contained true: Packages the .NET runtime with the application, so it doesn't need to be installed on the server. The output will be located in the bin\\Release\\net8.0\\win-x64\\publish directory. Copy the entire contents of this publish folder to your production server (e.g., C:\\apps\\FileUploadAPI). 2. Creating the Windows Service You will use the built-in sc.exe (Service Control) command-line tool on the production server to create the service. Open Command Prompt or PowerShell as an Administrator. Run the sc create command. You must provide a service name and the full path to the published executable. sc.exe create \"AdvanceFileUploadAPI\" binPath=\"C:\\apps\\FileUploadAPI\\AdvanceFileUpload.API.exe\" Replace \"AdvanceFileUploadAPI\" with your desired service name. Replace the binPath with the correct path to the executable on your server. Important: Note the space after binPath=. It is required by sc.exe. If the command is successful, you will see [SC] CreateService SUCCESS. 3. Configuring and Starting the Service Once the service is created, you can configure its properties and start it. Set Startup Type (Optional but Recommended): Configure the service to start automatically when the server boots. sc.exe config \"AdvanceFileUploadAPI\" start=auto Set a Description (Optional): Add a helpful description that will appear in the Services management console. sc.exe description \"AdvanceFileUploadAPI\" \"Handles large, resumable file uploads for company applications.\" Start the Service: sc.exe start \"AdvanceFileUploadAPI\" You can also manage the service (start, stop, restart) through the graphical Services management console (services.msc). 4. Logging and Monitoring For production use, it's crucial to monitor the service's health and logs. Windows Event Log: The application is configured with Serilog to write logs directly to the Windows Event Log. Open the Event Viewer (eventvwr.msc). Navigate to Windows Logs > Application. Look for events with the Source set to AdvanceFileUploadAPI. This is where all application logs, including informational messages, warnings, and errors, will be recorded. Health Check Endpoint: The API exposes a health check endpoint at /health. You can use monitoring tools to periodically ping this endpoint to ensure the service is running and responsive."
  },
  "docs/How-to-Use-the-Client-SDK.html": {
    "href": "docs/How-to-Use-the-Client-SDK.html",
    "title": "How to Use the Client SDK | Advance File Uploading API",
    "keywords": "How to Use the Client SDK The AdvanceFileUpload.Client SDK is a .NET library designed to dramatically simplify the process of interacting with the Advance Chunk File Upload API. It abstracts away the complexities of HTTP requests, session management, file chunking, parallel uploads, and error handling, allowing you to integrate robust file upload capabilities into your application with just a few lines of code. This guide will walk you through installing the SDK, configuring the service, performing uploads, and handling events. 1. Installation To use the SDK, you first need to add it to your .NET project. Add a Project Reference: If you have the source code, the easiest way is to add a direct project reference from your application (e.g., a Console App, WPF, or ASP.NET project) to the AdvanceFileUpload.Client project within the solution. Add from NuGet (Future): Once published, you would install it via the NuGet Package Manager: Install-Package AdvanceFileUpload.Client 2. Configuration with FileUploadBuilder The FileUploadBuilder class provides a fluent and intuitive interface for configuring the FileUploadService. This pattern makes the setup process clean, readable, and less error-prone. The builder is initiated with the API's base URL and your authentication key. using AdvanceFileUpload.Client; // Start building the service with the required URL and API key IFileUploadService fileUploadService = FileUploadBuilder .New(\"http://localhost:5124\", \"your-super-secret-api-key\") // ... chain additional configuration methods here ... .Build(); Configuration Options You can chain the following methods to customize the service's behavior: WithMaxConcurrentUploads(int count): Sets the number of chunks to upload in parallel. Increasing this can significantly improve upload speed, especially on high-latency networks. The default is 4. .WithMaxConcurrentUploads(8) WithMaxRetriesCount(int count): Configures the number of times the SDK will automatically retry a failed chunk upload. This is essential for resilience over unstable connections. The default is 3. .WithMaxRetriesCount(5) WithCompressionOption(CompressionOption option): Enables file compression to reduce bandwidth usage and transfer time. The API will not compress already-compressed file types (like .zip or .jpg). .WithCompressionOption(new CompressionOption { Algorithm = CompressionAlgorithmOption.GZip, Level = CompressionLevelOption.Fastest }); WithTempDirectory(string path): Specifies a custom directory for storing temporary files (like compressed versions or chunks) during the upload process. The default is the system's temporary path. .WithTempDirectory(\"C:\\\\\\\\MyApp\\\\\\\\TempUploads\") WithRequestTimeOut(TimeSpan timeout): Sets the timeout for individual HTTP requests for uploading chunks. The default is 30 seconds. .WithRequestTimeOut(TimeSpan.FromSeconds(60)) 3. Performing an Upload Once the FileUploadService is built, you can start an upload by calling UploadFileAsync with the path to the file. It's crucial to wrap the call in a try-catch-finally block to handle potential UploadException errors and to ensure the service is disposed of correctly, which cleans up any temporary files. try { string filePath = @\"C:\\\\path\\\\to\\\\your\\\\large-video.mp4\"; await fileUploadService.UploadFileAsync(filePath); Console.WriteLine(\"Upload process initiated successfully.\"); } catch (UploadException ex) { Console.WriteLine($\"Upload failed: {ex.Message}\"); } 4. Handling Events The SDK provides a rich set of events to monitor every stage of the upload lifecycle. Subscribing to these events is the best way to provide real-time feedback to users or to log the process. Key Events: UploadProgressChanged: Fires frequently with real-time progress updates, including percentage, status, and remaining chunks. Ideal for updating a progress bar. SessionCreated: Fires after the server has successfully created an upload session. ChunkUploaded: Fires every time a single chunk is successfully uploaded. SessionCompleted: Fires once the file is fully uploaded, merged, and saved on the server. UploadError: Fires when a non-recoverable error occurs. SessionPaused / SessionResumed: Fires when the upload is paused or resumed. SessionCanceled: Fires when the upload is successfully canceled. Example of Subscribing to Events: // Subscribe before calling UploadFileAsync fileUploadService.UploadProgressChanged += (sender, args) => { Console.WriteLine($\"Progress: {args.ProgressPercentage:F2}% | Status: {args.UploadStatus}\"); }; fileUploadService.SessionCompleted += (sender, args) => { Console.WriteLine($\"File '{args.FileName}' uploaded successfully\\! Session ID: {args.SessionId}\"); // Disposing the service is critical to clean up temporary files. fileUploadService.Dispose(); }; fileUploadService.UploadError += (sender, errorMessage) => { Console.WriteLine($\"An error occurred during upload: {errorMessage}\"); }; 5. Controlling the Upload (Pause, Resume, Cancel) The SDK provides methods to control an in-progress upload. You can use the service's state properties (e.g., CanPauseSession) to enable or disable UI controls accordingly. PauseUploadAsync(): Halts the upload. The connection remains open, and the session is preserved on the server. ResumeUploadAsync(): Resumes a paused upload. The SDK will automatically determine which chunks are missing and upload only those. CancelUploadAsync(): Aborts the upload and instructs the server to delete any temporary data. Example Implementation: // In a UI event handler for a \"Pause\" button if (fileUploadService.CanPauseSession) { await fileUploadService.PauseUploadAsync(); } // In a UI event handler for a \"Resume\" button if (fileUploadService.CanResumeSession) { await fileUploadService.ResumeUploadAsync(); } // In a UI event handler for a \"Cancel\" button if (fileUploadService.CanCancelSession) { await fileUploadService.CancelUploadAsync(); } Warning Service instances are single-use - if you want to upload multiple files in parallel, you need to create a new instance of the FileUploadService for each file."
  },
  "docs/Prerequisites.html": {
    "href": "docs/Prerequisites.html",
    "title": "Prerequisites | Advance File Uploading API",
    "keywords": "Prerequisites Before you begin the installation and setup process, ensure your development and deployment environments meet the following requirements. A proper setup is crucial for both the stability of the API and a smooth development experience. Software Requirements .NET 8 SDK: The API is built entirely on the .NET 8 platform. The SDK is essential as it provides the necessary runtime, libraries, and command-line tools to build, test, and run the project. IDE: A .NET-compatible Integrated Development Environment (IDE) is highly recommended for an efficient workflow. An IDE provides critical features like code completion, debugging tools, and integrated project management. Options include: Visual Studio 2022 (Recommended) JetBrains Rider Visual Studio Code with the C# Dev Kit extension Database: A running instance of SQL Server. The system relies on a database to persist the state of all upload sessions. This is the backbone of the resumable upload functionality, as it tracks metadata for each session, including which chunks have been successfully received. This stateful approach ensures that uploads can survive network interruptions and be resumed later. Message Broker: A running instance of RabbitMQ. This is only required if you enable the optional integration event publishing feature (EnableIntegrationEventPublishing in appsettings.json). When enabled, the API can publish messages to RabbitMQ upon events like upload completion, allowing other microservices (e.g., a video transcoder or a security scanner) to react to new files asynchronously. Git: A version control client like Git is needed to clone the source code repository from GitHub. System Requirements Operating System: Development: The project can be developed on Windows, macOS, or Linux, thanks to the cross-platform nature of .NET. Deployment: The project is pre-configured to run as a Windows Service. This is the recommended deployment model for production on a Windows Server, as it allows the API to start automatically on boot and run continuously in the background without requiring an active user session. Alternatively, the application can be containerized using Docker for deployment on Linux or in a cloud-native environment. Hardware: Minimum: 2 CPU cores, 4 GB RAM. Recommended: 4+ CPU cores, 8+ GB RAM. Note Handling concurrent file uploads is resource-intensive. The recommended hardware ensures the server can manage the significant network and disk I/O from receiving and storing multiple chunks simultaneously, as well as the CPU load from file merging and optional compression, ensuring responsive performance under production load. Network: A stable network connection is paramount. The server hosting the API must have firewall rules configured to allow inbound traffic on the necessary ports. HTTP/HTTPS (e.g., 5124, 443): For the main API communication. RabbitMQ (e.g., 5672): For the message broker, if used."
  },
  "docs/Server-Installation-and-Setup.html": {
    "href": "docs/Server-Installation-and-Setup.html",
    "title": "Server Installation and Setup | Advance File Uploading API",
    "keywords": "Server Installation and Setup This guide provides detailed, step-by-step instructions for downloading the source code, configuring the necessary settings, and running the Advance Chunk File Upload API server. It also includes a comprehensive example of how to integrate and use the client SDK to perform your first file upload. 1. Download the Source Code First, you need to obtain the complete source code from the official GitHub repository. This repository contains all the necessary projects, including the API server, the client SDK library, and sample applications. Clone the repository using Git: git clone https://github.com/mohanad-cs/AdvanceFileUpload.git cd AdvanceFileUpload 2. Configure the Server The server's behavior is primarily controlled by the appsettings.json file, located in the AdvanceFileUpload.API project. This file allows you to tailor the API to your specific environment without modifying the source code. Open appsettings.json: Navigate to the AdvanceFileUpload.API/ directory and open the appsettings.json file in a text editor. Configure Connection String: Important Update the SessionStorage connection string to point to your SQL Server instance. This database is critical for the system's operation, as it stores and tracks the state of every upload session, including which chunks have been received, enabling the core pause and resume functionality. \"ConnectionStrings\": { \"SessionStorage\": \"Server=YOUR_SERVER_INSTANCE;Database=SessionStorageDb;TrustServerCertificate=true;TrustedConnection=True;\" } Configure File Paths: Important You must define two important directory paths. Ensure that these directory locations exist and that the account running the API service has full read/write permissions to them. SavingDirectory: The final destination for fully assembled files after a successful upload. TempDirectory: A working directory for storing temporary chunks during the upload process. These chunks are automatically deleted after the upload is completed or canceled. \"UploadSetting\": { \"SavingDirectory\": \"D:\\\\\\\\Path\\\\\\\\To\\\\\\\\SavedFiles\", \"TempDirectory\": \"D:\\\\\\\\Path\\\\\\\\To\\\\\\\\TempChunks\" } Configure API Keys: Add one or more API keys that client applications will use to authenticate with the API. This is a security measure to ensure that only authorized clients can upload files. Each key can also be assigned a unique rate limit. \"APIKeyOptions\": { \"ApiKeys\": [ { \"ClientId\": \"MyWebApp\", \"Key\": \"your-super-secret-api-key\", \"RateLimit\": { \"RequestsPerMinute\": 2000 } } ] } Tip For more setting Configuration details see Configuration Setting Article 3. Run the API Server Once configured, you can launch the server from the root of the AdvanceFileUpload.API project. On its first run, Entity Framework Core migrations will automatically execute, creating the necessary database schema (FileUploadSessions and ChunkFiles tables) if it doesn't already exist. cd AdvanceFileUpload.API dotnet run You should see console output indicating that the Kestrel server has started and is now listening for requests, by default at http://localhost:5124. 4. Using the Client SDK The AdvanceFileUpload.Client library provides the easiest and most reliable way to interact with the API. Add the Client Library: In your client application project (e.g., a Console App, WPF, or ASP.NET Core app), add a project reference to the AdvanceFileUpload.Client project. Initiate an Upload: Use the FileUploadBuilder class, which provides a fluent interface to easily configure the service and start an upload. using AdvanceFileUpload.Client; using AdvanceFileUpload.Application.Request; // Required for CompressionOption // 1\\. Configure the service using the fluent builder. // This pattern makes configuration readable and less prone to errors. IFileUploadService fileUploadService = FileUploadBuilder .New(\"API Address\", \"your-super-secret-api-key\") // Set the API URL and your secret key .WithMaxConcurrentUploads(8) // Boosts performance by uploading 8 chunks at once .WithMaxRetriesCount(5) // Enhances reliability by retrying failed chunks 5 times .WithCompressionOption(new CompressionOption // Reduces bandwidth usage { Algorithm = CompressionAlgorithmOption.GZip, Level = CompressionLevelOption.Fastest }) .Build(); // 2\\. Subscribe to events for real-time feedback and robust error handling. fileUploadService.UploadProgressChanged += (s, e) => { Console.WriteLine($\"Progress: {e.ProgressPercentage:F2}% | Status: {e.UploadStatus}\"); }; fileUploadService.SessionCompleted += (s, e) => { Console.WriteLine($\"Upload completed Session ID: {e.SessionId}\"); }; fileUploadService.UploadError += (s, e) => { Console.WriteLine($\"An error occurred: {e}\"); }; try { // 3\\. Start the upload process. string filePath = @\"C:\\\\path\\\\to\\\\your\\\\large-file.zip\"; await fileUploadService.UploadFileAsync(filePath); } catch (UploadException ex) { // Catch specific exceptions from the upload service. Console.WriteLine($\"Upload failed: {ex.Message}\"); } finally { // 4\\. Always dispose the service to clean up resources, // including any temporary files created during the process. fileUploadService.Dispose(); }"
  },
  "docs/Understanding-the-FileUpload-Process.html": {
    "href": "docs/Understanding-the-FileUpload-Process.html",
    "title": "Understanding the File Upload Process | Advance File Uploading API",
    "keywords": "Understanding the File Upload Process This document explains the end-to-end lifecycle of a file upload within the system, from the initial client request to the final file assembly on the server. The process is a coordinated effort between the client SDK and the server-side API, involving session management, chunking, and merging. File Upload Lifecycle Initiation (Client SDK) A developer using the client SDK calls fileUploadService.UploadFileAsync(\"path/to/file\"). If compression is enabled and applicable, the SDK first compresses the file into a temporary location. Session Creation The client SDK sends a request to the server's /api/upload/create-session endpoint. The request payload includes metadata like the original filename, file size, and (if applicable) compressed file size. The server's UploadManager validates the request (e.g., checks file size and extension against configured limits). If valid, a new FileUploadSession entity is created in the database with a status of InProgress. The server responds with a unique SessionId and the configured MaxChunkSize. File Chunking (Client SDK) Using the MaxChunkSize from the server, the client SDK reads the source file (or the compressed temporary file) and splits it into smaller, sequentially numbered chunks. Chunk Upload The client SDK begins uploading the chunks to the server in parallel, up to the configured MaxConcurrentUploads limit. Each chunk is sent as a separate POST request to the /api/upload/upload-chunk endpoint. The payload includes the SessionId, the chunk's index, and the binary data of the chunk. For each request, the server's UploadManager validates the chunk. The binary data is saved as a temporary file on the server (e.g., {SessionId}_{ChunkIndex}.chunk). The FileUploadSession entity is updated to record that the chunk has been received. A ChunkUploadedEvent is raised, triggering a real-time progress update to be sent to the client via SignalR. Resumability and Retries If a chunk upload fails due to a network error, the client SDK's Polly retry policy will automatically re-send the chunk after a short delay. If the entire upload process is interrupted (e.g., browser closed), the user can call ResumeUploadAsync. The SDK will query the server for the session status, determine which chunks are missing, and upload only those. Finalization Once the client SDK has successfully uploaded all chunks, it sends a final request to the /api/upload/complete-session endpoint with the SessionId. The server's UploadManager verifies that all expected chunks for the session have been received. The FileUploadSession's status is updated to Completed. A FileUploadSessionCompletedEvent is raised. File Merging and Cleanup The FileUploadSessionCompletedEvent triggers a handler that begins the final assembly process. The FileProcessor reads all the temporary chunk files from disk in the correct order. It concatenates them into a single, final file in the configured SavingDirectory. If the file was compressed, it is decompressed after merging. Once the final file is successfully created, all the temporary chunk files for the session are deleted. Completion Notification An optional SessionCompletedIntegrationEvent can be published to a RabbitMQ message bus, notifying external systems that a new file is ready for processing. Upload Session State Transitions The FileUploadSession is managed by a state machine that governs its lifecycle. Understanding these states is key to understanding how the API handles different scenarios like pausing, resuming, and failures. InProgress: This is the default state after a session is created. In this state, the server is actively accepting chunk uploads from the client. Paused: The client can explicitly move the session to this state by calling PauseUploadAsync(). No chunks will be accepted, but the session's temporary data is preserved on the server, ready to be resumed. PendingToComplete: The session automatically transitions to this state once the server has received the final expected chunk. It signifies that the server is now waiting for the client to send the final complete-session request to finalize the file. Completed: A terminal state indicating that the client has confirmed completion, and the server has successfully merged all chunks into the final file. The temporary data has been cleaned up. Canceled: A terminal state reached when the client explicitly cancels the upload. All temporary chunk files associated with the session are deleted. Failed: A terminal state indicating that the upload could not be completed. This can happen if the session is abandoned for an extended period (e.g., > 48 hours) and is cleaned up by a background service, or if an unrecoverable error occurs during the merging process."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Advance File Uploading API",
    "keywords": "Introduction Welcome to the developer documentation for the Advance Chunk File Upload API. This document provides a high-level overview of the project, its purpose, core functionality, and intended audience. What is the Advance Chunk File Upload API? The Advance Chunk File Upload API is a robust, backend solution designed to handle large file uploads efficiently and reliably. It addresses the common challenges of traditional file transfer methods, such as network interruptions, server timeouts, and bandwidth limitations. Built with .NET 8, the system provides a modern, scalable, and cross-platform compatible API that can be integrated into a wide range of web applications. Core Functionality The API is built around several key features that ensure a resilient and user-friendly upload experience: Chunking: Large files are broken down into smaller, manageable chunks. If an upload fails, only the failed chunk needs to be re-sent, not the entire file. Resumable Uploads: Uploads can be paused and resumed at any time, even after network disconnections or browser closures. The system maintains the state of each upload session, allowing clients to continue from where they left off. Optional Compression: To save bandwidth and reduce transfer times, the API supports optional file compression using algorithms like GZip, Deflate, and Brotli. Event-Driven Architecture: The system uses an event-driven model to decouple components and allow for real-time integration with external services (e.g., notifying a processing service upon upload completion). Real-Time Progress Tracking: Clients can receive real-time progress updates via SignalR, enabling a transparent and engaging user experience. Intended Audience This documentation is intended for software developers and DevOps engineers who need to integrate a powerful file upload system into their applications. The API is designed to be developer-friendly, with a client SDK that abstracts away the complexities of the upload lifecycle."
  },
  "index.html": {
    "href": "index.html",
    "title": "Advanced File Upload API | Advance File Uploading API",
    "keywords": "Advanced File Upload API Welcome to the Advanced Chunk File Upload API Documentation Efficient, Reliable, and Scalable Large File Upload Handling for Modern Applications \uD83D\uDE80 What is the Advanced Chunk File Upload API? The Advanced Chunk File Upload API is a powerful and extensible backend service designed to simplify the process of uploading large files in distributed systems. Built with fault tolerance, resumability, and real-time progress tracking in mind, it helps you overcome limitations of traditional file uploads. Whether you're building a cloud storage platform, video sharing service, backup tool, or enterprise-grade file management system—this API gives you the performance, flexibility, and reliability you need. \uD83E\uDDF0 Core Features Chunked Uploads: Upload files in multiple smaller parts Parallel Processing: Supports configurable parallelism for faster chunk processing. Resumable Sessions: Resume uploads after network interruptions Compression Support: Built-in support for GZip, Brotli, and Deflate Pause / Resume: Allows pausing and resuming uploads for better user control Progress Tracking: Monitor real-time upload progress via session state Windows Service Deployment: Run reliably as a background Windows service Integration Supports: Supporting Integration with other systems via RabbitMQ. \uD83D\uDC68‍\uD83D\uDCBB Who Should Use This? This API is ideal for: Backend developers building upload workflows DevOps engineers deploying file infrastructure Teams migrating legacy upload functionality to modern, scalable solutions \uD83D\uDCDA Get Started To help you onboard quickly, our documentation includes: ✅ Introduction ⚙️ Server Setup Instructions \uD83D\uDD27 Configuration Options ✅ How to use Client SDK \uD83C\uDFD7 Architecture Overview \uD83E\uDDEA Troubleshooting & FAQ \uD83D\uDCC8 Upload Lifecycle \uD83D\uDDA5 Hosting as Windows Service \uD83C\uDFD7 API Reference Jump into the docs or explore the code: Introduction Architecture Overview API Reference View on GitHub \uD83D\uDCDE Need Help? If you encounter issues or have suggestions, feel free to: Browse the FAQ Let's build efficient and resilient file upload systems—together!"
  }
}