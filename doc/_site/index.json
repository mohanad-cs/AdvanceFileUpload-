{
  "api/AdvanceFileUpload.API.Controllers.FileUploadController.html": {
    "href": "api/AdvanceFileUpload.API.Controllers.FileUploadController.html",
    "title": "Class FileUploadController | Uploading File API",
    "keywords": "Class FileUploadController Namespace AdvanceFileUpload.API.Controllers Assembly AdvanceFileUpload.API.dll [ApiController] public class FileUploadController : ControllerBase Inheritance object ControllerBase FileUploadController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadController(IUploadManger) public FileUploadController(IUploadManger uploadManager) Parameters uploadManager IUploadManger Methods CancelUploadSessionAsync(CancelUploadSessionRequest, CancellationToken) Cancels the file upload session. [HttpPost(\"api/upload/cancel-session\")] [ProducesResponseType(200)] [ProducesResponseType(400)] public Task<ActionResult<bool>> CancelUploadSessionAsync(CancelUploadSessionRequest request, CancellationToken cancellationToken) Parameters request CancelUploadSessionRequest cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult<bool>> Indicates whether the session was canceled successfully. CompleteUploadSessionAsync(CompleteUploadSessionRequest, CancellationToken) Completes the file upload session. [HttpPost(\"api/upload/complete-session\")] [ProducesResponseType(200)] [ProducesResponseType(400)] public Task<ActionResult<bool>> CompleteUploadSessionAsync(CompleteUploadSessionRequest request, CancellationToken cancellationToken) Parameters request CompleteUploadSessionRequest The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult<bool>> Indicates whether the file upload was completed successfully. CreateUploadSessionAsync(CreateUploadSessionRequest, CancellationToken) Creates a new file upload session. [HttpPost(\"api/upload/create-session\")] [ProducesResponseType(200)] [ProducesResponseType(400)] public Task<ActionResult<CreateUploadSessionResponse>> CreateUploadSessionAsync(CreateUploadSessionRequest request, CancellationToken cancellationToken) Parameters request CreateUploadSessionRequest The request containing the details of the file to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult<CreateUploadSessionResponse>> The response with the details of the created upload session. GetUploadSessionStatusAsync(Guid, CancellationToken) Gets the status of the upload session. [HttpGet(\"api/upload/session-status\")] [ProducesResponseType(200)] [ProducesResponseType(404)] public Task<ActionResult<UploadSessionStatusResponse?>> GetUploadSessionStatusAsync(Guid sessionId, CancellationToken cancellationToken) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult<UploadSessionStatusResponse>> The response with the status of the upload session. PauseUploadSessionAsync(PauseUploadSessionRequest, CancellationToken) Pauses the file upload session. [HttpPost(\"api/upload/pause-session\")] [ProducesResponseType(200)] [ProducesResponseType(400)] public Task<ActionResult<bool>> PauseUploadSessionAsync(PauseUploadSessionRequest request, CancellationToken cancellationToken) Parameters request PauseUploadSessionRequest cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult<bool>> Indicates whether the session was paused successfully. UploadChunkAsync(UploadChunkRequest, CancellationToken) Uploads a chunk of the file. [HttpPost(\"api/upload/upload-chunk\")] [ProducesResponseType(200)] [ProducesResponseType(400)] public Task<ActionResult<bool>> UploadChunkAsync(UploadChunkRequest request, CancellationToken cancellationToken) Parameters request UploadChunkRequest The request containing the details of the chunk to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult<bool>> Indicates whether the chunk was uploaded successfully."
  },
  "api/AdvanceFileUpload.API.Controllers.html": {
    "href": "api/AdvanceFileUpload.API.Controllers.html",
    "title": "Namespace AdvanceFileUpload.API.Controllers | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.API.Controllers Classes FileUploadController"
  },
  "api/AdvanceFileUpload.API.Middleware.ExceptionHandlingMiddleware.html": {
    "href": "api/AdvanceFileUpload.API.Middleware.ExceptionHandlingMiddleware.html",
    "title": "Class ExceptionHandlingMiddleware | Uploading File API",
    "keywords": "Class ExceptionHandlingMiddleware Namespace AdvanceFileUpload.API.Middleware Assembly AdvanceFileUpload.API.dll Middleware to handle exceptions globally. public class ExceptionHandlingMiddleware Inheritance object ExceptionHandlingMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExceptionHandlingMiddleware(RequestDelegate, ILogger<ExceptionHandlingMiddleware>) Initializes a new instance of the ExceptionHandlingMiddleware class. public ExceptionHandlingMiddleware(RequestDelegate next, ILogger<ExceptionHandlingMiddleware> logger) Parameters next RequestDelegate The next middleware in the pipeline. logger ILogger<ExceptionHandlingMiddleware> The logger instance. Methods InvokeAsync(HttpContext) Invokes the middleware to handle the HTTP context. public Task InvokeAsync(HttpContext context) Parameters context HttpContext The HTTP context. Returns Task A task that represents the completion of request processing."
  },
  "api/AdvanceFileUpload.API.Middleware.ExceptionResponse.html": {
    "href": "api/AdvanceFileUpload.API.Middleware.ExceptionResponse.html",
    "title": "Class ExceptionResponse | Uploading File API",
    "keywords": "Class ExceptionResponse Namespace AdvanceFileUpload.API.Middleware Assembly AdvanceFileUpload.API.dll Represents the response for an exception. public record ExceptionResponse : IEquatable<ExceptionResponse> Inheritance object ExceptionResponse Implements IEquatable<ExceptionResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExceptionResponse(HttpStatusCode, string) Represents the response for an exception. public ExceptionResponse(HttpStatusCode StatusCode, string Description) Parameters StatusCode HttpStatusCode The HTTP status code. Description string The description of the exception. Properties Description The description of the exception. public string Description { get; init; } Property Value string StatusCode The HTTP status code. public HttpStatusCode StatusCode { get; init; } Property Value HttpStatusCode"
  },
  "api/AdvanceFileUpload.API.Middleware.html": {
    "href": "api/AdvanceFileUpload.API.Middleware.html",
    "title": "Namespace AdvanceFileUpload.API.Middleware | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.API.Middleware Classes ExceptionHandlingMiddleware Middleware to handle exceptions globally. ExceptionResponse Represents the response for an exception."
  },
  "api/AdvanceFileUpload.API.ServiceConfiguration.ServiceConfiguration.html": {
    "href": "api/AdvanceFileUpload.API.ServiceConfiguration.ServiceConfiguration.html",
    "title": "Class ServiceConfiguration | Uploading File API",
    "keywords": "Class ServiceConfiguration Namespace AdvanceFileUpload.API.ServiceConfiguration Assembly AdvanceFileUpload.API.dll public static class ServiceConfiguration Inheritance object ServiceConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigureApplicationServices(IServiceCollection, IConfiguration) Configures the application services. public static void ConfigureApplicationServices(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection The service collection to add services to. configuration IConfiguration The application configuration."
  },
  "api/AdvanceFileUpload.API.ServiceConfiguration.html": {
    "href": "api/AdvanceFileUpload.API.ServiceConfiguration.html",
    "title": "Namespace AdvanceFileUpload.API.ServiceConfiguration | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.API.ServiceConfiguration Classes ServiceConfiguration"
  },
  "api/AdvanceFileUpload.Application.Compression.CompressionAlgorithmOption.html": {
    "href": "api/AdvanceFileUpload.Application.Compression.CompressionAlgorithmOption.html",
    "title": "Enum CompressionAlgorithmOption | Uploading File API",
    "keywords": "Enum CompressionAlgorithmOption Namespace AdvanceFileUpload.Application.Compression Assembly AdvanceFileUpload.Application.Shared.dll Specifies the compression algorithms available. public enum CompressionAlgorithmOption Fields Brotli = 2 Brotli compression algorithm. Benefits: High compression ratio, especially for web content, better than GZip in many cases. Deflate = 1 Deflate compression algorithm. Benefits: Fast compression and decompression, good for real-time applications. GZip = 0 GZip compression algorithm. Benefits: Good compression ratio and speed, widely supported."
  },
  "api/AdvanceFileUpload.Application.Compression.CompressionLevelOption.html": {
    "href": "api/AdvanceFileUpload.Application.Compression.CompressionLevelOption.html",
    "title": "Enum CompressionLevelOption | Uploading File API",
    "keywords": "Enum CompressionLevelOption Namespace AdvanceFileUpload.Application.Compression Assembly AdvanceFileUpload.Application.Shared.dll Specifies values that indicate whether a compression operation emphasizes speed or compression size. public enum CompressionLevelOption Fields Fastest = 1 The compression operation should complete as quickly as possible, even if the resulting file is not optimally compressed. NoCompression = 2 No compression should be performed on the file. Optimal = 0 The compression operation should optimally balance compression speed and output size. SmallestSize = 3 The compression operation should create output as small as possible, even if the operation takes a longer time to complete."
  },
  "api/AdvanceFileUpload.Application.Compression.FileCompressor.html": {
    "href": "api/AdvanceFileUpload.Application.Compression.FileCompressor.html",
    "title": "Class FileCompressor | Uploading File API",
    "keywords": "Class FileCompressor Namespace AdvanceFileUpload.Application.Compression Assembly AdvanceFileUpload.Application.Shared.dll Provides methods for compressing and decompressing files using various algorithms. public sealed class FileCompressor : IFileCompressor Inheritance object FileCompressor Implements IFileCompressor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileCompressor(ILogger<FileCompressor>) Initializes a new instance of the FileCompressor class. public FileCompressor(ILogger<FileCompressor> logger) Parameters logger ILogger<FileCompressor> The logger instance to use for logging. Exceptions ArgumentNullException Thrown when the logger is null. Methods AddExcludedExtension(string) Adds an excluded file extension to the list of extensions that should not be compressed. public void AddExcludedExtension(string extension) Parameters extension string CompressFileAsync(string, string, CompressionAlgorithmOption, CompressionLevelOption, CancellationToken) Compresses a single file asynchronously. public Task CompressFileAsync(string inputFilePath, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CompressionLevelOption compressionLevelOption, CancellationToken cancellationToken = default) Parameters inputFilePath string The path of the file to compress. outputDirectory string The directory where the compressed file will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. compressionLevelOption CompressionLevelOption The level of compression to apply. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. CompressFilesAsync(string[], string, CompressionAlgorithmOption, CompressionLevelOption, CancellationToken) Compresses multiple files asynchronously. public Task CompressFilesAsync(string[] inputFilePaths, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CompressionLevelOption compressionLevelOption, CancellationToken cancellationToken = default) Parameters inputFilePaths string[] An array of file paths to compress. outputDirectory string The directory where the compressed files will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. compressionLevelOption CompressionLevelOption The level of compression to apply. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. DecompressFileAsync(string, string, CompressionAlgorithmOption, CancellationToken) Decompresses a single file asynchronously. public Task DecompressFileAsync(string inputFilePath, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CancellationToken cancellationToken = default) Parameters inputFilePath string The path of the file to decompress. outputDirectory string The directory where the decompressed file will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. DecompressFilesAsync(string[], string, CompressionAlgorithmOption, CancellationToken) Decompresses multiple files asynchronously. public Task DecompressFilesAsync(string[] inputFilePaths, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CancellationToken cancellationToken = default) Parameters inputFilePaths string[] An array of file paths to decompress. outputDirectory string The directory where the decompressed files will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. IsFileApplicableForCompression(string) Determines whether a file is applicable for compression. public bool IsFileApplicableForCompression(string filePath) Parameters filePath string Returns bool"
  },
  "api/AdvanceFileUpload.Application.Compression.IFileCompressor.html": {
    "href": "api/AdvanceFileUpload.Application.Compression.IFileCompressor.html",
    "title": "Interface IFileCompressor | Uploading File API",
    "keywords": "Interface IFileCompressor Namespace AdvanceFileUpload.Application.Compression Assembly AdvanceFileUpload.Application.Shared.dll Interface for file compression and decompression operations. public interface IFileCompressor Methods AddExcludedExtension(string) Adds an excluded file extension to the list of extensions that should not be compressed. void AddExcludedExtension(string extension) Parameters extension string CompressFileAsync(string, string, CompressionAlgorithmOption, CompressionLevelOption, CancellationToken) Compresses a single file asynchronously. Task CompressFileAsync(string inputFilePath, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CompressionLevelOption compressionLevelOption, CancellationToken cancellationToken = default) Parameters inputFilePath string The path of the file to compress. outputDirectory string The directory where the compressed file will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. compressionLevelOption CompressionLevelOption The level of compression to apply. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. CompressFilesAsync(string[], string, CompressionAlgorithmOption, CompressionLevelOption, CancellationToken) Compresses multiple files asynchronously. Task CompressFilesAsync(string[] inputFilePaths, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CompressionLevelOption compressionLevelOption, CancellationToken cancellationToken = default) Parameters inputFilePaths string[] An array of file paths to compress. outputDirectory string The directory where the compressed files will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. compressionLevelOption CompressionLevelOption The level of compression to apply. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. DecompressFileAsync(string, string, CompressionAlgorithmOption, CancellationToken) Decompresses a single file asynchronously. Task DecompressFileAsync(string inputFilePath, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CancellationToken cancellationToken = default) Parameters inputFilePath string The path of the file to decompress. outputDirectory string The directory where the decompressed file will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. DecompressFilesAsync(string[], string, CompressionAlgorithmOption, CancellationToken) Decompresses multiple files asynchronously. Task DecompressFilesAsync(string[] inputFilePaths, string outputDirectory, CompressionAlgorithmOption compressionAlgorithmOption, CancellationToken cancellationToken = default) Parameters inputFilePaths string[] An array of file paths to decompress. outputDirectory string The directory where the decompressed files will be saved. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm to use. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. IsFileApplicableForCompression(string) Determines whether a file is applicable for compression. bool IsFileApplicableForCompression(string filePath) Parameters filePath string Returns bool"
  },
  "api/AdvanceFileUpload.Application.Compression.html": {
    "href": "api/AdvanceFileUpload.Application.Compression.html",
    "title": "Namespace AdvanceFileUpload.Application.Compression | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application.Compression Classes FileCompressor Provides methods for compressing and decompressing files using various algorithms. Interfaces IFileCompressor Interface for file compression and decompression operations. Enums CompressionAlgorithmOption Specifies the compression algorithms available. CompressionLevelOption Specifies values that indicate whether a compression operation emphasizes speed or compression size."
  },
  "api/AdvanceFileUpload.Application.Core.ICommand-1.html": {
    "href": "api/AdvanceFileUpload.Application.Core.ICommand-1.html",
    "title": "Interface ICommand<TResult> | Uploading File API",
    "keywords": "Interface ICommand<TResult> Namespace AdvanceFileUpload.Application.Core Assembly AdvanceFileUpload.Application.dll public interface ICommand<out TResult> : IRequest<TResult>, IBaseRequest Type Parameters TResult"
  },
  "api/AdvanceFileUpload.Application.Core.IQuery-1.html": {
    "href": "api/AdvanceFileUpload.Application.Core.IQuery-1.html",
    "title": "Interface IQuery<TResult> | Uploading File API",
    "keywords": "Interface IQuery<TResult> Namespace AdvanceFileUpload.Application.Core Assembly AdvanceFileUpload.Application.dll public interface IQuery<out TResult> : IRequest<TResult>, IBaseRequest Type Parameters TResult"
  },
  "api/AdvanceFileUpload.Application.Core.html": {
    "href": "api/AdvanceFileUpload.Application.Core.html",
    "title": "Namespace AdvanceFileUpload.Application.Core | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application.Core Interfaces ICommand<TResult> IQuery<TResult>"
  },
  "api/AdvanceFileUpload.Application.EventHandling.ChunkUploadedEventHandler.html": {
    "href": "api/AdvanceFileUpload.Application.EventHandling.ChunkUploadedEventHandler.html",
    "title": "Class ChunkUploadedEventHandler | Uploading File API",
    "keywords": "Class ChunkUploadedEventHandler Namespace AdvanceFileUpload.Application.EventHandling Assembly AdvanceFileUpload.Application.dll public sealed class ChunkUploadedEventHandler : INotificationHandler<ChunkUploadedEvent> Inheritance object ChunkUploadedEventHandler Implements INotificationHandler<ChunkUploadedEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ChunkUploadedEventHandler(IRepository<FileUploadSession>, IUploadProcessNotifier, IIntegrationEventPublisher, IOptions<UploadSetting>, ILogger<ChunkUploadedEventHandler>) public ChunkUploadedEventHandler(IRepository<FileUploadSession> fileUploadSessionRepository, IUploadProcessNotifier uploadProcessNotifier, IIntegrationEventPublisher integrationEventPublisher, IOptions<UploadSetting> uploadSetting, ILogger<ChunkUploadedEventHandler> logger) Parameters fileUploadSessionRepository IRepository<FileUploadSession> uploadProcessNotifier IUploadProcessNotifier integrationEventPublisher IIntegrationEventPublisher uploadSetting IOptions<UploadSetting> logger ILogger<ChunkUploadedEventHandler> Methods Handle(ChunkUploadedEvent, CancellationToken) Handles a notification public Task Handle(ChunkUploadedEvent notification, CancellationToken cancellationToken) Parameters notification ChunkUploadedEvent The notification cancellationToken CancellationToken Cancellation token Returns Task"
  },
  "api/AdvanceFileUpload.Application.EventHandling.DomainEventPublisher.html": {
    "href": "api/AdvanceFileUpload.Application.EventHandling.DomainEventPublisher.html",
    "title": "Class DomainEventPublisher | Uploading File API",
    "keywords": "Class DomainEventPublisher Namespace AdvanceFileUpload.Application.EventHandling Assembly AdvanceFileUpload.Application.dll Represents a domain event publisher. public class DomainEventPublisher : IDomainEventPublisher Inheritance object DomainEventPublisher Implements IDomainEventPublisher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DomainEventPublisher(IPublisher, ILogger<DomainEventPublisher>) Initializes a new instance of the DomainEventPublisher class. public DomainEventPublisher(IPublisher publisher, ILogger<DomainEventPublisher> logger) Parameters publisher IPublisher logger ILogger<DomainEventPublisher> Exceptions ArgumentNullException Methods PublishAsync(IDomainEvent, CancellationToken) Publishes a single domain event asynchronously. public Task PublishAsync(IDomainEvent domainEvent, CancellationToken cancellationToken = default) Parameters domainEvent IDomainEvent The domain event to be published. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation. PublishAsync(IEnumerable<IDomainEvent>, CancellationToken) Publishes multiple domain events asynchronously. public Task PublishAsync(IEnumerable<IDomainEvent> domainEvents, CancellationToken cancellationToken = default) Parameters domainEvents IEnumerable<IDomainEvent> The collection of domain events to be published. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation."
  },
  "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionCanceledEventHandler.html": {
    "href": "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionCanceledEventHandler.html",
    "title": "Class FileUploadSessionCanceledEventHandler | Uploading File API",
    "keywords": "Class FileUploadSessionCanceledEventHandler Namespace AdvanceFileUpload.Application.EventHandling Assembly AdvanceFileUpload.Application.dll public sealed class FileUploadSessionCanceledEventHandler : INotificationHandler<FileUploadSessionCanceledEvent> Inheritance object FileUploadSessionCanceledEventHandler Implements INotificationHandler<FileUploadSessionCanceledEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionCanceledEventHandler(IOptions<UploadSetting>, IIntegrationEventPublisher, IRepository<FileUploadSession>, ILogger<FileUploadSessionCreatedEventHandler>) public FileUploadSessionCanceledEventHandler(IOptions<UploadSetting> uploadSetting, IIntegrationEventPublisher integrationEventPublisher, IRepository<FileUploadSession> fileUploadSessionRepository, ILogger<FileUploadSessionCreatedEventHandler> logger) Parameters uploadSetting IOptions<UploadSetting> integrationEventPublisher IIntegrationEventPublisher fileUploadSessionRepository IRepository<FileUploadSession> logger ILogger<FileUploadSessionCreatedEventHandler> Methods Handle(FileUploadSessionCanceledEvent, CancellationToken) Handles a notification public Task Handle(FileUploadSessionCanceledEvent notification, CancellationToken cancellationToken) Parameters notification FileUploadSessionCanceledEvent The notification cancellationToken CancellationToken Cancellation token Returns Task"
  },
  "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionCompletedEventHandler.html": {
    "href": "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionCompletedEventHandler.html",
    "title": "Class FileUploadSessionCompletedEventHandler | Uploading File API",
    "keywords": "Class FileUploadSessionCompletedEventHandler Namespace AdvanceFileUpload.Application.EventHandling Assembly AdvanceFileUpload.Application.dll public sealed class FileUploadSessionCompletedEventHandler : INotificationHandler<FileUploadSessionCompletedEvent> Inheritance object FileUploadSessionCompletedEventHandler Implements INotificationHandler<FileUploadSessionCompletedEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionCompletedEventHandler(IRepository<FileUploadSession>, IFileProcessor, IFileCompressor, IOptions<UploadSetting>, IIntegrationEventPublisher, ILogger<FileUploadSessionCompletedEventHandler>) public FileUploadSessionCompletedEventHandler(IRepository<FileUploadSession> fileUploadSessionRepository, IFileProcessor fileProcessor, IFileCompressor fileCompressor, IOptions<UploadSetting> uploadSetting, IIntegrationEventPublisher integrationEventPublisher, ILogger<FileUploadSessionCompletedEventHandler> logger) Parameters fileUploadSessionRepository IRepository<FileUploadSession> fileProcessor IFileProcessor fileCompressor IFileCompressor uploadSetting IOptions<UploadSetting> integrationEventPublisher IIntegrationEventPublisher logger ILogger<FileUploadSessionCompletedEventHandler> Methods Handle(FileUploadSessionCompletedEvent, CancellationToken) Handles a notification public Task Handle(FileUploadSessionCompletedEvent notification, CancellationToken cancellationToken) Parameters notification FileUploadSessionCompletedEvent The notification cancellationToken CancellationToken Cancellation token Returns Task"
  },
  "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionCreatedEventHandler.html": {
    "href": "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionCreatedEventHandler.html",
    "title": "Class FileUploadSessionCreatedEventHandler | Uploading File API",
    "keywords": "Class FileUploadSessionCreatedEventHandler Namespace AdvanceFileUpload.Application.EventHandling Assembly AdvanceFileUpload.Application.dll public sealed class FileUploadSessionCreatedEventHandler : INotificationHandler<FileUploadSessionCreatedEvent> Inheritance object FileUploadSessionCreatedEventHandler Implements INotificationHandler<FileUploadSessionCreatedEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionCreatedEventHandler(IOptions<UploadSetting>, IIntegrationEventPublisher, ILogger<FileUploadSessionCreatedEventHandler>) public FileUploadSessionCreatedEventHandler(IOptions<UploadSetting> uploadSetting, IIntegrationEventPublisher integrationEventPublisher, ILogger<FileUploadSessionCreatedEventHandler> logger) Parameters uploadSetting IOptions<UploadSetting> integrationEventPublisher IIntegrationEventPublisher logger ILogger<FileUploadSessionCreatedEventHandler> Methods Handle(FileUploadSessionCreatedEvent, CancellationToken) Handles a notification public Task Handle(FileUploadSessionCreatedEvent notification, CancellationToken cancellationToken) Parameters notification FileUploadSessionCreatedEvent The notification cancellationToken CancellationToken Cancellation token Returns Task"
  },
  "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionPusedEventHandler.html": {
    "href": "api/AdvanceFileUpload.Application.EventHandling.FileUploadSessionPusedEventHandler.html",
    "title": "Class FileUploadSessionPusedEventHandler | Uploading File API",
    "keywords": "Class FileUploadSessionPusedEventHandler Namespace AdvanceFileUpload.Application.EventHandling Assembly AdvanceFileUpload.Application.dll public sealed class FileUploadSessionPusedEventHandler : INotificationHandler<FileUploadSessionPausedEvent> Inheritance object FileUploadSessionPusedEventHandler Implements INotificationHandler<FileUploadSessionPausedEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionPusedEventHandler(IOptions<UploadSetting>, IIntegrationEventPublisher, ILogger<FileUploadSessionCreatedEventHandler>) public FileUploadSessionPusedEventHandler(IOptions<UploadSetting> uploadSetting, IIntegrationEventPublisher integrationEventPublisher, ILogger<FileUploadSessionCreatedEventHandler> logger) Parameters uploadSetting IOptions<UploadSetting> integrationEventPublisher IIntegrationEventPublisher logger ILogger<FileUploadSessionCreatedEventHandler> Methods Handle(FileUploadSessionPausedEvent, CancellationToken) Handles a notification public Task Handle(FileUploadSessionPausedEvent notification, CancellationToken cancellationToken) Parameters notification FileUploadSessionPausedEvent The notification cancellationToken CancellationToken Cancellation token Returns Task"
  },
  "api/AdvanceFileUpload.Application.EventHandling.html": {
    "href": "api/AdvanceFileUpload.Application.EventHandling.html",
    "title": "Namespace AdvanceFileUpload.Application.EventHandling | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application.EventHandling Classes ChunkUploadedEventHandler DomainEventPublisher Represents a domain event publisher. FileUploadSessionCanceledEventHandler FileUploadSessionCompletedEventHandler FileUploadSessionCreatedEventHandler FileUploadSessionPusedEventHandler"
  },
  "api/AdvanceFileUpload.Application.Exception.ApplicationException.html": {
    "href": "api/AdvanceFileUpload.Application.Exception.ApplicationException.html",
    "title": "Class ApplicationException | Uploading File API",
    "keywords": "Class ApplicationException Namespace AdvanceFileUpload.Application.Exception Assembly AdvanceFileUpload.Application.dll public sealed class ApplicationException : Exception, ISerializable Inheritance object Exception ApplicationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors ApplicationException(SerializationInfo, StreamingContext) public ApplicationException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext ApplicationException(string?) public ApplicationException(string? message) Parameters message string ApplicationException(string?, Exception?) public ApplicationException(string? message, Exception? innerException) Parameters message string innerException Exception"
  },
  "api/AdvanceFileUpload.Application.Exception.html": {
    "href": "api/AdvanceFileUpload.Application.Exception.html",
    "title": "Namespace AdvanceFileUpload.Application.Exception | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application.Exception Classes ApplicationException"
  },
  "api/AdvanceFileUpload.Application.FileProcessing.FileProcessor.html": {
    "href": "api/AdvanceFileUpload.Application.FileProcessing.FileProcessor.html",
    "title": "Class FileProcessor | Uploading File API",
    "keywords": "Class FileProcessor Namespace AdvanceFileUpload.Application.FileProcessing Assembly AdvanceFileUpload.Application.Shared.dll Provides methods for file operations such as concatenating file chunks, saving files, and splitting files into chunks. public class FileProcessor : IFileProcessor Inheritance object FileProcessor Implements IFileProcessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileProcessor(ILogger<FileProcessor>) public FileProcessor(ILogger<FileProcessor> logger) Parameters logger ILogger<FileProcessor> Methods MergeChunksAsync(List<string>, string, CancellationToken) Merge multiple file chunks into a single file. public Task MergeChunksAsync(List<string> chunkPaths, string outputFilePath, CancellationToken cancellationToken = default) Parameters chunkPaths List<string> The list of paths to the file chunks. outputFilePath string The path where the Merged file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SaveFileAsync(string, byte[], string, CancellationToken) Saves a file to the specified directory. public Task SaveFileAsync(string fileName, byte[] fileData, string outputDirectory, CancellationToken cancellationToken = default) Parameters fileName string The name of the file to save. fileData byte[] The byte array containing the file data. outputDirectory string The directory where the file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SplitFileIntoChunksAsync(string, long, string, CancellationToken) Splits a file into multiple chunks. public Task<List<string>> SplitFileIntoChunksAsync(string filePath, long chunkSize, string outputDirectory, CancellationToken cancellationToken = default) Parameters filePath string The path to the file to be split. chunkSize long The size of each chunk in bytes. outputDirectory string The directory where the chunks will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<List<string>> A task that represents the asynchronous operation. The task result contains a list of paths to the created chunks."
  },
  "api/AdvanceFileUpload.Application.FileProcessing.IFileProcessor.html": {
    "href": "api/AdvanceFileUpload.Application.FileProcessing.IFileProcessor.html",
    "title": "Interface IFileProcessor | Uploading File API",
    "keywords": "Interface IFileProcessor Namespace AdvanceFileUpload.Application.FileProcessing Assembly AdvanceFileUpload.Application.Shared.dll Provides methods for file operations such as concatenating file chunks, saving files, and splitting files into chunks. public interface IFileProcessor Methods MergeChunksAsync(List<string>, string, CancellationToken) Merge multiple file chunks into a single file. Task MergeChunksAsync(List<string> chunkPaths, string outputFilePath, CancellationToken cancellationToken = default) Parameters chunkPaths List<string> The list of paths to the file chunks. outputFilePath string The path where the Merged file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SaveFileAsync(string, byte[], string, CancellationToken) Saves a file to the specified directory. Task SaveFileAsync(string fileName, byte[] fileData, string outputDirectory, CancellationToken cancellationToken = default) Parameters fileName string The name of the file to save. fileData byte[] The byte array containing the file data. outputDirectory string The directory where the file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SplitFileIntoChunksAsync(string, long, string, CancellationToken) Splits a file into multiple chunks. Task<List<string>> SplitFileIntoChunksAsync(string filePath, long chunkSize, string outputDirectory, CancellationToken cancellationToken = default) Parameters filePath string The path to the file to be split. chunkSize long The size of each chunk in bytes. outputDirectory string The directory where the chunks will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<List<string>> A task that represents the asynchronous operation. The task result contains a list of paths to the created chunks."
  },
  "api/AdvanceFileUpload.Application.FileProcessing.html": {
    "href": "api/AdvanceFileUpload.Application.FileProcessing.html",
    "title": "Namespace AdvanceFileUpload.Application.FileProcessing | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application.FileProcessing Classes FileProcessor Provides methods for file operations such as concatenating file chunks, saving files, and splitting files into chunks. Interfaces IFileProcessor Provides methods for file operations such as concatenating file chunks, saving files, and splitting files into chunks."
  },
  "api/AdvanceFileUpload.Application.Hubs.IUploadProcessNotifier.html": {
    "href": "api/AdvanceFileUpload.Application.Hubs.IUploadProcessNotifier.html",
    "title": "Interface IUploadProcessNotifier | Uploading File API",
    "keywords": "Interface IUploadProcessNotifier Namespace AdvanceFileUpload.Application.Hubs Assembly AdvanceFileUpload.Application.dll public interface IUploadProcessNotifier Methods NotifyUploadProgressAsync(string?, UploadSessionStatusNotification, CancellationToken) Task NotifyUploadProgressAsync(string? connectionId, UploadSessionStatusNotification uploadSessionStatusNotification, CancellationToken cancellationToken = default) Parameters connectionId string uploadSessionStatusNotification UploadSessionStatusNotification cancellationToken CancellationToken Returns Task"
  },
  "api/AdvanceFileUpload.Application.Hubs.UploadProcessHub.html": {
    "href": "api/AdvanceFileUpload.Application.Hubs.UploadProcessHub.html",
    "title": "Class UploadProcessHub | Uploading File API",
    "keywords": "Class UploadProcessHub Namespace AdvanceFileUpload.Application.Hubs Assembly AdvanceFileUpload.Application.dll public class UploadProcessHub : Hub, IDisposable Inheritance object Hub UploadProcessHub Implements IDisposable Inherited Members Hub.OnConnectedAsync() Hub.OnDisconnectedAsync(Exception) Hub.Dispose(bool) Hub.Dispose() Hub.Clients Hub.Context Hub.Groups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MethodName The name of the method that receives upload process notifications. public const string MethodName = \"ReceiveUploadProcessNotification\" Field Value string Methods SendUploadProcessNotificationAsync(string, UploadSessionStatusNotification, CancellationToken) public Task SendUploadProcessNotificationAsync(string connectionId, UploadSessionStatusNotification uploadSessionStatusNotification, CancellationToken cancellationToken) Parameters connectionId string uploadSessionStatusNotification UploadSessionStatusNotification cancellationToken CancellationToken Returns Task"
  },
  "api/AdvanceFileUpload.Application.Hubs.UploadProcessNotifier.html": {
    "href": "api/AdvanceFileUpload.Application.Hubs.UploadProcessNotifier.html",
    "title": "Class UploadProcessNotifier | Uploading File API",
    "keywords": "Class UploadProcessNotifier Namespace AdvanceFileUpload.Application.Hubs Assembly AdvanceFileUpload.Application.dll public class UploadProcessNotifier : IUploadProcessNotifier Inheritance object UploadProcessNotifier Implements IUploadProcessNotifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadProcessNotifier(IHubContext<UploadProcessHub>, ILogger<UploadProcessNotifier>) public UploadProcessNotifier(IHubContext<UploadProcessHub> hubContext, ILogger<UploadProcessNotifier> logger) Parameters hubContext IHubContext<UploadProcessHub> logger ILogger<UploadProcessNotifier> Methods NotifyUploadProgressAsync(string?, UploadSessionStatusNotification, CancellationToken) public Task NotifyUploadProgressAsync(string? connectionId, UploadSessionStatusNotification uploadSessionStatusNotification, CancellationToken cancellationToken = default) Parameters connectionId string uploadSessionStatusNotification UploadSessionStatusNotification cancellationToken CancellationToken Returns Task"
  },
  "api/AdvanceFileUpload.Application.Hubs.html": {
    "href": "api/AdvanceFileUpload.Application.Hubs.html",
    "title": "Namespace AdvanceFileUpload.Application.Hubs | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application.Hubs Classes UploadProcessHub UploadProcessNotifier Interfaces IUploadProcessNotifier"
  },
  "api/AdvanceFileUpload.Application.IUploadManger.html": {
    "href": "api/AdvanceFileUpload.Application.IUploadManger.html",
    "title": "Interface IUploadManger | Uploading File API",
    "keywords": "Interface IUploadManger Namespace AdvanceFileUpload.Application Assembly AdvanceFileUpload.Application.dll Interface for managing file upload sessions. public interface IUploadManger Methods CancelUploadSessionAsync(Guid, CancellationToken) Cancels the file upload session asynchronously. Task<bool> CancelUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the session was canceled successfully. CompleteUploadSessionAsync(Guid, CancellationToken) Completes the file upload session asynchronously. Task<bool> CompleteUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the File was Uploading Completed successfully. CreateUploadSessionAsync(CreateUploadSessionRequest, CancellationToken) Creates a new file upload session asynchronously. Task<CreateUploadSessionResponse> CreateUploadSessionAsync(CreateUploadSessionRequest request, CancellationToken cancellationToken = default) Parameters request CreateUploadSessionRequest The request containing the details of the file to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<CreateUploadSessionResponse> A task that represents the asynchronous operation. The task result contains the response with the details of the created upload session. GetUploadSessionStatusAsync(Guid, CancellationToken) Gets the status of the upload session asynchronously. Task<UploadSessionStatusResponse?> GetUploadSessionStatusAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<UploadSessionStatusResponse> A task that represents the asynchronous operation. The task result contains the response with the status of the upload session. PauseUploadSessionAsync(Guid, CancellationToken) pause the file upload session asynchronously. Task<bool> PauseUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the session was paused successfully. UploadChunkAsync(UploadChunkRequest, CancellationToken) Uploads a chunk of the file asynchronously. Task<bool> UploadChunkAsync(UploadChunkRequest request, CancellationToken cancellationToken = default) Parameters request UploadChunkRequest The request containing the details of the chunk to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the chunk was uploaded successfully."
  },
  "api/AdvanceFileUpload.Application.Request.CancelUploadSessionRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Request.CancelUploadSessionRequest.html",
    "title": "Class CancelUploadSessionRequest | Uploading File API",
    "keywords": "Class CancelUploadSessionRequest Namespace AdvanceFileUpload.Application.Request Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to cancel an upload session. public sealed record CancelUploadSessionRequest : IEquatable<CancelUploadSessionRequest> Inheritance object CancelUploadSessionRequest Implements IEquatable<CancelUploadSessionRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Application.Request.CompleteUploadSessionRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Request.CompleteUploadSessionRequest.html",
    "title": "Class CompleteUploadSessionRequest | Uploading File API",
    "keywords": "Class CompleteUploadSessionRequest Namespace AdvanceFileUpload.Application.Request Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to complete a file upload session. public sealed record CompleteUploadSessionRequest : IEquatable<CompleteUploadSessionRequest> Inheritance object CompleteUploadSessionRequest Implements IEquatable<CompleteUploadSessionRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Application.Request.CompressionOption.html": {
    "href": "api/AdvanceFileUpload.Application.Request.CompressionOption.html",
    "title": "Class CompressionOption | Uploading File API",
    "keywords": "Class CompressionOption Namespace AdvanceFileUpload.Application.Request Assembly AdvanceFileUpload.Application.Shared.dll Represents the compression options for a file upload session. public sealed record CompressionOption : IEquatable<CompressionOption> Inheritance object CompressionOption Implements IEquatable<CompressionOption> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Algorithm Gets the compression algorithm to use. public CompressionAlgorithmOption Algorithm { get; init; } Property Value CompressionAlgorithmOption Level Gets the compression level to use. public CompressionLevelOption Level { get; init; } Property Value CompressionLevelOption"
  },
  "api/AdvanceFileUpload.Application.Request.CreateUploadSessionRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Request.CreateUploadSessionRequest.html",
    "title": "Class CreateUploadSessionRequest | Uploading File API",
    "keywords": "Class CreateUploadSessionRequest Namespace AdvanceFileUpload.Application.Request Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to create a new file upload session. public sealed record CreateUploadSessionRequest : IEquatable<CreateUploadSessionRequest> Inheritance object CreateUploadSessionRequest Implements IEquatable<CreateUploadSessionRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CompressedFileSize public required long? CompressedFileSize { get; init; } Property Value long? Compression Gets the Compression Option of the file upload session. public CompressionOption? Compression { get; init; } Property Value CompressionOption FileExtension Gets the file extension of the file to be uploaded. public required string FileExtension { get; init; } Property Value string FileName Gets the name of the file to be uploaded. public required string FileName { get; init; } Property Value string FileSize Gets the size of the file to be uploaded. public required long FileSize { get; init; } Property Value long HubConnectionId Gets the unique identifier of the hub connection. public string? HubConnectionId { get; init; } Property Value string UseCompression Gets a value indicating whether compression is used. public bool UseCompression { get; } Property Value bool"
  },
  "api/AdvanceFileUpload.Application.Request.GetUploadSessionStatusRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Request.GetUploadSessionStatusRequest.html",
    "title": "Class GetUploadSessionStatusRequest | Uploading File API",
    "keywords": "Class GetUploadSessionStatusRequest Namespace AdvanceFileUpload.Application.Request Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to get the status of an upload session. public sealed record GetUploadSessionStatusRequest : IEquatable<GetUploadSessionStatusRequest> Inheritance object GetUploadSessionStatusRequest Implements IEquatable<GetUploadSessionStatusRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Application.Request.PauseUploadSessionRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Request.PauseUploadSessionRequest.html",
    "title": "Class PauseUploadSessionRequest | Uploading File API",
    "keywords": "Class PauseUploadSessionRequest Namespace AdvanceFileUpload.Application.Request Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to pause an upload session. public sealed record PauseUploadSessionRequest : IEquatable<PauseUploadSessionRequest> Inheritance object PauseUploadSessionRequest Implements IEquatable<PauseUploadSessionRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Application.Request.UploadChunkRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Request.UploadChunkRequest.html",
    "title": "Class UploadChunkRequest | Uploading File API",
    "keywords": "Class UploadChunkRequest Namespace AdvanceFileUpload.Application.Request Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to upload a chunk of a file. public sealed record UploadChunkRequest : IEquatable<UploadChunkRequest> Inheritance object UploadChunkRequest Implements IEquatable<UploadChunkRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ChunkData Gets the data of the chunk being uploaded. public required byte[] ChunkData { get; init; } Property Value byte[] ChunkIndex Gets the index of the chunk being uploaded,(Zero based index). public int ChunkIndex { get; init; } Property Value int HubConnectionId Gets the unique identifier of the hub connection. public string? HubConnectionId { get; init; } Property Value string SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Application.Request.html": {
    "href": "api/AdvanceFileUpload.Application.Request.html",
    "title": "Namespace AdvanceFileUpload.Application.Request | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application.Request Classes CancelUploadSessionRequest Represents a request to cancel an upload session. CompleteUploadSessionRequest Represents a request to complete a file upload session. CompressionOption Represents the compression options for a file upload session. CreateUploadSessionRequest Represents a request to create a new file upload session. GetUploadSessionStatusRequest Represents a request to get the status of an upload session. PauseUploadSessionRequest Represents a request to pause an upload session. UploadChunkRequest Represents a request to upload a chunk of a file."
  },
  "api/AdvanceFileUpload.Application.Response.CreateUploadSessionResponse.html": {
    "href": "api/AdvanceFileUpload.Application.Response.CreateUploadSessionResponse.html",
    "title": "Class CreateUploadSessionResponse | Uploading File API",
    "keywords": "Class CreateUploadSessionResponse Namespace AdvanceFileUpload.Application.Response Assembly AdvanceFileUpload.Application.Shared.dll Represents the response after creating a new file upload session. public sealed record CreateUploadSessionResponse : IEquatable<CreateUploadSessionResponse> Inheritance object CreateUploadSessionResponse Implements IEquatable<CreateUploadSessionResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long MaxChunkSize Gets the maximum size of each chunk. public long MaxChunkSize { get; init; } Property Value long SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid SessionStartDate Gets the start date and time of the upload session. public DateTime SessionStartDate { get; init; } Property Value DateTime TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; init; } Property Value int UploadStatus Gets the current status of the upload session. public UploadStatus UploadStatus { get; init; } Property Value UploadStatus"
  },
  "api/AdvanceFileUpload.Application.Response.UploadSessionStatusNotification.html": {
    "href": "api/AdvanceFileUpload.Application.Response.UploadSessionStatusNotification.html",
    "title": "Class UploadSessionStatusNotification | Uploading File API",
    "keywords": "Class UploadSessionStatusNotification Namespace AdvanceFileUpload.Application.Response Assembly AdvanceFileUpload.Application.Shared.dll Represent the status of the upload session Notification. public sealed record UploadSessionStatusNotification : IEquatable<UploadSessionStatusNotification> Inheritance object UploadSessionStatusNotification Implements IEquatable<UploadSessionStatusNotification> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long MaxChunkSize Gets the maximum size of each chunk. public long MaxChunkSize { get; init; } Property Value long ProgressPercentage Gets the progress percentage of the file upload. public double ProgressPercentage { get; init; } Property Value double RemainChunks Gets the list of remaining chunks to be uploaded. public List<int>? RemainChunks { get; init; } Property Value List<int> SessionEndDate Gets the end date and time of the upload session, if it has ended. public DateTime? SessionEndDate { get; init; } Property Value DateTime? SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid SessionStartDate Gets the start date and time of the upload session. public DateTime SessionStartDate { get; init; } Property Value DateTime TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; init; } Property Value int TotalUploadedChunks Gets the total number of chunks that have been uploaded. public int TotalUploadedChunks { get; init; } Property Value int UploadStatus Gets the current status of the upload session. public UploadStatus UploadStatus { get; init; } Property Value UploadStatus"
  },
  "api/AdvanceFileUpload.Application.Response.UploadSessionStatusResponse.html": {
    "href": "api/AdvanceFileUpload.Application.Response.UploadSessionStatusResponse.html",
    "title": "Class UploadSessionStatusResponse | Uploading File API",
    "keywords": "Class UploadSessionStatusResponse Namespace AdvanceFileUpload.Application.Response Assembly AdvanceFileUpload.Application.Shared.dll Represents the status response of an upload session. public sealed record UploadSessionStatusResponse : IEquatable<UploadSessionStatusResponse> Inheritance object UploadSessionStatusResponse Implements IEquatable<UploadSessionStatusResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long MaxChunkSize Gets the maximum size of each chunk. public long MaxChunkSize { get; init; } Property Value long ProgressPercentage Gets the progress percentage of the file upload. public double ProgressPercentage { get; init; } Property Value double RemainChunks Gets the list of remaining chunks to be uploaded. public List<int>? RemainChunks { get; init; } Property Value List<int> SessionEndDate Gets the end date and time of the upload session, if it has ended. public DateTime? SessionEndDate { get; init; } Property Value DateTime? SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid SessionStartDate Gets the start date and time of the upload session. public DateTime SessionStartDate { get; init; } Property Value DateTime TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; init; } Property Value int TotalUploadedChunks Gets the total number of chunks that have been uploaded. public int TotalUploadedChunks { get; init; } Property Value int UploadStatus Gets the current status of the upload session. public UploadStatus UploadStatus { get; init; } Property Value UploadStatus"
  },
  "api/AdvanceFileUpload.Application.Response.UploadStatus.html": {
    "href": "api/AdvanceFileUpload.Application.Response.UploadStatus.html",
    "title": "Enum UploadStatus | Uploading File API",
    "keywords": "Enum UploadStatus Namespace AdvanceFileUpload.Application.Response Assembly AdvanceFileUpload.Application.Shared.dll Represents the status of an upload session. public enum UploadStatus Fields Canceled = 5 The file upload session is canceled. Completed = 4 The file upload session is completed. Failed = 6 The file upload session has failed. InProgress = 1 The file upload session is in progress. Paused = 2 The file upload session is paused. PendingToComplete = 3 The file upload session is Watling to be Completed."
  },
  "api/AdvanceFileUpload.Application.Response.html": {
    "href": "api/AdvanceFileUpload.Application.Response.html",
    "title": "Namespace AdvanceFileUpload.Application.Response | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application.Response Classes CreateUploadSessionResponse Represents the response after creating a new file upload session. UploadSessionStatusNotification Represent the status of the upload session Notification. UploadSessionStatusResponse Represents the status response of an upload session. Enums UploadStatus Represents the status of an upload session."
  },
  "api/AdvanceFileUpload.Application.Settings.IUploadSetting.html": {
    "href": "api/AdvanceFileUpload.Application.Settings.IUploadSetting.html",
    "title": "Interface IUploadSetting | Uploading File API",
    "keywords": "Interface IUploadSetting Namespace AdvanceFileUpload.Application.Settings Assembly AdvanceFileUpload.Application.dll Interface for upload settings. public interface IUploadSetting Properties AllowedExtensions Gets or sets the allowed file extensions. string[] AllowedExtensions { get; set; } Property Value string[] Examples For example: new string[] { \".jpg\", \".png\", \".pdf\" } EnableCompression Gets or sets a value indicating whether to enable compression. bool EnableCompression { get; set; } Property Value bool EnableIntegrationEventPublishing Gets or sets a value indicating whether to enable integration event publishing. bool EnableIntegrationEventPublishing { get; set; } Property Value bool MaxChunkSize Gets or sets the maximum chunk size for file uploads. long MaxChunkSize { get; set; } Property Value long MaxFileSize Gets or sets the maximum file size for uploads. long MaxFileSize { get; set; } Property Value long SavingDirectory Gets or sets the directory where files will be saved. string SavingDirectory { get; set; } Property Value string TempDirectory Gets or sets the directory where temporary files will be saved. string TempDirectory { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.Application.Settings.UploadSetting.html": {
    "href": "api/AdvanceFileUpload.Application.Settings.UploadSetting.html",
    "title": "Class UploadSetting | Uploading File API",
    "keywords": "Class UploadSetting Namespace AdvanceFileUpload.Application.Settings Assembly AdvanceFileUpload.Application.dll Represents the upload settings. public sealed class UploadSetting : IUploadSetting Inheritance object UploadSetting Implements IUploadSetting Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields DefaultMaxChunkSize The default maximum chunk file size. public const long DefaultMaxChunkSize = 2097152 Field Value long SectionName The name of the section in the configuration file. public const string SectionName = \"UploadSetting\" Field Value string Properties AllowedExtensions Gets or sets the allowed file extensions. public required string[] AllowedExtensions { get; set; } Property Value string[] Examples For example: new string[] { \".jpg\", \".png\", \".pdf\" } EnableCompression Gets or sets a value indicating whether to enable compression. public bool EnableCompression { get; set; } Property Value bool EnableIntegrationEventPublishing Gets or sets a value indicating whether to enable integration event publishing. public bool EnableIntegrationEventPublishing { get; set; } Property Value bool MaxChunkSize Gets or sets the maximum chunk size for file uploads. public long MaxChunkSize { get; set; } Property Value long MaxFileSize Gets or sets the maximum file size for uploads. public long MaxFileSize { get; set; } Property Value long SavingDirectory Gets or sets the directory where files will be saved. public required string SavingDirectory { get; set; } Property Value string TempDirectory Gets or sets the directory where temporary files will be saved. public required string TempDirectory { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.Application.Settings.html": {
    "href": "api/AdvanceFileUpload.Application.Settings.html",
    "title": "Namespace AdvanceFileUpload.Application.Settings | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application.Settings Classes UploadSetting Represents the upload settings. Interfaces IUploadSetting Interface for upload settings."
  },
  "api/AdvanceFileUpload.Application.Shared.ChunkValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.ChunkValidator.html",
    "title": "Class ChunkValidator | Uploading File API",
    "keywords": "Class ChunkValidator Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Represents a chunk validator. public sealed class ChunkValidator : IChunkValidator Inheritance object ChunkValidator Implements IChunkValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods ValidateChunkData(byte[], long) Validates the chunk data. public bool ValidateChunkData(byte[] chunkData, long MaxChunkSize) Parameters chunkData byte[] The data of the chunk to validate. MaxChunkSize long The maximum size of the chunk. Returns bool True if the chunk data is valid; otherwise, false. ValidateChunkIndex(int) Validates the chunk index. public bool ValidateChunkIndex(int chunkIndex) Parameters chunkIndex int The index of the chunk to validate. Returns bool True if the chunk index is valid; otherwise, false. ValidateChunkSize(long, long) Validates the size of the chunk. public bool ValidateChunkSize(long chunkSize, long maxChunkSize) Parameters chunkSize long The size of the chunk to validate. maxChunkSize long The maximum allowed size of the chunk. Returns bool True if the chunk size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Shared.CreateUploadSessionRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.CreateUploadSessionRequest.html",
    "title": "Class CreateUploadSessionRequest | Uploading File API",
    "keywords": "Class CreateUploadSessionRequest Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to create a new file upload session. public sealed class CreateUploadSessionRequest Inheritance object CreateUploadSessionRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FileExtension Gets the file extension of the file to be uploaded. public required string FileExtension { get; init; } Property Value string FileName Gets the name of the file to be uploaded. public required string FileName { get; init; } Property Value string FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long"
  },
  "api/AdvanceFileUpload.Application.Shared.CreateUploadSessionResponse.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.CreateUploadSessionResponse.html",
    "title": "Class CreateUploadSessionResponse | Uploading File API",
    "keywords": "Class CreateUploadSessionResponse Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Represents the response after creating a new file upload session. public sealed class CreateUploadSessionResponse Inheritance object CreateUploadSessionResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long MaxMaxChunkSize Gets the maximum size of each chunk. public long MaxMaxChunkSize { get; init; } Property Value long SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid SessionStartDate Gets the start date and time of the upload session. public DateTime SessionStartDate { get; init; } Property Value DateTime TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; init; } Property Value int UploadStatus Gets the current status of the upload session. public UploadStatus UploadStatus { get; init; } Property Value UploadStatus"
  },
  "api/AdvanceFileUpload.Application.Shared.FileOperationService.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.FileOperationService.html",
    "title": "Class FileOperationService | Uploading File API",
    "keywords": "Class FileOperationService Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Provides methods for file operations such as concatenating file chunks, saving files, and splitting files into chunks. public class FileOperationService : IFileOperationService Inheritance object FileOperationService Implements IFileOperationService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConcatenateChunksAsync(List<string>, string, CancellationToken) Concatenates multiple file chunks into a single file. public Task ConcatenateChunksAsync(List<string> chunkPaths, string outputFilePath, CancellationToken cancellationToken = default) Parameters chunkPaths List<string> The list of paths to the file chunks. outputFilePath string The path where the concatenated file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SaveFileAsync(string, byte[], string, CancellationToken) Saves a file to the specified directory. public Task SaveFileAsync(string fileName, byte[] fileData, string directory, CancellationToken cancellationToken = default) Parameters fileName string The name of the file to save. fileData byte[] The byte array containing the file data. directory string The directory where the file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SplitFileIntoChunksAsync(string, long, string, CancellationToken) Splits a file into multiple chunks. public Task<List<string>> SplitFileIntoChunksAsync(string filePath, long chunkSize, string outputDirectory, CancellationToken cancellationToken = default) Parameters filePath string The path to the file to be split. chunkSize long The size of each chunk in bytes. outputDirectory string The directory where the chunks will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<List<string>> A task that represents the asynchronous operation. The task result contains a list of paths to the created chunks."
  },
  "api/AdvanceFileUpload.Application.Shared.FileValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.FileValidator.html",
    "title": "Class FileValidator | Uploading File API",
    "keywords": "Class FileValidator Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Represents a file validator. public sealed class FileValidator : IFileValidator Inheritance object FileValidator Implements IFileValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods ValidateFileExtension(string, string[]) Validates the file extension. public bool ValidateFileExtension(string fileExtension, string[] allowedExtensions) Parameters fileExtension string The extension of the file to validate. allowedExtensions string[] The allowed extensions of the file to validate. Returns bool True if the file extension is valid; otherwise, false. ValidateFileName(string) Validates the file name. public bool ValidateFileName(string fileName) Parameters fileName string The name of the file to validate. Returns bool True if the file name is valid; otherwise, false. ValidateFileSize(long, long) Validates the file size. public bool ValidateFileSize(long fileSize, long maxFileSize) Parameters fileSize long The size of the file to validate. maxFileSize long The maximum allowed size of the file. Returns bool True if the file size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Shared.IChunkValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.IChunkValidator.html",
    "title": "Interface IChunkValidator | Uploading File API",
    "keywords": "Interface IChunkValidator Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Interface for validating file chunks. public interface IChunkValidator Methods ValidateChunkData(byte[], long) Validates the chunk data. bool ValidateChunkData(byte[] chunkData, long MaxChunkSize) Parameters chunkData byte[] The data of the chunk to validate. MaxChunkSize long The maximum size of the chunk. Returns bool True if the chunk data is valid; otherwise, false. ValidateChunkIndex(int) Validates the chunk index. bool ValidateChunkIndex(int chunkIndex) Parameters chunkIndex int The index of the chunk to validate. Returns bool True if the chunk index is valid; otherwise, false. ValidateChunkSize(long, long) Validates the size of the chunk. bool ValidateChunkSize(long chunkSize, long maxChunkSize) Parameters chunkSize long The size of the chunk to validate. maxChunkSize long The maximum allowed size of the chunk. Returns bool True if the chunk size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Shared.IFileOperationService.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.IFileOperationService.html",
    "title": "Interface IFileOperationService | Uploading File API",
    "keywords": "Interface IFileOperationService Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Provides methods for file operations such as concatenating file chunks, saving files, and splitting files into chunks. public interface IFileOperationService Methods ConcatenateChunksAsync(List<string>, string, CancellationToken) Concatenates multiple file chunks into a single file. Task ConcatenateChunksAsync(List<string> chunkPaths, string outputFilePath, CancellationToken cancellationToken = default) Parameters chunkPaths List<string> The list of paths to the file chunks. outputFilePath string The path where the concatenated file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SaveFileAsync(string, byte[], string, CancellationToken) Saves a file to the specified directory. Task SaveFileAsync(string fileName, byte[] fileData, string directory, CancellationToken cancellationToken = default) Parameters fileName string The name of the file to save. fileData byte[] The byte array containing the file data. directory string The directory where the file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SplitFileIntoChunksAsync(string, long, string, CancellationToken) Splits a file into multiple chunks. Task<List<string>> SplitFileIntoChunksAsync(string filePath, long chunkSize, string outputDirectory, CancellationToken cancellationToken = default) Parameters filePath string The path to the file to be split. chunkSize long The size of each chunk in bytes. outputDirectory string The directory where the chunks will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<List<string>> A task that represents the asynchronous operation. The task result contains a list of paths to the created chunks."
  },
  "api/AdvanceFileUpload.Application.Shared.IFileValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.IFileValidator.html",
    "title": "Interface IFileValidator | Uploading File API",
    "keywords": "Interface IFileValidator Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Interface for validating files. public interface IFileValidator Methods ValidateFileExtension(string, string[]) Validates the file extension. bool ValidateFileExtension(string fileExtension, string[] allowedExtensions) Parameters fileExtension string The extension of the file to validate. allowedExtensions string[] The allowed extensions of the file to validate. Returns bool True if the file extension is valid; otherwise, false. ValidateFileName(string) Validates the file name. bool ValidateFileName(string fileName) Parameters fileName string The name of the file to validate. Returns bool True if the file name is valid; otherwise, false. ValidateFileSize(long, long) Validates the file size. bool ValidateFileSize(long fileSize, long maxFileSize) Parameters fileSize long The size of the file to validate. maxFileSize long The maximum allowed size of the file. Returns bool True if the file size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Shared.RouteTemplates.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.RouteTemplates.html",
    "title": "Class RouteTemplates | Uploading File API",
    "keywords": "Class RouteTemplates Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Contains route templates for the file upload API. public static class RouteTemplates Inheritance object RouteTemplates Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields APIHealthEndPoint The route for the health check endpoint. public const string APIHealthEndPoint = \"/health\" Field Value string Base The base route for the file upload API. public const string Base = \"api/upload/\" Field Value string CancelSession The route for canceling an upload session. public const string CancelSession = \"api/upload/cancel-session\" Field Value string Remarks Requires a session ID. CompleteSession The route for completing an upload session. public const string CompleteSession = \"api/upload/complete-session\" Field Value string Remarks Requires a session ID. CreateSession The route for creating a new upload session. public const string CreateSession = \"api/upload/create-session\" Field Value string PauseSession The route for pausing an upload session. public const string PauseSession = \"api/upload/pause-session\" Field Value string Remarks Requires a session ID. SessionStatus The route for checking the status of an upload session. public const string SessionStatus = \"api/upload/session-status\" Field Value string Remarks Requires a session ID. UploadChunk The route for uploading a chunk of a file. public const string UploadChunk = \"api/upload/upload-chunk\" Field Value string UploadProcessHub The route for the upload process hub. public const string UploadProcessHub = \"api/UploadProcessHub\" Field Value string"
  },
  "api/AdvanceFileUpload.Application.Shared.UploadChunkRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.UploadChunkRequest.html",
    "title": "Class UploadChunkRequest | Uploading File API",
    "keywords": "Class UploadChunkRequest Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to upload a chunk of a file. public sealed class UploadChunkRequest Inheritance object UploadChunkRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ChunkData Gets the data of the chunk being uploaded. public required byte[] ChunkData { get; init; } Property Value byte[] ChunkIndex Gets the index of the chunk being uploaded. public int ChunkIndex { get; init; } Property Value int SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Application.Shared.UploadSessionStatusResponse.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.UploadSessionStatusResponse.html",
    "title": "Class UploadSessionStatusResponse | Uploading File API",
    "keywords": "Class UploadSessionStatusResponse Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Represents the status response of an upload session. public sealed class UploadSessionStatusResponse Inheritance object UploadSessionStatusResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long MaxMaxChunkSize Gets the maximum size of each chunk. public long MaxMaxChunkSize { get; init; } Property Value long ProgressPercentage Gets the progress percentage of the file upload. public double ProgressPercentage { get; init; } Property Value double RemainChunks Gets the list of remaining chunks to be uploaded. public List<int>? RemainChunks { get; init; } Property Value List<int> SessionEndDate Gets the end date and time of the upload session, if it has ended. public DateTime? SessionEndDate { get; init; } Property Value DateTime? SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid SessionStartDate Gets the start date and time of the upload session. public DateTime SessionStartDate { get; init; } Property Value DateTime TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; init; } Property Value int TotalUploadedChunks Gets the total number of chunks that have been uploaded. public int TotalUploadedChunks { get; init; } Property Value int UploadStatus Gets the current status of the upload session. public UploadStatus UploadStatus { get; init; } Property Value UploadStatus"
  },
  "api/AdvanceFileUpload.Application.Shared.UploadStatus.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.UploadStatus.html",
    "title": "Enum UploadStatus | Uploading File API",
    "keywords": "Enum UploadStatus Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Represents the status of an upload session. public enum UploadStatus Fields Completed = 2 The upload session is completed. Failed = 3 The upload session has failed. InProgress = 1 The upload session is in progress. Pending = 0 The upload session is pending."
  },
  "api/AdvanceFileUpload.Application.Shared.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.html",
    "title": "Namespace AdvanceFileUpload.Application.Shared | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application.Shared Classes RouteTemplates Contains route templates for the file upload API."
  },
  "api/AdvanceFileUpload.Application.UploadManger.html": {
    "href": "api/AdvanceFileUpload.Application.UploadManger.html",
    "title": "Class UploadManger | Uploading File API",
    "keywords": "Class UploadManger Namespace AdvanceFileUpload.Application Assembly AdvanceFileUpload.Application.dll Represents the upload manager. public class UploadManger : IUploadManger Inheritance object UploadManger Implements IUploadManger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadManger(IRepository<FileUploadSession>, IDomainEventPublisher, IFileValidator, IChunkValidator, IOptions<UploadSetting>, IFileProcessor, IFileCompressor, ILogger<UploadManger>) Initializes a new instance of the UploadManger class. public UploadManger(IRepository<FileUploadSession> repository, IDomainEventPublisher domainEventPublisher, IFileValidator fileValidator, IChunkValidator chunkValidator, IOptions<UploadSetting> uploadSetting, IFileProcessor fileProcessor, IFileCompressor fileCompressor, ILogger<UploadManger> logger) Parameters repository IRepository<FileUploadSession> The repository for managing file upload sessions. domainEventPublisher IDomainEventPublisher The publisher for domain events. fileValidator IFileValidator The validator for file properties. chunkValidator IChunkValidator The validator for file chunks. uploadSetting IOptions<UploadSetting> The settings for file uploads. fileProcessor IFileProcessor The service for file operations. fileCompressor IFileCompressor The service for file compressor logger ILogger<UploadManger> The logger for logging information. Exceptions ArgumentNullException Thrown when any of the parameters are null. Methods CancelUploadSessionAsync(Guid, CancellationToken) Cancels the file upload session asynchronously. public Task<bool> CancelUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the session was canceled successfully. CompleteUploadSessionAsync(Guid, CancellationToken) Completes the file upload session asynchronously. public Task<bool> CompleteUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the File was Uploading Completed successfully. CreateUploadSessionAsync(CreateUploadSessionRequest, CancellationToken) Creates a new file upload session asynchronously. public Task<CreateUploadSessionResponse> CreateUploadSessionAsync(CreateUploadSessionRequest request, CancellationToken cancellationToken = default) Parameters request CreateUploadSessionRequest The request containing the details of the file to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<CreateUploadSessionResponse> A task that represents the asynchronous operation. The task result contains the response with the details of the created upload session. GetUploadSessionStatusAsync(Guid, CancellationToken) Gets the status of the upload session asynchronously. public Task<UploadSessionStatusResponse?> GetUploadSessionStatusAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<UploadSessionStatusResponse> A task that represents the asynchronous operation. The task result contains the response with the status of the upload session. PauseUploadSessionAsync(Guid, CancellationToken) pause the file upload session asynchronously. public Task<bool> PauseUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the session was paused successfully. UploadChunkAsync(UploadChunkRequest, CancellationToken) Uploads a chunk of the file asynchronously. public Task<bool> UploadChunkAsync(UploadChunkRequest request, CancellationToken cancellationToken = default) Parameters request UploadChunkRequest The request containing the details of the chunk to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the chunk was uploaded successfully."
  },
  "api/AdvanceFileUpload.Application.Validators.ChunkValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Validators.ChunkValidator.html",
    "title": "Class ChunkValidator | Uploading File API",
    "keywords": "Class ChunkValidator Namespace AdvanceFileUpload.Application.Validators Assembly AdvanceFileUpload.Application.Shared.dll Represents a chunk validator. public class ChunkValidator : IChunkValidator Inheritance object ChunkValidator Implements IChunkValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsValidChunkData(byte[], long) Validates the chunk data. public bool IsValidChunkData(byte[] chunkData, long MaxChunkSize) Parameters chunkData byte[] The data of the chunk to validate. MaxChunkSize long The maximum size of the chunk. Returns bool True if the chunk data is valid; otherwise, false. IsValidChunkIndex(int) Validates the chunk index. public bool IsValidChunkIndex(int chunkIndex) Parameters chunkIndex int The index of the chunk to validate. Returns bool True if the chunk index is valid; otherwise, false. IsValidChunkSize(long, long) Validates the size of the chunk. public bool IsValidChunkSize(long chunkSize, long maxChunkSize) Parameters chunkSize long The size of the chunk to validate. maxChunkSize long The maximum allowed size of the chunk. Returns bool True if the chunk size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Validators.FileCompressionValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Validators.FileCompressionValidator.html",
    "title": "Class FileCompressionValidator | Uploading File API",
    "keywords": "Class FileCompressionValidator Namespace AdvanceFileUpload.Application.Validators Assembly AdvanceFileUpload.Application.Shared.dll Represents a File Compression validator. public class FileCompressionValidator : IFileCompressionValidator Inheritance object FileCompressionValidator Implements IFileCompressionValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsValidCompressedData(byte[], CompressionAlgorithmOption) Validates if the provided file data is correctly compressed using the specified compression algorithm. public bool IsValidCompressedData(byte[] data, CompressionAlgorithmOption compressionAlgorithmOption) Parameters data byte[] The file data to validate. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm used to compress the data. Returns bool True if the data is valid compressed data; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Validators.FileValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Validators.FileValidator.html",
    "title": "Class FileValidator | Uploading File API",
    "keywords": "Class FileValidator Namespace AdvanceFileUpload.Application.Validators Assembly AdvanceFileUpload.Application.Shared.dll Represents a file validator. public class FileValidator : IFileValidator Inheritance object FileValidator Implements IFileValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsValidFileExtension(string, string[]) Validates the file extension. public bool IsValidFileExtension(string fileExtension, string[] allowedExtensions) Parameters fileExtension string The extension of the file to validate. allowedExtensions string[] The allowed extensions of the file to validate. Returns bool True if the file extension is valid; otherwise, false. IsValidFileName(string) Validates the file name. public bool IsValidFileName(string fileName) Parameters fileName string The name of the file to validate. Returns bool True if the file name is valid; otherwise, false. IsValidFileSize(long, long) Validates the file size. public bool IsValidFileSize(long fileSize, long maxFileSize) Parameters fileSize long The size of the file to validate. maxFileSize long The maximum allowed size of the file. Returns bool True if the file size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Validators.IChunkValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Validators.IChunkValidator.html",
    "title": "Interface IChunkValidator | Uploading File API",
    "keywords": "Interface IChunkValidator Namespace AdvanceFileUpload.Application.Validators Assembly AdvanceFileUpload.Application.Shared.dll Interface for validating file chunks. public interface IChunkValidator Methods IsValidChunkData(byte[], long) Validates the chunk data. bool IsValidChunkData(byte[] chunkData, long MaxChunkSize) Parameters chunkData byte[] The data of the chunk to validate. MaxChunkSize long The maximum size of the chunk. Returns bool True if the chunk data is valid; otherwise, false. IsValidChunkIndex(int) Validates the chunk index. bool IsValidChunkIndex(int chunkIndex) Parameters chunkIndex int The index of the chunk to validate. Returns bool True if the chunk index is valid; otherwise, false. IsValidChunkSize(long, long) Validates the size of the chunk. bool IsValidChunkSize(long chunkSize, long maxChunkSize) Parameters chunkSize long The size of the chunk to validate. maxChunkSize long The maximum allowed size of the chunk. Returns bool True if the chunk size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Validators.IFileCompressionValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Validators.IFileCompressionValidator.html",
    "title": "Interface IFileCompressionValidator | Uploading File API",
    "keywords": "Interface IFileCompressionValidator Namespace AdvanceFileUpload.Application.Validators Assembly AdvanceFileUpload.Application.Shared.dll Interface for validating compressed file data. public interface IFileCompressionValidator Methods IsValidCompressedData(byte[], CompressionAlgorithmOption) Validates if the provided file data is correctly compressed using the specified compression algorithm. bool IsValidCompressedData(byte[] data, CompressionAlgorithmOption compressionAlgorithmOption) Parameters data byte[] The file data to validate. compressionAlgorithmOption CompressionAlgorithmOption The compression algorithm used to compress the data. Returns bool True if the data is valid compressed data; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Validators.IFileValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Validators.IFileValidator.html",
    "title": "Interface IFileValidator | Uploading File API",
    "keywords": "Interface IFileValidator Namespace AdvanceFileUpload.Application.Validators Assembly AdvanceFileUpload.Application.Shared.dll Interface for validating files. public interface IFileValidator Methods IsValidFileExtension(string, string[]) Validates the file extension. bool IsValidFileExtension(string fileExtension, string[] allowedExtensions) Parameters fileExtension string The extension of the file to validate. allowedExtensions string[] The allowed extensions of the file to validate. Returns bool True if the file extension is valid; otherwise, false. IsValidFileName(string) Validates the file name. bool IsValidFileName(string fileName) Parameters fileName string The name of the file to validate. Returns bool True if the file name is valid; otherwise, false. IsValidFileSize(long, long) Validates the file size. bool IsValidFileSize(long fileSize, long maxFileSize) Parameters fileSize long The size of the file to validate. maxFileSize long The maximum allowed size of the file. Returns bool True if the file size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Validators.html": {
    "href": "api/AdvanceFileUpload.Application.Validators.html",
    "title": "Namespace AdvanceFileUpload.Application.Validators | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application.Validators Classes ChunkValidator Represents a chunk validator. FileCompressionValidator Represents a File Compression validator. FileValidator Represents a file validator. Interfaces IChunkValidator Interface for validating file chunks. IFileCompressionValidator Interface for validating compressed file data. IFileValidator Interface for validating files."
  },
  "api/AdvanceFileUpload.Application.html": {
    "href": "api/AdvanceFileUpload.Application.html",
    "title": "Namespace AdvanceFileUpload.Application | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application Classes UploadManger Represents the upload manager. Interfaces IUploadManger Interface for managing file upload sessions."
  },
  "api/AdvanceFileUpload.Benchmark.FileSplitter.html": {
    "href": "api/AdvanceFileUpload.Benchmark.FileSplitter.html",
    "title": "Class FileSplitter | Uploading File API",
    "keywords": "Class FileSplitter Namespace AdvanceFileUpload.Benchmark Assembly AdvanceFileUpload.Benchmark.dll public class FileSplitter Inheritance object FileSplitter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConcatenateAsync(IEnumerable<string>, string, CancellationToken) Concatenates chunk files back into the original file using buffered async I/O public Task ConcatenateAsync(IEnumerable<string> chunkPaths, string outputFilePath, CancellationToken cancellationToken = default) Parameters chunkPaths IEnumerable<string> outputFilePath string cancellationToken CancellationToken Returns Task ConcatenateChunksAsync(List<string>, string, CancellationToken) public Task ConcatenateChunksAsync(List<string> chunkPaths, string outputFilePath, CancellationToken cancellationToken = default) Parameters chunkPaths List<string> outputFilePath string cancellationToken CancellationToken Returns Task SplitAsync(string, string, int, CancellationToken) Splits a large file into chunks using parallel processing and async I/O public Task<List<string>> SplitAsync(string inputPath, string outputDirectory, int chunkSizeInBytes, CancellationToken cancellationToken = default) Parameters inputPath string outputDirectory string chunkSizeInBytes int cancellationToken CancellationToken Returns Task<List<string>>"
  },
  "api/AdvanceFileUpload.Benchmark.FileSplitter2.html": {
    "href": "api/AdvanceFileUpload.Benchmark.FileSplitter2.html",
    "title": "Class FileSplitter2 | Uploading File API",
    "keywords": "Class FileSplitter2 Namespace AdvanceFileUpload.Benchmark Assembly AdvanceFileUpload.Benchmark.dll Provides methods to split large files into chunks and concatenate chunks back into the original file. Uses asynchronous I/O and parallel processing to maximize performance while optimizing memory usage. public static class FileSplitter2 Inheritance object FileSplitter2 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConcatenateFileAsync(List<string>, string) Concatenates the specified chunk files into a single output file. Reads the chunk files in order and uses efficient buffering along with asynchronous I/O. public static Task ConcatenateFileAsync(List<string> chunkFiles, string outputFile) Parameters chunkFiles List<string> Ordered list of chunk file paths. outputFile string Full path for the concatenated output file. Returns Task A task representing the asynchronous concatenation operation. SplitFileAsync(string, long, string) Splits the specified file into chunks of the provided size. The operation is performed using asynchronous reads and parallel writes. public static Task<List<string>> SplitFileAsync(string inputFile, long chunkSize, string outputDirectory) Parameters inputFile string Full path to the input file. chunkSize long Size in bytes for each chunk. outputDirectory string Directory where chunk files will be stored. Returns Task<List<string>> A list of full paths to the generated chunk files."
  },
  "api/AdvanceFileUpload.Benchmark.FileSplitter3.html": {
    "href": "api/AdvanceFileUpload.Benchmark.FileSplitter3.html",
    "title": "Class FileSplitter3 | Uploading File API",
    "keywords": "Class FileSplitter3 Namespace AdvanceFileUpload.Benchmark Assembly AdvanceFileUpload.Benchmark.dll Provides methods to split a large file into smaller chunks and reassemble it efficiently. Utilizes parallel and asynchronous I/O to maximize performance and minimize memory usage. public static class FileSplitter3 Inheritance object FileSplitter3 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConcatenateFilesAsync(IEnumerable<string>, string) Reassembles a set of chunk files back into the original file asynchronously. public static Task ConcatenateFilesAsync(IEnumerable<string> chunkPaths, string outputFilePath) Parameters chunkPaths IEnumerable<string> List of chunk file paths in the correct order. outputFilePath string Path to the merged output file. Returns Task A task representing the asynchronous operation. SplitFileAsync(string, string, long, int) Splits a large file into smaller chunks of the specified size using parallel async operations. public static Task<List<string>> SplitFileAsync(string inputFilePath, string outputDirectory, long chunkSize, int maxDegreeOfParallelism = 4) Parameters inputFilePath string Path to the input file. outputDirectory string Directory where the chunks will be created. chunkSize long Chunk size in bytes. maxDegreeOfParallelism int Maximum parallel tasks to write chunks. Returns Task<List<string>> List of paths for the generated chunk files."
  },
  "api/AdvanceFileUpload.Benchmark.FileSplitter4.FileSplitter5.html": {
    "href": "api/AdvanceFileUpload.Benchmark.FileSplitter4.FileSplitter5.html",
    "title": "Class FileSplitter4.FileSplitter5 | Uploading File API",
    "keywords": "Class FileSplitter4.FileSplitter5 Namespace AdvanceFileUpload.Benchmark Assembly AdvanceFileUpload.Benchmark.dll public class FileSplitter4.FileSplitter5 Inheritance object FileSplitter4.FileSplitter5 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConcatenateFileAsync(List<string>, string) public Task ConcatenateFileAsync(List<string> chunkPaths, string destinationFilePath) Parameters chunkPaths List<string> destinationFilePath string Returns Task SplitFileAsync(string, int) public Task<List<string>> SplitFileAsync(string sourceFilePath, int chunkSize) Parameters sourceFilePath string chunkSize int Returns Task<List<string>>"
  },
  "api/AdvanceFileUpload.Benchmark.FileSplitter4.html": {
    "href": "api/AdvanceFileUpload.Benchmark.FileSplitter4.html",
    "title": "Class FileSplitter4 | Uploading File API",
    "keywords": "Class FileSplitter4 Namespace AdvanceFileUpload.Benchmark Assembly AdvanceFileUpload.Benchmark.dll Provides methods to split a large file into smaller chunks and reassemble it efficiently. Utilizes parallel and asynchronous I/O to maximize performance and minimize memory usage. public class FileSplitter4 Inheritance object FileSplitter4 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConcatenateFilesAsync(IEnumerable<string>, string) Reassembles a set of chunk files back into the original file asynchronously. public Task ConcatenateFilesAsync(IEnumerable<string> chunkPaths, string outputFilePath) Parameters chunkPaths IEnumerable<string> List of chunk file paths in the correct order. outputFilePath string Path to the merged output file. Returns Task A task representing the asynchronous operation. SplitFileAsync(string, string, long, int) Splits a large file into smaller chunks of the specified size using parallel async operations. public Task<List<string>> SplitFileAsync(string inputFilePath, string outputDirectory, long chunkSize, int maxDegreeOfParallelism = 4) Parameters inputFilePath string Path to the input file. outputDirectory string Directory where the chunks will be created. chunkSize long Chunk size in bytes. maxDegreeOfParallelism int Maximum parallel tasks to write chunks. Returns Task<List<string>> List of paths for the generated chunk files."
  },
  "api/AdvanceFileUpload.Benchmark.FileSplitterBenchmarks.html": {
    "href": "api/AdvanceFileUpload.Benchmark.FileSplitterBenchmarks.html",
    "title": "Class FileSplitterBenchmarks | Uploading File API",
    "keywords": "Class FileSplitterBenchmarks Namespace AdvanceFileUpload.Benchmark Assembly AdvanceFileUpload.Benchmark.dll [MemoryDiagnoser(true)] public class FileSplitterBenchmarks Inheritance object FileSplitterBenchmarks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ChunkSize [Params(new object?[] { 5242880 })] public long ChunkSize Field Value long FileSize [Params(new object?[] { 314572800 })] public long FileSize Field Value long Methods FileMergin1() [Benchmark(101, \"D:\\\\mohan\\\\Documents\\\\Projects\\\\AdvanceFileUpload\\\\AdvanceFileUpload-\\\\src\\\\AdvanceFileUpload\\\\AdvanceFileUpload.Benchmark\\\\FileSplitterBenchmarks.cs\")] public Task FileMergin1() Returns Task FileMergin2() [Benchmark(107, \"D:\\\\mohan\\\\Documents\\\\Projects\\\\AdvanceFileUpload\\\\AdvanceFileUpload-\\\\src\\\\AdvanceFileUpload\\\\AdvanceFileUpload.Benchmark\\\\FileSplitterBenchmarks.cs\")] public Task FileMergin2() Returns Task GlobalCleanup() [GlobalCleanup] public void GlobalCleanup() GlobalSetup() [GlobalSetup] public void GlobalSetup() IterationCleanup() [IterationCleanup] public void IterationCleanup() IterationSetup() [IterationSetup] public void IterationSetup()"
  },
  "api/AdvanceFileUpload.Benchmark.FileSplitterOptimized.html": {
    "href": "api/AdvanceFileUpload.Benchmark.FileSplitterOptimized.html",
    "title": "Class FileSplitterOptimized | Uploading File API",
    "keywords": "Class FileSplitterOptimized Namespace AdvanceFileUpload.Benchmark Assembly AdvanceFileUpload.Benchmark.dll public class FileSplitterOptimized Inheritance object FileSplitterOptimized Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileSplitterOptimized(ILogger) public FileSplitterOptimized(ILogger logger) Parameters logger ILogger Methods SplitFileIntoChunksAsync(string, long, string, CancellationToken) public Task<List<string>> SplitFileIntoChunksAsync(string filePath, long chunkSize, string outputDirectory, CancellationToken cancellationToken = default) Parameters filePath string chunkSize long outputDirectory string cancellationToken CancellationToken Returns Task<List<string>>"
  },
  "api/AdvanceFileUpload.Benchmark.FileSplitterOriginal.html": {
    "href": "api/AdvanceFileUpload.Benchmark.FileSplitterOriginal.html",
    "title": "Class FileSplitterOriginal | Uploading File API",
    "keywords": "Class FileSplitterOriginal Namespace AdvanceFileUpload.Benchmark Assembly AdvanceFileUpload.Benchmark.dll public class FileSplitterOriginal Inheritance object FileSplitterOriginal Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileSplitterOriginal(ILogger) public FileSplitterOriginal(ILogger logger) Parameters logger ILogger Methods SplitFileIntoChunksAsync(string, long, string, CancellationToken) public Task<List<string>> SplitFileIntoChunksAsync(string filePath, long chunkSize, string outputDirectory, CancellationToken cancellationToken = default) Parameters filePath string chunkSize long outputDirectory string cancellationToken CancellationToken Returns Task<List<string>>"
  },
  "api/AdvanceFileUpload.Benchmark.FileSplitterWithConcurrency.html": {
    "href": "api/AdvanceFileUpload.Benchmark.FileSplitterWithConcurrency.html",
    "title": "Class FileSplitterWithConcurrency | Uploading File API",
    "keywords": "Class FileSplitterWithConcurrency Namespace AdvanceFileUpload.Benchmark Assembly AdvanceFileUpload.Benchmark.dll public class FileSplitterWithConcurrency Inheritance object FileSplitterWithConcurrency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileSplitterWithConcurrency(ILogger) public FileSplitterWithConcurrency(ILogger logger) Parameters logger ILogger Methods SplitFileIntoChunksAsync(string, long, string, CancellationToken) public Task<List<string>> SplitFileIntoChunksAsync(string filePath, long chunkSize, string outputDirectory, CancellationToken cancellationToken = default) Parameters filePath string chunkSize long outputDirectory string cancellationToken CancellationToken Returns Task<List<string>>"
  },
  "api/AdvanceFileUpload.Benchmark.html": {
    "href": "api/AdvanceFileUpload.Benchmark.html",
    "title": "Namespace AdvanceFileUpload.Benchmark | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Benchmark Classes FileSplitter FileSplitter2 Provides methods to split large files into chunks and concatenate chunks back into the original file. Uses asynchronous I/O and parallel processing to maximize performance while optimizing memory usage. FileSplitter3 Provides methods to split a large file into smaller chunks and reassemble it efficiently. Utilizes parallel and asynchronous I/O to maximize performance and minimize memory usage. FileSplitter4 Provides methods to split a large file into smaller chunks and reassemble it efficiently. Utilizes parallel and asynchronous I/O to maximize performance and minimize memory usage. FileSplitter4.FileSplitter5 FileSplitterBenchmarks FileSplitterOptimized FileSplitterOriginal FileSplitterWithConcurrency"
  },
  "api/AdvanceFileUpload.Client.ChunkUploadedEventArgs.html": {
    "href": "api/AdvanceFileUpload.Client.ChunkUploadedEventArgs.html",
    "title": "Class ChunkUploadedEventArgs | Uploading File API",
    "keywords": "Class ChunkUploadedEventArgs Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Provides data for the ChunkUploaded event. public class ChunkUploadedEventArgs : EventArgs Inheritance object EventArgs ChunkUploadedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChunkUploadedEventArgs(Guid, int, long) Initializes a new instance of the ChunkUploadedEventArgs class. public ChunkUploadedEventArgs(Guid sessionId, int chunkIndex, long chunkSize) Parameters sessionId Guid The session ID associated with the uploaded chunk. chunkIndex int The index of the uploaded chunk. chunkSize long The size of the uploaded chunk. Properties ChunkIndex Gets the index of the uploaded chunk. public int ChunkIndex { get; } Property Value int ChunkSize Gets the size of the uploaded chunk. public long ChunkSize { get; } Property Value long SessionId Gets the session ID associated with the uploaded chunk. public Guid SessionId { get; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Client.ConnectionStatus.html": {
    "href": "api/AdvanceFileUpload.Client.ConnectionStatus.html",
    "title": "Enum ConnectionStatus | Uploading File API",
    "keywords": "Enum ConnectionStatus Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Represents the status of a connection. public enum ConnectionStatus Fields Degraded = 2 The connection is degraded. Healthy = 0 The connection is healthy. Timeout = 3 The connection has timed out. Unhealthy = 1 The connection is unhealthy."
  },
  "api/AdvanceFileUpload.Client.FileUploadService.html": {
    "href": "api/AdvanceFileUpload.Client.FileUploadService.html",
    "title": "Class FileUploadService | Uploading File API",
    "keywords": "Class FileUploadService Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Provides functionality to upload files with support for compression, chunking, and session management. public sealed class FileUploadService : IFileUploadService, IDisposable Inheritance object FileUploadService Implements IFileUploadService IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Note that the FileUploadService have been build to process a single upload request. if you want to upload multiple files at the same time, you need to create a new instance of the FileUploadService for each file. Constructors FileUploadService(Uri, UploadOptions) Initializes a new instance of the FileUploadService class. public FileUploadService(Uri apiBaseAddress, UploadOptions uploadOptions) Parameters apiBaseAddress Uri The base address of the API. uploadOptions UploadOptions The options for uploading files. Exceptions ArgumentNullException Thrown when apiBaseAddress or uploadOptions is null. Properties CanCancelSession Gets a value indicating whether the session can be canceled. public bool CanCancelSession { get; } Property Value bool CanPauseSession Gets a value indicating whether the session can be paused. public bool CanPauseSession { get; } Property Value bool CanResumeSession Gets a value indicating whether the session can be resumed. public bool CanResumeSession { get; } Property Value bool IsSessionCanceled Gets a value indicating whether the session is canceled. public bool IsSessionCanceled { get; } Property Value bool IsSessionCompleted Gets a value indicating whether the session is completed. public bool IsSessionCompleted { get; } Property Value bool IsSessionPaused Gets a value indicating whether the session is paused. public bool IsSessionPaused { get; } Property Value bool Methods CancelUploadAsync() Cancels the ongoing file upload asynchronously. public Task CancelUploadAsync() Returns Task A task that represents the asynchronous operation. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() PauseUploadAsync() Pauses the ongoing file upload asynchronously. public Task PauseUploadAsync() Returns Task A task that represents the asynchronous operation. ResumeUploadAsync() Resumes the paused file upload asynchronously. public Task ResumeUploadAsync() Returns Task A task that represents the asynchronous operation. UploadFileAsync(string) Uploads a file asynchronously. public Task UploadFileAsync(string filePath) Parameters filePath string The path of the file to be uploaded. Returns Task A task that represents the asynchronous operation. Remarks Throws an UploadException if the service is already processing an upload request. Exceptions UploadException Events ChunkUploaded Occurs when a chunk is uploaded. public event EventHandler<ChunkUploadedEventArgs>? ChunkUploaded Event Type EventHandler<ChunkUploadedEventArgs> FileCompressionCompleted Occurs when the file compression process completes. public event EventHandler? FileCompressionCompleted Event Type EventHandler FileCompressionStarted Occurs when the file compression process starts. public event EventHandler? FileCompressionStarted Event Type EventHandler FileSplittingCompleted Occurs when the file splitting process completes. public event EventHandler? FileSplittingCompleted Event Type EventHandler FileSplittingStarted Occurs when the file splitting process starts. public event EventHandler? FileSplittingStarted Event Type EventHandler NetworkError Occurs when a network error happens. public event EventHandler<string>? NetworkError Event Type EventHandler<string> SessionCanceled Occurs when the upload session is canceled. public event EventHandler<SessionCanceledEventArgs>? SessionCanceled Event Type EventHandler<SessionCanceledEventArgs> SessionCanceling Occurs when the upload session is canceling. public event EventHandler? SessionCanceling Event Type EventHandler SessionCompleted Occurs when the upload session is completed. public event EventHandler<SessionCompletedEventArgs>? SessionCompleted Event Type EventHandler<SessionCompletedEventArgs> SessionCompleting Occurs when the upload session is completing. public event EventHandler? SessionCompleting Event Type EventHandler SessionCreated Occurs when a new upload session is created. public event EventHandler<SessionCreatedEventArgs>? SessionCreated Event Type EventHandler<SessionCreatedEventArgs> SessionPaused Occurs when the upload session is paused. public event EventHandler<SessionPausedEventArgs>? SessionPaused Event Type EventHandler<SessionPausedEventArgs> SessionPausing Occurs when the upload session is pausing. public event EventHandler? SessionPausing Event Type EventHandler SessionResumed Occurs when the upload session is resumed. public event EventHandler<SessionResumedEventArgs>? SessionResumed Event Type EventHandler<SessionResumedEventArgs> SessionResuming Occurs when the upload session is resuming. public event EventHandler? SessionResuming Event Type EventHandler UploadError Occurs when an upload error happens. public event EventHandler<string>? UploadError Event Type EventHandler<string> UploadProgressChanged Occurs when the upload progress changes. public event EventHandler<UploadProgressChangedEventArgs>? UploadProgressChanged Event Type EventHandler<UploadProgressChangedEventArgs>"
  },
  "api/AdvanceFileUpload.Client.Helper.FileLogger.html": {
    "href": "api/AdvanceFileUpload.Client.Helper.FileLogger.html",
    "title": "Class FileLogger | Uploading File API",
    "keywords": "Class FileLogger Namespace AdvanceFileUpload.Client.Helper Assembly AdvanceFileUpload.Client.dll public class FileLogger : ILogger Inheritance object FileLogger Implements ILogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileLogger(string) public FileLogger(string path) Parameters path string Methods BeginScope<TState>(TState) Begins a logical operation scope. public IDisposable BeginScope<TState>(TState state) Parameters state TState The identifier for the scope. Returns IDisposable An IDisposable that ends the logical operation scope on dispose. Type Parameters TState The type of the state to begin scope for. IsEnabled(LogLevel) Checks if the given logLevel is enabled. public bool IsEnabled(LogLevel logLevel) Parameters logLevel LogLevel Level to be checked. Returns bool true if enabled. Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) Writes a log entry. public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter) Parameters logLevel LogLevel Entry will be written on this level. eventId EventId Id of the event. state TState The entry to be written. Can be also an object. exception Exception The exception related to this entry. formatter Func<TState, Exception, string> Function to create a string message of the state and exception. Type Parameters TState The type of the object to be written."
  },
  "api/AdvanceFileUpload.Client.Helper.FileLoggerExtensions.html": {
    "href": "api/AdvanceFileUpload.Client.Helper.FileLoggerExtensions.html",
    "title": "Class FileLoggerExtensions | Uploading File API",
    "keywords": "Class FileLoggerExtensions Namespace AdvanceFileUpload.Client.Helper Assembly AdvanceFileUpload.Client.dll public static class FileLoggerExtensions Inheritance object FileLoggerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddFile(ILoggerFactory, string) public static ILoggerFactory AddFile(this ILoggerFactory factory, string filePath) Parameters factory ILoggerFactory filePath string Returns ILoggerFactory"
  },
  "api/AdvanceFileUpload.Client.Helper.FileLoggerProvider.html": {
    "href": "api/AdvanceFileUpload.Client.Helper.FileLoggerProvider.html",
    "title": "Class FileLoggerProvider | Uploading File API",
    "keywords": "Class FileLoggerProvider Namespace AdvanceFileUpload.Client.Helper Assembly AdvanceFileUpload.Client.dll public class FileLoggerProvider : ILoggerProvider, IDisposable Inheritance object FileLoggerProvider Implements ILoggerProvider IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileLoggerProvider(string) public FileLoggerProvider(string _path) Parameters _path string Methods CreateLogger(string) Creates a new ILogger instance. public ILogger CreateLogger(string categoryName) Parameters categoryName string The category name for messages produced by the logger. Returns ILogger The instance of ILogger that was created. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/AdvanceFileUpload.Client.Helper.LoggerFactoryHelper.html": {
    "href": "api/AdvanceFileUpload.Client.Helper.LoggerFactoryHelper.html",
    "title": "Class LoggerFactoryHelper | Uploading File API",
    "keywords": "Class LoggerFactoryHelper Namespace AdvanceFileUpload.Client.Helper Assembly AdvanceFileUpload.Client.dll public static class LoggerFactoryHelper Inheritance object LoggerFactoryHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateLogger<T>() public static ILogger<T> CreateLogger<T>() Returns ILogger<T> Type Parameters T"
  },
  "api/AdvanceFileUpload.Client.Helper.html": {
    "href": "api/AdvanceFileUpload.Client.Helper.html",
    "title": "Namespace AdvanceFileUpload.Client.Helper | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Client.Helper Classes FileLogger FileLoggerExtensions FileLoggerProvider LoggerFactoryHelper"
  },
  "api/AdvanceFileUpload.Client.IFileUploadService.html": {
    "href": "api/AdvanceFileUpload.Client.IFileUploadService.html",
    "title": "Interface IFileUploadService | Uploading File API",
    "keywords": "Interface IFileUploadService Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Defines the contract for a file upload service. public interface IFileUploadService Properties CanCancelSession Gets a value indicating whether the session can be canceled. bool CanCancelSession { get; } Property Value bool CanPauseSession Gets a value indicating whether the session can be paused. bool CanPauseSession { get; } Property Value bool CanResumeSession Gets a value indicating whether the session can be resumed. bool CanResumeSession { get; } Property Value bool IsSessionCanceled Gets a value indicating whether the session is canceled. bool IsSessionCanceled { get; } Property Value bool IsSessionCompleted Gets a value indicating whether the session is completed. bool IsSessionCompleted { get; } Property Value bool IsSessionPaused Gets a value indicating whether the session is paused. bool IsSessionPaused { get; } Property Value bool Methods CancelUploadAsync() Cancels the ongoing file upload asynchronously. Task CancelUploadAsync() Returns Task A task that represents the asynchronous operation. PauseUploadAsync() Pauses the ongoing file upload asynchronously. Task PauseUploadAsync() Returns Task A task that represents the asynchronous operation. ResumeUploadAsync() Resumes the paused file upload asynchronously. Task ResumeUploadAsync() Returns Task A task that represents the asynchronous operation. UploadFileAsync(string) Uploads a file asynchronously. Task UploadFileAsync(string filePath) Parameters filePath string The path of the file to be uploaded. Returns Task A task that represents the asynchronous operation."
  },
  "api/AdvanceFileUpload.Client.INetworkConnectionChecker.html": {
    "href": "api/AdvanceFileUpload.Client.INetworkConnectionChecker.html",
    "title": "Interface INetworkConnectionChecker | Uploading File API",
    "keywords": "Interface INetworkConnectionChecker Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Defines methods to check the health of a network connection. public interface INetworkConnectionChecker : IDisposable Inherited Members IDisposable.Dispose() Methods CheckApiHealthAsync(CancellationToken) Checks the health of the API asynchronously. Task<ConnectionStatus> CheckApiHealthAsync(CancellationToken ct = default) Parameters ct CancellationToken A cancellation token that can be used to cancel the operation. Returns Task<ConnectionStatus> A task that represents the asynchronous operation. The task result contains the connection status."
  },
  "api/AdvanceFileUpload.Client.NetworkCheckOptions.html": {
    "href": "api/AdvanceFileUpload.Client.NetworkCheckOptions.html",
    "title": "Class NetworkCheckOptions | Uploading File API",
    "keywords": "Class NetworkCheckOptions Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Configuration options for the NetworkConnectionChecker. public class NetworkCheckOptions Inheritance object NetworkCheckOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BaseAddress Gets or sets the base address of the API. public required Uri BaseAddress { get; set; } Property Value Uri HealthEndpoint Gets or sets the health endpoint to check. public string HealthEndpoint { get; set; } Property Value string Method Gets or sets the HTTP method to use for the health check. public HttpMethod Method { get; set; } Property Value HttpMethod Timeout Gets or sets the timeout duration for the health check request. public TimeSpan Timeout { get; set; } Property Value TimeSpan UseHttp2 Gets or sets a value indicating whether to use HTTP/2 for the health check request. public bool UseHttp2 { get; set; } Property Value bool"
  },
  "api/AdvanceFileUpload.Client.NetworkConnectionChecker.html": {
    "href": "api/AdvanceFileUpload.Client.NetworkConnectionChecker.html",
    "title": "Class NetworkConnectionChecker | Uploading File API",
    "keywords": "Class NetworkConnectionChecker Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Checks the health of a network connection by sending HTTP requests to a specified endpoint. public sealed class NetworkConnectionChecker : INetworkConnectionChecker, IDisposable Inheritance object NetworkConnectionChecker Implements INetworkConnectionChecker IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkConnectionChecker(NetworkCheckOptions) Initializes a new instance of the NetworkConnectionChecker class. public NetworkConnectionChecker(NetworkCheckOptions networkCheckOptions) Parameters networkCheckOptions NetworkCheckOptions The options for configuring the network check. Methods CheckApiHealthAsync(CancellationToken) Checks the health of the API asynchronously. public Task<ConnectionStatus> CheckApiHealthAsync(CancellationToken ct = default) Parameters ct CancellationToken A cancellation token that can be used to cancel the operation. Returns Task<ConnectionStatus> A task that represents the asynchronous operation. The task result contains the connection status. Dispose() Disposes the HTTP client. public void Dispose()"
  },
  "api/AdvanceFileUpload.Client.SessionCanceledEventArgs.html": {
    "href": "api/AdvanceFileUpload.Client.SessionCanceledEventArgs.html",
    "title": "Class SessionCanceledEventArgs | Uploading File API",
    "keywords": "Class SessionCanceledEventArgs Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Provides data for the session canceled event. public class SessionCanceledEventArgs : EventArgs Inheritance object EventArgs SessionCanceledEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SessionCanceledEventArgs(Guid, string, long) Initializes a new instance of the SessionCanceledEventArgs class. public SessionCanceledEventArgs(Guid sessionId, string fileName, long fileSize) Parameters sessionId Guid The unique identifier for the session. fileName string The name of the file associated with the session. fileSize long The size of the file associated with the session. Properties FileName Gets the name of the file associated with the session. public string FileName { get; } Property Value string FileSize Gets the size of the file associated with the session. public long FileSize { get; } Property Value long SessionId Gets the unique identifier for the session. public Guid SessionId { get; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Client.SessionCompletedEventArgs.html": {
    "href": "api/AdvanceFileUpload.Client.SessionCompletedEventArgs.html",
    "title": "Class SessionCompletedEventArgs | Uploading File API",
    "keywords": "Class SessionCompletedEventArgs Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Provides data for the session completed event. public class SessionCompletedEventArgs : EventArgs Inheritance object EventArgs SessionCompletedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SessionCompletedEventArgs(Guid, string, long) Initializes a new instance of the SessionCompletedEventArgs class. public SessionCompletedEventArgs(Guid sessionId, string fileName, long fileSize) Parameters sessionId Guid The unique identifier for the session. fileName string The name of the file that was uploaded. fileSize long The size of the file that was uploaded. Properties FileName Gets the name of the file that was uploaded. public string FileName { get; } Property Value string FileSize Gets the size of the file that was uploaded. public long FileSize { get; } Property Value long SessionId Gets the unique identifier for the session. public Guid SessionId { get; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Client.SessionCreatedEventArgs.html": {
    "href": "api/AdvanceFileUpload.Client.SessionCreatedEventArgs.html",
    "title": "Class SessionCreatedEventArgs | Uploading File API",
    "keywords": "Class SessionCreatedEventArgs Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll public class SessionCreatedEventArgs : EventArgs Inheritance object EventArgs SessionCreatedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long MaxChunkSize Gets the maximum size of each chunk. public long MaxChunkSize { get; init; } Property Value long SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid SessionStartDate Gets the start date and time of the upload session. public DateTime SessionStartDate { get; init; } Property Value DateTime TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; init; } Property Value int UploadStatus Gets the current status of the upload session. public UploadStatus UploadStatus { get; init; } Property Value UploadStatus Methods Create(CreateUploadSessionResponse) Creates a new instance of SessionCreatedEventArgs from the given CreateUploadSessionResponse. public static SessionCreatedEventArgs Create(CreateUploadSessionResponse createUploadSessionResponse) Parameters createUploadSessionResponse CreateUploadSessionResponse The response containing the details of the created upload session. Returns SessionCreatedEventArgs A new instance of SessionCreatedEventArgs."
  },
  "api/AdvanceFileUpload.Client.SessionPausedEventArgs.html": {
    "href": "api/AdvanceFileUpload.Client.SessionPausedEventArgs.html",
    "title": "Class SessionPausedEventArgs | Uploading File API",
    "keywords": "Class SessionPausedEventArgs Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Provides data for the session paused event. public class SessionPausedEventArgs : EventArgs Inheritance object EventArgs SessionPausedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SessionPausedEventArgs(Guid, string, long) Initializes a new instance of the SessionPausedEventArgs class. public SessionPausedEventArgs(Guid sessionId, string fileName, long fileSize) Parameters sessionId Guid The unique identifier for the session. fileName string The name of the file being uploaded. fileSize long The size of the file being uploaded. Properties FileName Gets the name of the file being uploaded. public string FileName { get; } Property Value string FileSize Gets the size of the file being uploaded. public long FileSize { get; } Property Value long SessionId Gets the unique identifier for the session. public Guid SessionId { get; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Client.SessionResumedEventArgs.html": {
    "href": "api/AdvanceFileUpload.Client.SessionResumedEventArgs.html",
    "title": "Class SessionResumedEventArgs | Uploading File API",
    "keywords": "Class SessionResumedEventArgs Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Provides data for the session resumed event. public class SessionResumedEventArgs : EventArgs Inheritance object EventArgs SessionResumedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SessionResumedEventArgs(Guid, string, long) Initializes a new instance of the SessionResumedEventArgs class. public SessionResumedEventArgs(Guid sessionId, string fileName, long fileSize) Parameters sessionId Guid The unique identifier for the session. fileName string The name of the file being uploaded. fileSize long The size of the file being uploaded. Properties FileName Gets the name of the file being uploaded. public string FileName { get; } Property Value string FileSize Gets the size of the file being uploaded. public long FileSize { get; } Property Value long SessionId Gets the unique identifier for the session. public Guid SessionId { get; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Client.UploadException.html": {
    "href": "api/AdvanceFileUpload.Client.UploadException.html",
    "title": "Class UploadException | Uploading File API",
    "keywords": "Class UploadException Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Represents errors that occur during file upload operations. public class UploadException : Exception, ISerializable Inheritance object Exception UploadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UploadException(SerializationInfo, StreamingContext) Initializes a new instance of the UploadException class with serialized data. protected UploadException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The SerializationInfo that holds the serialized object data about the exception being thrown. context StreamingContext The StreamingContext that contains contextual information about the source or destination. UploadException(string?) Initializes a new instance of the UploadException class with a specified error message. public UploadException(string? message) Parameters message string The message that describes the error. UploadException(string?, Exception?) Initializes a new instance of the UploadException class with a specified error message and a reference to the inner exception that is the cause of this exception. public UploadException(string? message, Exception? innerException) Parameters message string The message that describes the error. innerException Exception The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "api/AdvanceFileUpload.Client.UploadOptions.html": {
    "href": "api/AdvanceFileUpload.Client.UploadOptions.html",
    "title": "Class UploadOptions | Uploading File API",
    "keywords": "Class UploadOptions Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Represents the options for uploading files, including compression settings, excluded file extensions, temporary directory, maximum concurrent uploads, and maximum retry count. public class UploadOptions Inheritance object UploadOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CompressionOption Gets or sets the compression option for the file upload. public CompressionOption? CompressionOption { get; set; } Property Value CompressionOption ExcludedCompressionExtensions Gets the list of file extensions that should not be compressed. public List<string> ExcludedCompressionExtensions { get; init; } Property Value List<string> MaxConcurrentUploads Gets or sets the maximum number of concurrent uploads. Default is 4. public int MaxConcurrentUploads { get; set; } Property Value int MaxRetriesCount Gets or sets the maximum number of retry attempts for failed uploads. Default is 3. public int MaxRetriesCount { get; set; } Property Value int TempDirectory Gets or sets the temporary directory used for file uploads. public string TempDirectory { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.Client.UploadProgressChangedEventArgs.html": {
    "href": "api/AdvanceFileUpload.Client.UploadProgressChangedEventArgs.html",
    "title": "Class UploadProgressChangedEventArgs | Uploading File API",
    "keywords": "Class UploadProgressChangedEventArgs Namespace AdvanceFileUpload.Client Assembly AdvanceFileUpload.Client.dll Provides data when the upload progress changes. public class UploadProgressChangedEventArgs : EventArgs Inheritance object EventArgs UploadProgressChangedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long MaxChunkSize Gets the maximum size of each chunk. public long MaxChunkSize { get; init; } Property Value long ProgressPercentage Gets the progress percentage of the file upload. public double ProgressPercentage { get; init; } Property Value double RemainChunks Gets the list of remaining chunks to be uploaded. public List<int>? RemainChunks { get; init; } Property Value List<int> SessionEndDate Gets the end date and time of the upload session, if it has ended. public DateTime? SessionEndDate { get; init; } Property Value DateTime? SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid SessionStartDate Gets the start date and time of the upload session. public DateTime SessionStartDate { get; init; } Property Value DateTime TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; init; } Property Value int TotalUploadedChunks Gets the total number of chunks that have been uploaded. public int TotalUploadedChunks { get; init; } Property Value int UploadStatus Gets the current status of the upload session. public UploadStatus UploadStatus { get; init; } Property Value UploadStatus Methods Create(UploadSessionStatusNotification) Creates a new instance of the UploadProgressChangedEventArgs class from the specified UploadSessionStatusNotification. public static UploadProgressChangedEventArgs Create(UploadSessionStatusNotification uploadSessionStatusNotification) Parameters uploadSessionStatusNotification UploadSessionStatusNotification The upload session status notification. Returns UploadProgressChangedEventArgs A new instance of the UploadProgressChangedEventArgs class."
  },
  "api/AdvanceFileUpload.Client.html": {
    "href": "api/AdvanceFileUpload.Client.html",
    "title": "Namespace AdvanceFileUpload.Client | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Client Classes ChunkUploadedEventArgs Provides data for the ChunkUploaded event. FileUploadService Provides functionality to upload files with support for compression, chunking, and session management. NetworkCheckOptions Configuration options for the NetworkConnectionChecker. NetworkConnectionChecker Checks the health of a network connection by sending HTTP requests to a specified endpoint. SessionCanceledEventArgs Provides data for the session canceled event. SessionCompletedEventArgs Provides data for the session completed event. SessionCreatedEventArgs SessionPausedEventArgs Provides data for the session paused event. SessionResumedEventArgs Provides data for the session resumed event. UploadException Represents errors that occur during file upload operations. UploadOptions Represents the options for uploading files, including compression settings, excluded file extensions, temporary directory, maximum concurrent uploads, and maximum retry count. UploadProgressChangedEventArgs Provides data when the upload progress changes. Interfaces IFileUploadService Defines the contract for a file upload service. INetworkConnectionChecker Defines methods to check the health of a network connection. Enums ConnectionStatus Represents the status of a connection."
  },
  "api/AdvanceFileUpload.Data.ApploicationDbContext.html": {
    "href": "api/AdvanceFileUpload.Data.ApploicationDbContext.html",
    "title": "Class ApploicationDbContext | Uploading File API",
    "keywords": "Class ApploicationDbContext Namespace AdvanceFileUpload.Data Assembly AdvanceFileUpload.Data.dll public class ApploicationDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext ApploicationDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApploicationDbContext(DbContextOptions<ApploicationDbContext>) public ApploicationDbContext(DbContextOptions<ApploicationDbContext> options) Parameters options DbContextOptions<ApploicationDbContext> Properties FileUploadSessions public DbSet<FileUploadSession> FileUploadSessions { get; set; } Property Value DbSet<FileUploadSession> Methods OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples."
  },
  "api/AdvanceFileUpload.Data.DesignTimeDbContextFactory.html": {
    "href": "api/AdvanceFileUpload.Data.DesignTimeDbContextFactory.html",
    "title": "Class DesignTimeDbContextFactory | Uploading File API",
    "keywords": "Class DesignTimeDbContextFactory Namespace AdvanceFileUpload.Data Assembly AdvanceFileUpload.Data.dll public class DesignTimeDbContextFactory : IDesignTimeDbContextFactory<ApploicationDbContext> Inheritance object DesignTimeDbContextFactory Implements IDesignTimeDbContextFactory<ApploicationDbContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateDbContext(string[]) Creates a new instance of a derived context. public ApploicationDbContext CreateDbContext(string[] args) Parameters args string[] Arguments provided by the design-time service. Returns ApploicationDbContext An instance of ApploicationDbContext."
  },
  "api/AdvanceFileUpload.Data.FileUploadSessionRepository.html": {
    "href": "api/AdvanceFileUpload.Data.FileUploadSessionRepository.html",
    "title": "Class FileUploadSessionRepository | Uploading File API",
    "keywords": "Class FileUploadSessionRepository Namespace AdvanceFileUpload.Data Assembly AdvanceFileUpload.Data.dll Represents a repository for managing file upload session entities. public class FileUploadSessionRepository : IRepository<FileUploadSession> Inheritance object FileUploadSessionRepository Implements IRepository<FileUploadSession> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionRepository(ApploicationDbContext, ILogger<FileUploadSessionRepository>) Initializes a new instance of the FileUploadSessionRepository class. public FileUploadSessionRepository(ApploicationDbContext context, ILogger<FileUploadSessionRepository> logger) Parameters context ApploicationDbContext The Application Db Context logger ILogger<FileUploadSessionRepository> Exceptions ArgumentNullException Methods AddAsync(FileUploadSession, CancellationToken) Asynchronously adds a new entity to the repository. public Task<FileUploadSession> AddAsync(FileUploadSession entity, CancellationToken cancellationToken = default) Parameters entity FileUploadSession The entity to add. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<FileUploadSession> A task that represents the asynchronous operation. The task result contains the added entity. AnyAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken) Asynchronously determines whether any entities match the specified predicate. public Task<bool> AnyAsync(Expression<Func<FileUploadSession, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<FileUploadSession, bool>> The expression to filter entities. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<bool> A task that represents the asynchronous operation. The task result is true if any matching entities exist; otherwise, false. AnyAsync(CancellationToken) Asynchronously determines whether any entities exist in the repository. public Task<bool> AnyAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<bool> A task that represents the asynchronous operation. The task result is true if any entities exist; otherwise, false. CountAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken) Asynchronously counts the number of entities that match the specified predicate. public Task<int> CountAsync(Expression<Func<FileUploadSession, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<FileUploadSession, bool>> The expression to filter entities. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<int> A task that represents the asynchronous operation. The task result contains the count of matching entities. CountAsync(CancellationToken) Asynchronously counts the total number of entities in the repository. public Task<int> CountAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<int> A task that represents the asynchronous operation. The task result contains the count of entities. FindAsync(Expression<Func<FileUploadSession, bool>>, CancellationToken) Asynchronously finds entities that match the specified predicate. public Task<IEnumerable<FileUploadSession>> FindAsync(Expression<Func<FileUploadSession, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<FileUploadSession, bool>> The expression to filter entities. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<IEnumerable<FileUploadSession>> A task that represents the asynchronous operation. The task result contains a collection of matching entities. GetAllAsync(CancellationToken) Asynchronously retrieves all entities from the repository. public Task<IEnumerable<FileUploadSession>> GetAllAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<IEnumerable<FileUploadSession>> A task that represents the asynchronous operation. The task result contains a collection of all entities. GetByIdAsync(Guid, CancellationToken) Asynchronously retrieves an entity by its unique identifier. public Task<FileUploadSession?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default) Parameters id Guid The unique identifier of the entity. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<FileUploadSession> A task that represents the asynchronous operation. The task result contains the entity if found. RemoveAsync(FileUploadSession, CancellationToken) Asynchronously removes an entity from the repository. public Task<bool> RemoveAsync(FileUploadSession entity, CancellationToken cancellationToken = default) Parameters entity FileUploadSession The entity to remove. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<bool> A task that represents the asynchronous operation. UpdateAsync(FileUploadSession, CancellationToken) Asynchronously updates an existing entity in the repository. public Task<FileUploadSession> UpdateAsync(FileUploadSession entity, CancellationToken cancellationToken = default) Parameters entity FileUploadSession The entity with updated values. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<FileUploadSession> A task that represents the asynchronous operation. The task result contains the updated entity."
  },
  "api/AdvanceFileUpload.Data.Migrations.AddConcurrencyToken.html": {
    "href": "api/AdvanceFileUpload.Data.Migrations.AddConcurrencyToken.html",
    "title": "Class AddConcurrencyToken | Uploading File API",
    "keywords": "Class AddConcurrencyToken Namespace AdvanceFileUpload.Data.Migrations Assembly AdvanceFileUpload.Data.dll A base class inherited by each EF Core migration. [DbContext(typeof(ApploicationDbContext))] [Migration(\"20250320023148_AddConcurrencyToken\")] public class AddConcurrencyToken : Migration Inheritance object Migration AddConcurrencyToken Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/AdvanceFileUpload.Data.Migrations.AddRowVersion.html": {
    "href": "api/AdvanceFileUpload.Data.Migrations.AddRowVersion.html",
    "title": "Class AddRowVersion | Uploading File API",
    "keywords": "Class AddRowVersion Namespace AdvanceFileUpload.Data.Migrations Assembly AdvanceFileUpload.Data.dll A base class inherited by each EF Core migration. [DbContext(typeof(ApploicationDbContext))] [Migration(\"20250320024432_AddRowVersion\")] public class AddRowVersion : Migration Inheritance object Migration AddRowVersion Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/AdvanceFileUpload.Data.Migrations.InitialCreate.html": {
    "href": "api/AdvanceFileUpload.Data.Migrations.InitialCreate.html",
    "title": "Class InitialCreate | Uploading File API",
    "keywords": "Class InitialCreate Namespace AdvanceFileUpload.Data.Migrations Assembly AdvanceFileUpload.Data.dll A base class inherited by each EF Core migration. [DbContext(typeof(ApploicationDbContext))] [Migration(\"20250320011620_InitialCreate\")] public class InitialCreate : Migration Inheritance object Migration InitialCreate Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/AdvanceFileUpload.Data.Migrations.html": {
    "href": "api/AdvanceFileUpload.Data.Migrations.html",
    "title": "Namespace AdvanceFileUpload.Data.Migrations | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Data.Migrations Classes AddConcurrencyToken A base class inherited by each EF Core migration. AddRowVersion A base class inherited by each EF Core migration. InitialCreate A base class inherited by each EF Core migration."
  },
  "api/AdvanceFileUpload.Data.ServiceConfiguration.html": {
    "href": "api/AdvanceFileUpload.Data.ServiceConfiguration.html",
    "title": "Class ServiceConfiguration | Uploading File API",
    "keywords": "Class ServiceConfiguration Namespace AdvanceFileUpload.Data Assembly AdvanceFileUpload.Data.dll Provides methods to configure data services for the application. public static class ServiceConfiguration Inheritance object ServiceConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigureDataServices(IServiceCollection, string?) Configures the data services for the application. public static void ConfigureDataServices(this IServiceCollection services, string? connectionString) Parameters services IServiceCollection The service collection to add the services to. connectionString string The connection string for the database."
  },
  "api/AdvanceFileUpload.Data.html": {
    "href": "api/AdvanceFileUpload.Data.html",
    "title": "Namespace AdvanceFileUpload.Data | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Data Classes ApploicationDbContext DesignTimeDbContextFactory FileUploadSessionRepository Represents a repository for managing file upload session entities. ServiceConfiguration Provides methods to configure data services for the application."
  },
  "api/AdvanceFileUpload.Domain.ChunkFile.html": {
    "href": "api/AdvanceFileUpload.Domain.ChunkFile.html",
    "title": "Class ChunkFile | Uploading File API",
    "keywords": "Class ChunkFile Namespace AdvanceFileUpload.Domain Assembly AdvanceFileUpload.Domain.dll Represents a chunk file in a file upload session. public sealed class ChunkFile Inheritance object ChunkFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ChunkIndex Gets the index of the chunk. public int ChunkIndex { get; } Property Value int ChunkPath Gets the path of the chunk file. public string ChunkPath { get; } Property Value string ChunkSize Gets the size of the chunk file. public long ChunkSize { get; } Property Value long SessionId Gets the session identifier to which this chunk belongs. public Guid SessionId { get; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Domain.CompressionAlgorithm.html": {
    "href": "api/AdvanceFileUpload.Domain.CompressionAlgorithm.html",
    "title": "Enum CompressionAlgorithm | Uploading File API",
    "keywords": "Enum CompressionAlgorithm Namespace AdvanceFileUpload.Domain Assembly AdvanceFileUpload.Domain.dll Specifies the compression algorithms. public enum CompressionAlgorithm Fields Brotli = 2 Brotli compression algorithm. Benefits: High compression ratio, especially for web content, better than GZip in many cases. Deflate = 1 Deflate compression algorithm. Benefits: Fast compression and decompression, good for real-time applications. GZip = 0 GZip compression algorithm. Benefits: Good compression ratio and speed, widely supported."
  },
  "api/AdvanceFileUpload.Domain.CompressionLevel.html": {
    "href": "api/AdvanceFileUpload.Domain.CompressionLevel.html",
    "title": "Enum CompressionLevel | Uploading File API",
    "keywords": "Enum CompressionLevel Namespace AdvanceFileUpload.Domain Assembly AdvanceFileUpload.Domain.dll Specifies values that indicate whether a compression operation emphasizes speed or compression size. public enum CompressionLevel Fields Fastest = 1 The compression operation should complete as quickly as possible, even if the resulting file is not optimally compressed. NoCompression = 2 No compression should be performed on the file. Optimal = 0 The compression operation should optimally balance compression speed and output size. SmallestSize = 3 The compression operation should create output as small as possible, even if the operation takes a longer time to complete."
  },
  "api/AdvanceFileUpload.Domain.Core.DomainEventBase.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.DomainEventBase.html",
    "title": "Class DomainEventBase | Uploading File API",
    "keywords": "Class DomainEventBase Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Represents the base class for all domain events. public abstract class DomainEventBase : IDomainEvent, INotification Inheritance object DomainEventBase Implements IDomainEvent INotification Derived ChunkUploadedEvent FileUploadSessionCanceledEvent FileUploadSessionCompletedEvent FileUploadSessionCreatedEvent FileUploadSessionPausedEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DomainEventBase() Initializes a new instance of the DomainEventBase class. protected DomainEventBase() Properties Id Gets the unique identifier of the domain event. public Guid Id { get; } Property Value Guid OccurredOn Gets the date and time when the event occurred. public DateTime OccurredOn { get; } Property Value DateTime"
  },
  "api/AdvanceFileUpload.Domain.Core.DomainException.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.DomainException.html",
    "title": "Class DomainException | Uploading File API",
    "keywords": "Class DomainException Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Represents errors that occur during domain operations. public class DomainException : Exception, ISerializable Inheritance object Exception DomainException Implements ISerializable Derived CancelationFileUploadException ChunkUploadingException CompletingFileUploadException PauseFileUploadException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DomainException(string?) Initializes a new instance of the DomainException class with a specified error message. public DomainException(string? message) Parameters message string The message that describes the error. DomainException(string?, Exception?) Initializes a new instance of the DomainException class with a specified error message and a reference to the inner exception that is the cause of this exception. public DomainException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception."
  },
  "api/AdvanceFileUpload.Domain.Core.EntityBase.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.EntityBase.html",
    "title": "Class EntityBase | Uploading File API",
    "keywords": "Class EntityBase Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Represents the base class for all entities in the domain. public abstract class EntityBase Inheritance object EntityBase Derived FileUploadSession Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EntityBase() Initializes a new instance of the EntityBase class. protected EntityBase() Properties DomainEvents Gets the domain events associated with the entity. public IReadOnlyCollection<IDomainEvent> DomainEvents { get; } Property Value IReadOnlyCollection<IDomainEvent> Id Gets the unique identifier for the entity. public Guid Id { get; protected set; } Property Value Guid Methods AddDomainEvent(IDomainEvent) Adds a domain event to the entity. protected void AddDomainEvent(IDomainEvent domainEvent) Parameters domainEvent IDomainEvent The domain event to add. ClearDomainEvents() Clears all domain events from the entity. public void ClearDomainEvents() Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(EntityBase, EntityBase) Determines whether two instances of EntityBase are equal. public static bool operator ==(EntityBase left, EntityBase right) Parameters left EntityBase The left instance to compare. right EntityBase The right instance to compare. Returns bool True if the instances are equal; otherwise, false. operator !=(EntityBase, EntityBase) Determines whether two instances of EntityBase are not equal. public static bool operator !=(EntityBase left, EntityBase right) Parameters left EntityBase The left instance to compare. right EntityBase The right instance to compare. Returns bool True if the instances are not equal; otherwise, false."
  },
  "api/AdvanceFileUpload.Domain.Core.IAggregateRoot.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.IAggregateRoot.html",
    "title": "Interface IAggregateRoot | Uploading File API",
    "keywords": "Interface IAggregateRoot Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Marker interface to indicate that an entity is an aggregate root. public interface IAggregateRoot"
  },
  "api/AdvanceFileUpload.Domain.Core.IDomainEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.IDomainEvent.html",
    "title": "Interface IDomainEvent | Uploading File API",
    "keywords": "Interface IDomainEvent Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Represents a domain event within the system. public interface IDomainEvent : INotification Properties Id Gets the unique identifier of the domain event. Guid Id { get; } Property Value Guid OccurredOn Gets the date and time when the event occurred. DateTime OccurredOn { get; } Property Value DateTime"
  },
  "api/AdvanceFileUpload.Domain.Core.IDomainEventPublisher.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.IDomainEventPublisher.html",
    "title": "Interface IDomainEventPublisher | Uploading File API",
    "keywords": "Interface IDomainEventPublisher Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Defines a contract for publishing domain events. public interface IDomainEventPublisher Methods PublishAsync(IDomainEvent, CancellationToken) Publishes a single domain event asynchronously. Task PublishAsync(IDomainEvent domainEvent, CancellationToken cancellationToken = default) Parameters domainEvent IDomainEvent The domain event to be published. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation. PublishAsync(IEnumerable<IDomainEvent>, CancellationToken) Publishes multiple domain events asynchronously. Task PublishAsync(IEnumerable<IDomainEvent> domainEvents, CancellationToken cancellationToken = default) Parameters domainEvents IEnumerable<IDomainEvent> The collection of domain events to be published. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation."
  },
  "api/AdvanceFileUpload.Domain.Core.IRepository-1.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.IRepository-1.html",
    "title": "Interface IRepository<TEntity> | Uploading File API",
    "keywords": "Interface IRepository<TEntity> Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Defines a generic repository interface for performing CRUD operations on entities. public interface IRepository<TEntity> where TEntity : IAggregateRoot Type Parameters TEntity The type of the entity. Methods AddAsync(TEntity, CancellationToken) Asynchronously adds a new entity to the repository. Task<TEntity> AddAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity to add. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<TEntity> A task that represents the asynchronous operation. The task result contains the added entity. AnyAsync(Expression<Func<TEntity, bool>>, CancellationToken) Asynchronously determines whether any entities match the specified predicate. Task<bool> AnyAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<TEntity, bool>> The expression to filter entities. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<bool> A task that represents the asynchronous operation. The task result is true if any matching entities exist; otherwise, false. AnyAsync(CancellationToken) Asynchronously determines whether any entities exist in the repository. Task<bool> AnyAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<bool> A task that represents the asynchronous operation. The task result is true if any entities exist; otherwise, false. CountAsync(Expression<Func<TEntity, bool>>, CancellationToken) Asynchronously counts the number of entities that match the specified predicate. Task<int> CountAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<TEntity, bool>> The expression to filter entities. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<int> A task that represents the asynchronous operation. The task result contains the count of matching entities. CountAsync(CancellationToken) Asynchronously counts the total number of entities in the repository. Task<int> CountAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<int> A task that represents the asynchronous operation. The task result contains the count of entities. FindAsync(Expression<Func<TEntity, bool>>, CancellationToken) Asynchronously finds entities that match the specified predicate. Task<IEnumerable<TEntity>> FindAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<TEntity, bool>> The expression to filter entities. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<IEnumerable<TEntity>> A task that represents the asynchronous operation. The task result contains a collection of matching entities. GetAllAsync(CancellationToken) Asynchronously retrieves all entities from the repository. Task<IEnumerable<TEntity>> GetAllAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<IEnumerable<TEntity>> A task that represents the asynchronous operation. The task result contains a collection of all entities. GetByIdAsync(Guid, CancellationToken) Asynchronously retrieves an entity by its unique identifier. Task<TEntity?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default) Parameters id Guid The unique identifier of the entity. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<TEntity> A task that represents the asynchronous operation. The task result contains the entity if found. RemoveAsync(TEntity, CancellationToken) Asynchronously removes an entity from the repository. Task<bool> RemoveAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity to remove. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<bool> A task that represents the asynchronous operation. UpdateAsync(TEntity, CancellationToken) Asynchronously updates an existing entity in the repository. Task<TEntity> UpdateAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity with updated values. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<TEntity> A task that represents the asynchronous operation. The task result contains the updated entity."
  },
  "api/AdvanceFileUpload.Domain.Core.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.html",
    "title": "Namespace AdvanceFileUpload.Domain.Core | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Domain.Core Classes DomainEventBase Represents the base class for all domain events. DomainException Represents errors that occur during domain operations. EntityBase Represents the base class for all entities in the domain. Interfaces IAggregateRoot Marker interface to indicate that an entity is an aggregate root. IDomainEvent Represents a domain event within the system. IDomainEventPublisher Defines a contract for publishing domain events. IRepository<TEntity> Defines a generic repository interface for performing CRUD operations on entities."
  },
  "api/AdvanceFileUpload.Domain.Events.ChunkUploadedEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.ChunkUploadedEvent.html",
    "title": "Class ChunkUploadedEvent | Uploading File API",
    "keywords": "Class ChunkUploadedEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll Event that is triggered when a chunk of a file is uploaded. public sealed class ChunkUploadedEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase ChunkUploadedEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ChunkUploadedEvent(ChunkFile) Initializes a new instance of the ChunkUploadedEvent class. public ChunkUploadedEvent(ChunkFile chunkFile) Parameters chunkFile ChunkFile The chunk file that has been uploaded. Exceptions ArgumentNullException Thrown when the chunk file is null. Properties ChunkFile Gets the chunk file associated with this event. public ChunkFile ChunkFile { get; } Property Value ChunkFile"
  },
  "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCanceledEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCanceledEvent.html",
    "title": "Class FileUploadSessionCanceledEvent | Uploading File API",
    "keywords": "Class FileUploadSessionCanceledEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll Event that is triggered when a file upload session is canceled. public sealed class FileUploadSessionCanceledEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase FileUploadSessionCanceledEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionCanceledEvent(FileUploadSession) Initializes a new instance of the FileUploadSessionCanceledEvent class. public FileUploadSessionCanceledEvent(FileUploadSession fileUploadSession) Parameters fileUploadSession FileUploadSession The file upload session that has been canceled. Exceptions ArgumentNullException Thrown when the file upload session is null. Properties FileUploadSession Gets the file upload session associated with this event. public FileUploadSession FileUploadSession { get; } Property Value FileUploadSession"
  },
  "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCompletedEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCompletedEvent.html",
    "title": "Class FileUploadSessionCompletedEvent | Uploading File API",
    "keywords": "Class FileUploadSessionCompletedEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll Event that is triggered when a file upload session is completed. public sealed class FileUploadSessionCompletedEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase FileUploadSessionCompletedEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionCompletedEvent(FileUploadSession) Initializes a new instance of the FileUploadSessionCompletedEvent class. public FileUploadSessionCompletedEvent(FileUploadSession fileUploadSession) Parameters fileUploadSession FileUploadSession The file upload session that has been completed. Exceptions ArgumentNullException Thrown when the file upload session is null. Properties FileUploadSession Gets the file upload session associated with this event. public FileUploadSession FileUploadSession { get; } Property Value FileUploadSession"
  },
  "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCreatedEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCreatedEvent.html",
    "title": "Class FileUploadSessionCreatedEvent | Uploading File API",
    "keywords": "Class FileUploadSessionCreatedEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll Event that is triggered when a file upload session Created. public sealed class FileUploadSessionCreatedEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase FileUploadSessionCreatedEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionCreatedEvent(FileUploadSession) Initializes a new instance of the FileUploadSessionCreatedEvent class. public FileUploadSessionCreatedEvent(FileUploadSession fileUploadSession) Parameters fileUploadSession FileUploadSession The file upload session that has Created. Exceptions ArgumentNullException Thrown when the file upload session is null. Properties FileUploadSession Gets the file upload session associated with this event. public FileUploadSession FileUploadSession { get; } Property Value FileUploadSession"
  },
  "api/AdvanceFileUpload.Domain.Events.FileUploadSessionPausedEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.FileUploadSessionPausedEvent.html",
    "title": "Class FileUploadSessionPausedEvent | Uploading File API",
    "keywords": "Class FileUploadSessionPausedEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll Event that is triggered when a file upload session is paused. public sealed class FileUploadSessionPausedEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase FileUploadSessionPausedEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionPausedEvent(FileUploadSession) Initializes a new instance of the FileUploadSessionPausedEvent class. public FileUploadSessionPausedEvent(FileUploadSession fileUploadSession) Parameters fileUploadSession FileUploadSession The file upload session that has been paused. Exceptions ArgumentNullException Thrown when the file upload session is null. Properties FileUploadSession Gets the file upload session associated with this event. public FileUploadSession FileUploadSession { get; } Property Value FileUploadSession"
  },
  "api/AdvanceFileUpload.Domain.Events.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.html",
    "title": "Namespace AdvanceFileUpload.Domain.Events | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Domain.Events Classes ChunkUploadedEvent Event that is triggered when a chunk of a file is uploaded. FileUploadSessionCanceledEvent Event that is triggered when a file upload session is canceled. FileUploadSessionCompletedEvent Event that is triggered when a file upload session is completed. FileUploadSessionCreatedEvent Event that is triggered when a file upload session Created. FileUploadSessionPausedEvent Event that is triggered when a file upload session is paused."
  },
  "api/AdvanceFileUpload.Domain.Exception.CancelationFileUploadException.html": {
    "href": "api/AdvanceFileUpload.Domain.Exception.CancelationFileUploadException.html",
    "title": "Class CancelationFileUploadException | Uploading File API",
    "keywords": "Class CancelationFileUploadException Namespace AdvanceFileUpload.Domain.Exception Assembly AdvanceFileUpload.Domain.dll Represents errors that occur during the cancellation of a file upload. public class CancelationFileUploadException : DomainException, ISerializable Inheritance object Exception DomainException CancelationFileUploadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CancelationFileUploadException(string?) Initializes a new instance of the CancelationFileUploadException class with a specified error message. public CancelationFileUploadException(string? message) Parameters message string The message that describes the error. CancelationFileUploadException(string?, Exception?) Initializes a new instance of the CancelationFileUploadException class with a specified error message and a reference to the inner exception that is the cause of this exception. public CancelationFileUploadException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception."
  },
  "api/AdvanceFileUpload.Domain.Exception.ChunkUploadingException.html": {
    "href": "api/AdvanceFileUpload.Domain.Exception.ChunkUploadingException.html",
    "title": "Class ChunkUploadingException | Uploading File API",
    "keywords": "Class ChunkUploadingException Namespace AdvanceFileUpload.Domain.Exception Assembly AdvanceFileUpload.Domain.dll Represents errors that occur during the uploading of file chunks. public class ChunkUploadingException : DomainException, ISerializable Inheritance object Exception DomainException ChunkUploadingException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ChunkUploadingException(string?) Initializes a new instance of the ChunkUploadingException class with a specified error message. public ChunkUploadingException(string? message) Parameters message string The message that describes the error. ChunkUploadingException(string?, Exception?) Initializes a new instance of the ChunkUploadingException class with a specified error message and a reference to the inner exception that is the cause of this exception. public ChunkUploadingException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception."
  },
  "api/AdvanceFileUpload.Domain.Exception.CompletingFileUploadException.html": {
    "href": "api/AdvanceFileUpload.Domain.Exception.CompletingFileUploadException.html",
    "title": "Class CompletingFileUploadException | Uploading File API",
    "keywords": "Class CompletingFileUploadException Namespace AdvanceFileUpload.Domain.Exception Assembly AdvanceFileUpload.Domain.dll Represents errors that occur during the completion of a file upload. public class CompletingFileUploadException : DomainException, ISerializable Inheritance object Exception DomainException CompletingFileUploadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CompletingFileUploadException(string?) Initializes a new instance of the CompletingFileUploadException class with a specified error message. public CompletingFileUploadException(string? message) Parameters message string The message that describes the error. CompletingFileUploadException(string?, Exception?) Initializes a new instance of the CompletingFileUploadException class with a specified error message and a reference to the inner exception that is the cause of this exception. public CompletingFileUploadException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception."
  },
  "api/AdvanceFileUpload.Domain.Exception.PauseFileUploadException.html": {
    "href": "api/AdvanceFileUpload.Domain.Exception.PauseFileUploadException.html",
    "title": "Class PauseFileUploadException | Uploading File API",
    "keywords": "Class PauseFileUploadException Namespace AdvanceFileUpload.Domain.Exception Assembly AdvanceFileUpload.Domain.dll Represents errors that occur during the pausing of a file upload. public class PauseFileUploadException : DomainException, ISerializable Inheritance object Exception DomainException PauseFileUploadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PauseFileUploadException(string?) Initializes a new instance of the PauseFileUploadException class with a specified error message. public PauseFileUploadException(string? message) Parameters message string The message that describes the error. PauseFileUploadException(string?, Exception?) Initializes a new instance of the PauseFileUploadException class with a specified error message and a reference to the inner exception that is the cause of this exception. public PauseFileUploadException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception."
  },
  "api/AdvanceFileUpload.Domain.Exception.html": {
    "href": "api/AdvanceFileUpload.Domain.Exception.html",
    "title": "Namespace AdvanceFileUpload.Domain.Exception | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Domain.Exception Classes CancelationFileUploadException Represents errors that occur during the cancellation of a file upload. ChunkUploadingException Represents errors that occur during the uploading of file chunks. CompletingFileUploadException Represents errors that occur during the completion of a file upload. PauseFileUploadException Represents errors that occur during the pausing of a file upload."
  },
  "api/AdvanceFileUpload.Domain.Exceptions.CancelationFileUploadException.html": {
    "href": "api/AdvanceFileUpload.Domain.Exceptions.CancelationFileUploadException.html",
    "title": "Class CancelationFileUploadException | Uploading File API",
    "keywords": "Class CancelationFileUploadException Namespace AdvanceFileUpload.Domain.Exceptions Assembly AdvanceFileUpload.Domain.dll Represents errors that occur during the cancellation of a file upload. public class CancelationFileUploadException : DomainException, ISerializable Inheritance object Exception DomainException CancelationFileUploadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CancelationFileUploadException(string?) Initializes a new instance of the CancelationFileUploadException class with a specified error message. public CancelationFileUploadException(string? message) Parameters message string The message that describes the error. CancelationFileUploadException(string?, Exception?) Initializes a new instance of the CancelationFileUploadException class with a specified error message and a reference to the inner exception that is the cause of this exception. public CancelationFileUploadException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception."
  },
  "api/AdvanceFileUpload.Domain.Exceptions.ChunkUploadingException.html": {
    "href": "api/AdvanceFileUpload.Domain.Exceptions.ChunkUploadingException.html",
    "title": "Class ChunkUploadingException | Uploading File API",
    "keywords": "Class ChunkUploadingException Namespace AdvanceFileUpload.Domain.Exceptions Assembly AdvanceFileUpload.Domain.dll Represents errors that occur during the uploading of file chunks. public class ChunkUploadingException : DomainException, ISerializable Inheritance object Exception DomainException ChunkUploadingException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ChunkUploadingException(string?) Initializes a new instance of the ChunkUploadingException class with a specified error message. public ChunkUploadingException(string? message) Parameters message string The message that describes the error. ChunkUploadingException(string?, Exception?) Initializes a new instance of the ChunkUploadingException class with a specified error message and a reference to the inner exception that is the cause of this exception. public ChunkUploadingException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception."
  },
  "api/AdvanceFileUpload.Domain.Exceptions.CompletingFileUploadException.html": {
    "href": "api/AdvanceFileUpload.Domain.Exceptions.CompletingFileUploadException.html",
    "title": "Class CompletingFileUploadException | Uploading File API",
    "keywords": "Class CompletingFileUploadException Namespace AdvanceFileUpload.Domain.Exceptions Assembly AdvanceFileUpload.Domain.dll Represents errors that occur during the completion of a file upload. public class CompletingFileUploadException : DomainException, ISerializable Inheritance object Exception DomainException CompletingFileUploadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CompletingFileUploadException(string?) Initializes a new instance of the CompletingFileUploadException class with a specified error message. public CompletingFileUploadException(string? message) Parameters message string The message that describes the error. CompletingFileUploadException(string?, Exception?) Initializes a new instance of the CompletingFileUploadException class with a specified error message and a reference to the inner exception that is the cause of this exception. public CompletingFileUploadException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception."
  },
  "api/AdvanceFileUpload.Domain.Exceptions.PauseFileUploadException.html": {
    "href": "api/AdvanceFileUpload.Domain.Exceptions.PauseFileUploadException.html",
    "title": "Class PauseFileUploadException | Uploading File API",
    "keywords": "Class PauseFileUploadException Namespace AdvanceFileUpload.Domain.Exceptions Assembly AdvanceFileUpload.Domain.dll Represents errors that occur during the pausing of a file upload. public class PauseFileUploadException : DomainException, ISerializable Inheritance object Exception DomainException PauseFileUploadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PauseFileUploadException(string?) Initializes a new instance of the PauseFileUploadException class with a specified error message. public PauseFileUploadException(string? message) Parameters message string The message that describes the error. PauseFileUploadException(string?, Exception?) Initializes a new instance of the PauseFileUploadException class with a specified error message and a reference to the inner exception that is the cause of this exception. public PauseFileUploadException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception."
  },
  "api/AdvanceFileUpload.Domain.Exceptions.html": {
    "href": "api/AdvanceFileUpload.Domain.Exceptions.html",
    "title": "Namespace AdvanceFileUpload.Domain.Exceptions | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Domain.Exceptions Classes CancelationFileUploadException Represents errors that occur during the cancellation of a file upload. ChunkUploadingException Represents errors that occur during the uploading of file chunks. CompletingFileUploadException Represents errors that occur during the completion of a file upload. PauseFileUploadException Represents errors that occur during the pausing of a file upload."
  },
  "api/AdvanceFileUpload.Domain.Extensions.DateTmeExtensions.html": {
    "href": "api/AdvanceFileUpload.Domain.Extensions.DateTmeExtensions.html",
    "title": "Class DateTmeExtensions | Uploading File API",
    "keywords": "Class DateTmeExtensions Namespace AdvanceFileUpload.Domain.Extensions Assembly AdvanceFileUpload.Domain.dll Provides extension methods for DateTime objects. public static class DateTmeExtensions Inheritance object DateTmeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToDateOnly(DateTime) Converts a DateTime object to a DateOnly object. public static DateOnly ToDateOnly(this DateTime dateTime) Parameters dateTime DateTime The DateTime object to convert. Returns DateOnly A DateOnly object representing the date component of the DateTime object."
  },
  "api/AdvanceFileUpload.Domain.Extensions.html": {
    "href": "api/AdvanceFileUpload.Domain.Extensions.html",
    "title": "Namespace AdvanceFileUpload.Domain.Extensions | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Domain.Extensions Classes DateTmeExtensions Provides extension methods for DateTime objects."
  },
  "api/AdvanceFileUpload.Domain.FileUploadSession.html": {
    "href": "api/AdvanceFileUpload.Domain.FileUploadSession.html",
    "title": "Class FileUploadSession | Uploading File API",
    "keywords": "Class FileUploadSession Namespace AdvanceFileUpload.Domain Assembly AdvanceFileUpload.Domain.dll Represents a file upload session. public class FileUploadSession : EntityBase, IAggregateRoot Inheritance object EntityBase FileUploadSession Implements IAggregateRoot Inherited Members EntityBase.Id EntityBase.DomainEvents EntityBase.AddDomainEvent(IDomainEvent) EntityBase.ClearDomainEvents() EntityBase.Equals(object) EntityBase.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSession(string, string, long, long?, long, CompressionAlgorithm?, CompressionLevel?) Initializes a new instance of the FileUploadSession class. public FileUploadSession(string fileName, string savingDirectory, long fileSize, long? compressedSize, long maxChunkSize, CompressionAlgorithm? compressionAlgorithm = null, CompressionLevel? compressionLevel = null) Parameters fileName string The name of the file being uploaded. savingDirectory string The directory where the file is being saved. fileSize long The size of the file being uploaded. compressedSize long? The size of the compressed file being uploaded. maxChunkSize long The maximum size of each chunk. compressionAlgorithm CompressionAlgorithm? The compression Algorithm for the file being uploaded. compressionLevel CompressionLevel? The compression level for the file being uploaded. Properties ChunkFiles Gets the collection of chunk files. public IReadOnlyCollection<ChunkFile> ChunkFiles { get; } Property Value IReadOnlyCollection<ChunkFile> CompressedFileSize Gets the size of the file after compression. public long? CompressedFileSize { get; } Property Value long? Remarks if the CompressedFileSize is not null. The CompressedFileSize will be used to figure the TotalChunksToUpload else FileSize will be used. CompressionAlgorithm Gets the compression Algorithm for the file being uploaded. public CompressionAlgorithm? CompressionAlgorithm { get; } Property Value CompressionAlgorithm? CompressionLevel Gets the compression Level for the file being uploaded. public CompressionLevel? CompressionLevel { get; } Property Value CompressionLevel? CurrentHubConnectionId Gets or set the current hub connection id. public string? CurrentHubConnectionId { get; set; } Property Value string FileExtension Gets the file extension of the file being uploaded. public string FileExtension { get; } Property Value string FileName Gets the name of the file being uploaded. public string FileName { get; } Property Value string FileSize Gets the size of the file being uploaded. public long FileSize { get; } Property Value long MaxChunkSize Gets the maximum size of each chunk. public long MaxChunkSize { get; } Property Value long ProgressPercentage Gets the progress percentage of the file upload. public double ProgressPercentage { get; } Property Value double SavingDirectory Gets the directory where the file is being saved. public string SavingDirectory { get; } Property Value string SessionEndDate Gets the end date of the session. public DateTime? SessionEndDate { get; } Property Value DateTime? SessionStartDate Gets the start date of the session. public DateTime SessionStartDate { get; } Property Value DateTime Status Gets the status of the file upload session. public FileUploadSessionStatus Status { get; } Property Value FileUploadSessionStatus TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; } Property Value int TotalUploadedChunks Gets the total number of chunks that have been uploaded. public int TotalUploadedChunks { get; } Property Value int UploadDate Gets the upload date of the file. public DateOnly UploadDate { get; } Property Value DateOnly UseCompression Gets a value indicating whether compression is used. public bool UseCompression { get; } Property Value bool Version The Row Version. public byte[] Version { get; set; } Property Value byte[] Methods AddChunk(int, string) Adds a chunk to the file upload session. public void AddChunk(int chunkIndex, string chunkPath) Parameters chunkIndex int The index of the chunk. chunkPath string The path of the chunk. Exceptions ChunkUploadingException Thrown when the chunk cannot be added due to one of the following reasons: The upload session is already completed. The upload session is already canceled. All chunks are already uploaded. The chunk with the specified index is already uploaded. CancelSession() Cancels the file upload session. public void CancelSession() Exceptions CancelationFileUploadException Thrown when the session cannot be canceled because it is already completed. CompleteSession() Completes the file upload session. public void CompleteSession() Exceptions CompletingFileUploadException Thrown when the session cannot be completed due to one of the following reasons: The session is already completed. The session is canceled. Not all chunks have been uploaded. GetRemainChunks() Gets the remaining chunks to be uploaded. public List<int> GetRemainChunks() Returns List<int> List<T> of the remaining chunks to be uploaded. IsAllChunkUploaded() Determines whether all chunks have been uploaded. public bool IsAllChunkUploaded() Returns bool true if all chunks have been uploaded; otherwise, false. IsCanceled() Determines whether the file upload session is canceled. public bool IsCanceled() Returns bool true if the session is canceled; otherwise, false. IsChunkUploaded(int) Determines whether a specific chunk has been uploaded. public bool IsChunkUploaded(int chunkIndex) Parameters chunkIndex int The index of the chunk. Returns bool true if the chunk has been uploaded; otherwise, false. IsCompleted() Determines whether the file upload session is completed. public bool IsCompleted() Returns bool true if the session is completed; otherwise, false. PauseSession() Pauses the file upload session. public void PauseSession() Exceptions CancelationFileUploadException Thrown when the session cannot be paused because it is already completed or canceled."
  },
  "api/AdvanceFileUpload.Domain.FileUploadSessionStatus.html": {
    "href": "api/AdvanceFileUpload.Domain.FileUploadSessionStatus.html",
    "title": "Enum FileUploadSessionStatus | Uploading File API",
    "keywords": "Enum FileUploadSessionStatus Namespace AdvanceFileUpload.Domain Assembly AdvanceFileUpload.Domain.dll Represents the status of a file upload session. public enum FileUploadSessionStatus Fields Canceled = 5 The file upload session is canceled. Completed = 4 The file upload session is completed. Failed = 6 The file upload session has failed. InProgress = 1 The file upload session is in progress. Paused = 2 The file upload session is paused. PendingToComplete = 3 The file upload session is Watling to be Completed."
  },
  "api/AdvanceFileUpload.Domain.Test.ChunkValidatorTests.html": {
    "href": "api/AdvanceFileUpload.Domain.Test.ChunkValidatorTests.html",
    "title": "Class ChunkValidatorTests | Uploading File API",
    "keywords": "Class ChunkValidatorTests Namespace AdvanceFileUpload.Domain.Test Assembly AdvanceFileUpload.Domain.Test.dll public class ChunkValidatorTests Inheritance object ChunkValidatorTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChunkValidatorTests() public ChunkValidatorTests() Methods IsValidateChunkData_EmptyData_ReturnsFalse() [Fact] public void IsValidateChunkData_EmptyData_ReturnsFalse() IsValidateChunkData_ExceedsMaxSize_ReturnsFalse() [Fact] public void IsValidateChunkData_ExceedsMaxSize_ReturnsFalse() IsValidateChunkData_NullData_ReturnsFalse() [Fact] public void IsValidateChunkData_NullData_ReturnsFalse() IsValidateChunkData_ValidData_ReturnsTrue() [Fact] public void IsValidateChunkData_ValidData_ReturnsTrue() IsValidateChunkIndex_InvalidIndex_ReturnsFalse() [Fact] public void IsValidateChunkIndex_InvalidIndex_ReturnsFalse() IsValidateChunkIndex_ValidIndex_ReturnsTrue() [Fact] public void IsValidateChunkIndex_ValidIndex_ReturnsTrue() IsValidateChunkSize_ExceedsMaxSize_ReturnsFalse() [Fact] public void IsValidateChunkSize_ExceedsMaxSize_ReturnsFalse() IsValidateChunkSize_ValidSize_ReturnsTrue() [Fact] public void IsValidateChunkSize_ValidSize_ReturnsTrue() IsValidateChunkSize_ZeroSize_ReturnsFalse() [Fact] public void IsValidateChunkSize_ZeroSize_ReturnsFalse()"
  },
  "api/AdvanceFileUpload.Domain.Test.FileCompressionValidatorTests.html": {
    "href": "api/AdvanceFileUpload.Domain.Test.FileCompressionValidatorTests.html",
    "title": "Class FileCompressionValidatorTests | Uploading File API",
    "keywords": "Class FileCompressionValidatorTests Namespace AdvanceFileUpload.Domain.Test Assembly AdvanceFileUpload.Domain.Test.dll public class FileCompressionValidatorTests Inheritance object FileCompressionValidatorTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileCompressionValidatorTests() public FileCompressionValidatorTests() Methods IsValidCompressedData_ShouldReturnExpectedResult(byte[], CompressionAlgorithmOption, bool) [Theory] [InlineData(new object[] { new byte[] { 31, 139 }, CompressionAlgorithmOption.GZip, true })] [InlineData(new object[] { new byte[] { 31 }, CompressionAlgorithmOption.GZip, false })] [InlineData(new object[] { new byte[] { 120, 156 }, CompressionAlgorithmOption.Deflate, true })] [InlineData(new object[] { new byte[] { 120 }, CompressionAlgorithmOption.Deflate, false })] [InlineData(new object[] { new byte[] { 206, 178, 207, 129 }, CompressionAlgorithmOption.Brotli, true })] [InlineData(new object[] { new byte[] { 206, 178, 207 }, CompressionAlgorithmOption.Brotli, false })] public void IsValidCompressedData_ShouldReturnExpectedResult(byte[] data, CompressionAlgorithmOption option, bool expected) Parameters data byte[] option CompressionAlgorithmOption expected bool IsValidCompressedData_ShouldThrowArgumentException_ForUnsupportedAlgorithm() [Fact] public void IsValidCompressedData_ShouldThrowArgumentException_ForUnsupportedAlgorithm()"
  },
  "api/AdvanceFileUpload.Domain.Test.FileCompressorTests.html": {
    "href": "api/AdvanceFileUpload.Domain.Test.FileCompressorTests.html",
    "title": "Class FileCompressorTests | Uploading File API",
    "keywords": "Class FileCompressorTests Namespace AdvanceFileUpload.Domain.Test Assembly AdvanceFileUpload.Domain.Test.dll public class FileCompressorTests Inheritance object FileCompressorTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileCompressorTests() public FileCompressorTests() Methods CompressFileAsync_ShouldCompressFile() [Fact] public Task CompressFileAsync_ShouldCompressFile() Returns Task CompressFilesAsync_ShouldCompressMultipleFiles() [Fact] public Task CompressFilesAsync_ShouldCompressMultipleFiles() Returns Task DecompressFileAsync_ShouldDecompressFile() [Fact] public Task DecompressFileAsync_ShouldDecompressFile() Returns Task DecompressFilesAsync_ShouldDecompressMultipleFiles() [Fact] public Task DecompressFilesAsync_ShouldDecompressMultipleFiles() Returns Task"
  },
  "api/AdvanceFileUpload.Domain.Test.FileProcessorTests.html": {
    "href": "api/AdvanceFileUpload.Domain.Test.FileProcessorTests.html",
    "title": "Class FileProcessorTests | Uploading File API",
    "keywords": "Class FileProcessorTests Namespace AdvanceFileUpload.Domain.Test Assembly AdvanceFileUpload.Domain.Test.dll public class FileProcessorTests Inheritance object FileProcessorTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MergeChunksAsync_ShouldMergeChunks() [Fact] public Task MergeChunksAsync_ShouldMergeChunks() Returns Task SaveFileAsync_ShouldSaveFile() [Fact] public Task SaveFileAsync_ShouldSaveFile() Returns Task SplitFileIntoChunksAsync_ShouldSplitFile() [Fact] public Task SplitFileIntoChunksAsync_ShouldSplitFile() Returns Task"
  },
  "api/AdvanceFileUpload.Domain.Test.FileUploadSessionTests.html": {
    "href": "api/AdvanceFileUpload.Domain.Test.FileUploadSessionTests.html",
    "title": "Class FileUploadSessionTests | Uploading File API",
    "keywords": "Class FileUploadSessionTests Namespace AdvanceFileUpload.Domain.Test Assembly AdvanceFileUpload.Domain.Test.dll public class FileUploadSessionTests Inheritance object FileUploadSessionTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddChunk_ShouldAddChunk() [Fact] public void AddChunk_ShouldAddChunk() AddChunk_ShouldThrowException_WhenSessionIsCompleted() [Fact] public void AddChunk_ShouldThrowException_WhenSessionIsCompleted() CancelSession_ShouldUpdateStatus() [Fact] public void CancelSession_ShouldUpdateStatus() CompleteSession_ShouldUpdateStatus() [Fact] public void CompleteSession_ShouldUpdateStatus() Constructor_ShouldInitializeProperties() [Fact] public void Constructor_ShouldInitializeProperties() GetRemainChunks_ShouldReturnRemainingChunks() [Fact] public void GetRemainChunks_ShouldReturnRemainingChunks() PauseSession_ShouldUpdateStatus() [Fact] public void PauseSession_ShouldUpdateStatus()"
  },
  "api/AdvanceFileUpload.Domain.Test.FileValidatorTests.html": {
    "href": "api/AdvanceFileUpload.Domain.Test.FileValidatorTests.html",
    "title": "Class FileValidatorTests | Uploading File API",
    "keywords": "Class FileValidatorTests Namespace AdvanceFileUpload.Domain.Test Assembly AdvanceFileUpload.Domain.Test.dll public class FileValidatorTests Inheritance object FileValidatorTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileValidatorTests() public FileValidatorTests() Methods IsValidateFileExtension_InvalidFileExtension_ReturnsFalse(string, string[]) [Theory] [InlineData(new object[] { null, new string[] { \".txt\", \".pdf\" } })] [InlineData(new object[] { \"\", new string[] { \".txt\", \".pdf\" } })] [InlineData(new object[] { \".\", new string[] { \".txt\", \".pdf\" } })] [InlineData(new object[] { \".exe\", new string[] { \".txt\", \".pdf\" } })] [InlineData(new object[] { \".txt\", null })] [InlineData(new object[] { \".txt\", new string[] { } })] public void IsValidateFileExtension_InvalidFileExtension_ReturnsFalse(string fileExtension, string[] allowedExtensions) Parameters fileExtension string allowedExtensions string[] IsValidateFileExtension_ValidFileExtension_ReturnsTrue(string, string[]) [Theory] [InlineData(new object[] { \".txt\", new string[] { \".txt\", \".pdf\" } })] public void IsValidateFileExtension_ValidFileExtension_ReturnsTrue(string fileExtension, string[] allowedExtensions) Parameters fileExtension string allowedExtensions string[] IsValidateFileName_InvalidFileName_ReturnsFalse(string) [Theory] [InlineData(null)] [InlineData(new object[] { \"\" })] [InlineData(new object[] { \" \" })] [InlineData(new object[] { \"file:.pdf\" })] [InlineData(new object[] { \"file?.pdf\" })] [InlineData(new object[] { \"fi\\\\le.pdf\" })] public void IsValidateFileName_InvalidFileName_ReturnsFalse(string fileName) Parameters fileName string IsValidateFileName_ValidFileName_ReturnsTrue(string) [Theory] [InlineData(new object[] { \"validFileName.txt\" })] [InlineData(new object[] { \"validFileName.pdf\" })] public void IsValidateFileName_ValidFileName_ReturnsTrue(string fileName) Parameters fileName string IsValidateFileSize_InvalidFileSize_ReturnsFalse(long, long) [Theory] [InlineData(new object[] { 10, 0 })] [InlineData(new object[] { 0, 0 })] [InlineData(new object[] { 0, 100 })] [InlineData(new object[] { -1, 100 })] [InlineData(new object[] { 101, 100 })] public void IsValidateFileSize_InvalidFileSize_ReturnsFalse(long fileSize, long maxFileSize) Parameters fileSize long maxFileSize long IsValidateFileSize_ValidFileSize_ReturnsTrue(long, long) [Theory] [InlineData(new object[] { 50, 100 })] [InlineData(new object[] { 100, 100 })] public void IsValidateFileSize_ValidFileSize_ReturnsTrue(long fileSize, long maxFileSize) Parameters fileSize long maxFileSize long"
  },
  "api/AdvanceFileUpload.Domain.Test.UploadMangerTests.html": {
    "href": "api/AdvanceFileUpload.Domain.Test.UploadMangerTests.html",
    "title": "Class UploadMangerTests | Uploading File API",
    "keywords": "Class UploadMangerTests Namespace AdvanceFileUpload.Domain.Test Assembly AdvanceFileUpload.Domain.Test.dll public class UploadMangerTests Inheritance object UploadMangerTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadMangerTests() public UploadMangerTests() Methods CancelUploadSessionAsync_ShouldCancelSession() [Fact] public Task CancelUploadSessionAsync_ShouldCancelSession() Returns Task CompleteUploadSessionAsync_ShouldCompleteSession() [Fact] public Task CompleteUploadSessionAsync_ShouldCompleteSession() Returns Task CreateUploadSessionAsync_ShouldCreateSession() [Fact] public Task CreateUploadSessionAsync_ShouldCreateSession() Returns Task GetUploadSessionStatusAsync_ShouldReturnStatus() [Fact] public Task GetUploadSessionStatusAsync_ShouldReturnStatus() Returns Task PauseUploadSessionAsync_ShouldPauseSession() [Fact] public Task PauseUploadSessionAsync_ShouldPauseSession() Returns Task UploadChunkAsync_ShouldUploadChunk() [Fact] public Task UploadChunkAsync_ShouldUploadChunk() Returns Task"
  },
  "api/AdvanceFileUpload.Domain.Test.html": {
    "href": "api/AdvanceFileUpload.Domain.Test.html",
    "title": "Namespace AdvanceFileUpload.Domain.Test | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Domain.Test Classes ChunkValidatorTests FileCompressionValidatorTests FileCompressorTests FileProcessorTests FileUploadSessionTests FileValidatorTests UploadMangerTests"
  },
  "api/AdvanceFileUpload.Domain.html": {
    "href": "api/AdvanceFileUpload.Domain.html",
    "title": "Namespace AdvanceFileUpload.Domain | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Domain Classes ChunkFile Represents a chunk file in a file upload session. FileUploadSession Represents a file upload session. Enums CompressionAlgorithm Specifies the compression algorithms. CompressionLevel Specifies values that indicate whether a compression operation emphasizes speed or compression size. FileUploadSessionStatus Represents the status of a file upload session."
  },
  "api/AdvanceFileUpload.Integration.Contracts.ChunkUploadedIntegrationEvent.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.ChunkUploadedIntegrationEvent.html",
    "title": "Class ChunkUploadedIntegrationEvent | Uploading File API",
    "keywords": "Class ChunkUploadedIntegrationEvent Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll Event triggered when a chunk is uploaded. public class ChunkUploadedIntegrationEvent Inheritance object ChunkUploadedIntegrationEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ChunkIndex Gets or sets the chunk index. public int ChunkIndex { get; set; } Property Value int SessionId Gets or sets the session identifier. public Guid SessionId { get; set; } Property Value Guid Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/AdvanceFileUpload.Integration.Contracts.ConsumingArgs.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.ConsumingArgs.html",
    "title": "Class ConsumingArgs | Uploading File API",
    "keywords": "Class ConsumingArgs Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll public class ConsumingArgs Inheritance object ConsumingArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoDelete public bool AutoDelete { get; set; } Property Value bool Durable public bool Durable { get; set; } Property Value bool Exchange public string Exchange { get; set; } Property Value string ExchangeType public string ExchangeType { get; set; } Property Value string Exclusive public bool Exclusive { get; set; } Property Value bool Queue public string Queue { get; set; } Property Value string RoutingKey public string RoutingKey { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.Integration.Contracts.IIntegrationEventConsumer.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.IIntegrationEventConsumer.html",
    "title": "Interface IIntegrationEventConsumer | Uploading File API",
    "keywords": "Interface IIntegrationEventConsumer Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll public interface IIntegrationEventConsumer Methods Consume<T>(ConsumingArgs, Func<T, Task>) void Consume<T>(ConsumingArgs args, Func<T, Task> onMessageReceived) where T : class Parameters args ConsumingArgs onMessageReceived Func<T, Task> Type Parameters T Dispose() void Dispose()"
  },
  "api/AdvanceFileUpload.Integration.Contracts.IIntegrationEventPublisher.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.IIntegrationEventPublisher.html",
    "title": "Interface IIntegrationEventPublisher | Uploading File API",
    "keywords": "Interface IIntegrationEventPublisher Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll public interface IIntegrationEventPublisher Methods PublishAsync<T>(PublishMessage<T>, CancellationToken) Task PublishAsync<T>(PublishMessage<T> message, CancellationToken cancellationToken = default) where T : class Parameters message PublishMessage<T> cancellationToken CancellationToken Returns Task Type Parameters T"
  },
  "api/AdvanceFileUpload.Integration.Contracts.IntegrationConstants.ChunkUploadedConstants.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.IntegrationConstants.ChunkUploadedConstants.html",
    "title": "Class IntegrationConstants.ChunkUploadedConstants | Uploading File API",
    "keywords": "Class IntegrationConstants.ChunkUploadedConstants Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll Constants related to the \"Chunk Uploaded\" event. public sealed class IntegrationConstants.ChunkUploadedConstants Inheritance object IntegrationConstants.ChunkUploadedConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AutoDelete Indicates whether the queue is auto-deleted for the \"Chunk Uploaded\" event. public const bool AutoDelete = false Field Value bool Durable Indicates whether the queue is durable for the \"Chunk Uploaded\" event. public const bool Durable = true Field Value bool Exchange The exchange name for the \"Chunk Uploaded\" event. public const string Exchange = \"Chunk-Uploaded\" Field Value string ExchangeType The type of exchange for the \"Chunk Uploaded\" event. public const string ExchangeType = \"direct\" Field Value string Exclusive Indicates whether the queue is exclusive for the \"Chunk Uploaded\" event. public const bool Exclusive = false Field Value bool Queue The name of the queue for the \"Chunk Uploaded\" event. public const string Queue = \"Chunk-Uploaded\" Field Value string RoutingKey The routing key for the \"Chunk Uploaded\" event. public const string RoutingKey = \"Chunk-Uploaded\" Field Value string"
  },
  "api/AdvanceFileUpload.Integration.Contracts.IntegrationConstants.SessionCanceledConstants.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.IntegrationConstants.SessionCanceledConstants.html",
    "title": "Class IntegrationConstants.SessionCanceledConstants | Uploading File API",
    "keywords": "Class IntegrationConstants.SessionCanceledConstants Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll Constants related to the \"Session Canceled\" event. public sealed class IntegrationConstants.SessionCanceledConstants Inheritance object IntegrationConstants.SessionCanceledConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AutoDelete Indicates whether the queue is auto-deleted for the \"Session Canceled\" event. public const bool AutoDelete = false Field Value bool Durable Indicates whether the queue is durable for the \"Session Canceled\" event. public const bool Durable = true Field Value bool Exchange The exchange name for the \"Session Canceled\" event. public const string Exchange = \"Session-Canceled\" Field Value string ExchangeType The type of exchange for the \"Session Canceled\" event. public const string ExchangeType = \"direct\" Field Value string Exclusive Indicates whether the queue is exclusive for the \"Session Canceled\" event. public const bool Exclusive = false Field Value bool Queue The name of the queue for the \"Session Canceled\" event. public const string Queue = \"Session-Canceled\" Field Value string RoutingKey The routing key for the \"Session Canceled\" event. public const string RoutingKey = \"Session-Canceled\" Field Value string"
  },
  "api/AdvanceFileUpload.Integration.Contracts.IntegrationConstants.SessionCompletedConstants.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.IntegrationConstants.SessionCompletedConstants.html",
    "title": "Class IntegrationConstants.SessionCompletedConstants | Uploading File API",
    "keywords": "Class IntegrationConstants.SessionCompletedConstants Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll Constants related to the \"Session Completed\" event. public sealed class IntegrationConstants.SessionCompletedConstants Inheritance object IntegrationConstants.SessionCompletedConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AutoDelete Indicates whether the queue is auto-deleted for the \"Session Completed\" event. public const bool AutoDelete = false Field Value bool Durable Indicates whether the queue is durable for the \"Session Completed\" event. public const bool Durable = true Field Value bool Exchange The exchange name for the \"Session Completed\" event. public const string Exchange = \"Session-Completed\" Field Value string ExchangeType The type of exchange for the \"Session Completed\" event. public const string ExchangeType = \"direct\" Field Value string Exclusive Indicates whether the queue is exclusive for the \"Session Completed\" event. public const bool Exclusive = false Field Value bool Queue The name of the queue for the \"Session Completed\" event. public const string Queue = \"Session-Completed\" Field Value string RoutingKey The routing key for the \"Session Completed\" event. public const string RoutingKey = \"Session-Completed\" Field Value string"
  },
  "api/AdvanceFileUpload.Integration.Contracts.IntegrationConstants.SessionCreatedConstants.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.IntegrationConstants.SessionCreatedConstants.html",
    "title": "Class IntegrationConstants.SessionCreatedConstants | Uploading File API",
    "keywords": "Class IntegrationConstants.SessionCreatedConstants Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll Constants related to the \"Session Created\" event. public sealed class IntegrationConstants.SessionCreatedConstants Inheritance object IntegrationConstants.SessionCreatedConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AutoDelete Indicates whether the queue is auto-deleted for the \"Session Created\" event. public const bool AutoDelete = false Field Value bool Durable Indicates whether the queue is durable for the \"Session Created\" event. public const bool Durable = true Field Value bool Exchange The exchange name for the \"Session Created\" event. public const string Exchange = \"Session-Created\" Field Value string ExchangeType The type of exchange for the \"Session Created\" event. public const string ExchangeType = \"direct\" Field Value string Exclusive Indicates whether the queue is exclusive for the \"Session Created\" event. public const bool Exclusive = false Field Value bool Queue The name of the queue for the \"Session Created\" event. public const string Queue = \"Session-Created\" Field Value string RoutingKey The routing key for the \"Session Created\" event. public const string RoutingKey = \"Session-Created\" Field Value string"
  },
  "api/AdvanceFileUpload.Integration.Contracts.IntegrationConstants.SessionPausedConstants.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.IntegrationConstants.SessionPausedConstants.html",
    "title": "Class IntegrationConstants.SessionPausedConstants | Uploading File API",
    "keywords": "Class IntegrationConstants.SessionPausedConstants Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll Constants related to the \"Session Paused\" event. public sealed class IntegrationConstants.SessionPausedConstants Inheritance object IntegrationConstants.SessionPausedConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AutoDelete Indicates whether the queue is auto-deleted for the \"Session Paused\" event. public const bool AutoDelete = false Field Value bool Durable Indicates whether the queue is durable for the \"Session Paused\" event. public const bool Durable = true Field Value bool Exchange The exchange name for the \"Session Paused\" event. public const string Exchange = \"Session-Paused\" Field Value string ExchangeType The type of exchange for the \"Session Paused\" event. public const string ExchangeType = \"direct\" Field Value string Exclusive Indicates whether the queue is exclusive for the \"Session Paused\" event. public const bool Exclusive = false Field Value bool Queue The name of the queue for the \"Session Paused\" event. public const string Queue = \"Session-Paused\" Field Value string RoutingKey The routing key for the \"Session Paused\" event. public const string RoutingKey = \"Session-Paused\" Field Value string"
  },
  "api/AdvanceFileUpload.Integration.Contracts.IntegrationConstants.SessionResumedConstants.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.IntegrationConstants.SessionResumedConstants.html",
    "title": "Class IntegrationConstants.SessionResumedConstants | Uploading File API",
    "keywords": "Class IntegrationConstants.SessionResumedConstants Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll Constants related to the \"Session Resumed\" event. public sealed class IntegrationConstants.SessionResumedConstants Inheritance object IntegrationConstants.SessionResumedConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AutoDelete Indicates whether the queue is auto-deleted for the \"Session Resumed\" event. public const bool AutoDelete = false Field Value bool Durable Indicates whether the queue is durable for the \"Session Resumed\" event. public const bool Durable = true Field Value bool Exchange The exchange name for the \"Session Resumed\" event. public const string Exchange = \"Session-Resumed\" Field Value string ExchangeType The type of exchange for the \"Session Resumed\" event. public const string ExchangeType = \"direct\" Field Value string Exclusive Indicates whether the queue is exclusive for the \"Session Resumed\" event. public const bool Exclusive = false Field Value bool Queue The name of the queue for the \"Session Resumed\" event. public const string Queue = \"Session-Resumed\" Field Value string RoutingKey The routing key for the \"Session Resumed\" event. public const string RoutingKey = \"Session-Resumed\" Field Value string"
  },
  "api/AdvanceFileUpload.Integration.Contracts.IntegrationConstants.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.IntegrationConstants.html",
    "title": "Class IntegrationConstants | Uploading File API",
    "keywords": "Class IntegrationConstants Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll Contains constants used for integration purposes. public sealed class IntegrationConstants Inheritance object IntegrationConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AdvanceFileUpload.Integration.Contracts.PublishMessage-1.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.PublishMessage-1.html",
    "title": "Class PublishMessage<T> | Uploading File API",
    "keywords": "Class PublishMessage<T> Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll public class PublishMessage<T> Type Parameters T Inheritance object PublishMessage<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoDelete public bool AutoDelete { get; set; } Property Value bool Durable public bool Durable { get; set; } Property Value bool Exchange public string Exchange { get; set; } Property Value string ExchangeType public string ExchangeType { get; set; } Property Value string Exclusive public bool Exclusive { get; set; } Property Value bool Message public T Message { get; set; } Property Value T Queue public string Queue { get; set; } Property Value string RoutingKey public string RoutingKey { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.Integration.Contracts.RabbitMQConsumer.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.RabbitMQConsumer.html",
    "title": "Class RabbitMQConsumer | Uploading File API",
    "keywords": "Class RabbitMQConsumer Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll public class RabbitMQConsumer : IIntegrationEventConsumer Inheritance object RabbitMQConsumer Implements IIntegrationEventConsumer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RabbitMQConsumer(RabbitMQOptions) public RabbitMQConsumer(RabbitMQOptions rabbitMQOptions) Parameters rabbitMQOptions RabbitMQOptions Methods Consume<T>(ConsumingArgs, Func<T, Task>) public void Consume<T>(ConsumingArgs args, Func<T, Task> onMessageReceived) where T : class Parameters args ConsumingArgs onMessageReceived Func<T, Task> Type Parameters T Dispose() public void Dispose()"
  },
  "api/AdvanceFileUpload.Integration.Contracts.RabbitMQIntegrationEventPublisher.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.RabbitMQIntegrationEventPublisher.html",
    "title": "Class RabbitMQIntegrationEventPublisher | Uploading File API",
    "keywords": "Class RabbitMQIntegrationEventPublisher Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll public class RabbitMQIntegrationEventPublisher : IIntegrationEventPublisher Inheritance object RabbitMQIntegrationEventPublisher Implements IIntegrationEventPublisher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RabbitMQIntegrationEventPublisher(IOptions<RabbitMQOptions>, ILogger<RabbitMQIntegrationEventPublisher>) public RabbitMQIntegrationEventPublisher(IOptions<RabbitMQOptions> rabbitMQOptions, ILogger<RabbitMQIntegrationEventPublisher> logger) Parameters rabbitMQOptions IOptions<RabbitMQOptions> logger ILogger<RabbitMQIntegrationEventPublisher> Methods PublishAsync<T>(PublishMessage<T>, CancellationToken) public Task PublishAsync<T>(PublishMessage<T> message, CancellationToken cancellationToken = default) where T : class Parameters message PublishMessage<T> cancellationToken CancellationToken Returns Task Type Parameters T"
  },
  "api/AdvanceFileUpload.Integration.Contracts.RabbitMQOptions.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.RabbitMQOptions.html",
    "title": "Class RabbitMQOptions | Uploading File API",
    "keywords": "Class RabbitMQOptions Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll public class RabbitMQOptions Inheritance object RabbitMQOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SectionName public const string SectionName = \"RabbitMQOptions\" Field Value string Properties HostName public string HostName { get; set; } Property Value string Password public string Password { get; set; } Property Value string Port public int Port { get; set; } Property Value int UseSSL public bool UseSSL { get; set; } Property Value bool UserName public string UserName { get; set; } Property Value string VirtualHost public string VirtualHost { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.Integration.Contracts.SessionCancelledIntegrationEvent.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.SessionCancelledIntegrationEvent.html",
    "title": "Class SessionCancelledIntegrationEvent | Uploading File API",
    "keywords": "Class SessionCancelledIntegrationEvent Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll Event triggered when a session is cancelled. public class SessionCancelledIntegrationEvent Inheritance object SessionCancelledIntegrationEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties FileExtension Gets or sets the file extension. public string FileExtension { get; set; } Property Value string FileName Gets or sets the file name. public string FileName { get; set; } Property Value string FileSize Gets or sets the file size. public long FileSize { get; set; } Property Value long SessionEndDateTime Gets or sets the session end date and time. public DateTime SessionEndDateTime { get; set; } Property Value DateTime SessionId Gets or sets the session identifier. public Guid SessionId { get; set; } Property Value Guid SessionStartDateTime Gets or sets the session start date and time. public DateTime SessionStartDateTime { get; set; } Property Value DateTime Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/AdvanceFileUpload.Integration.Contracts.SessionCompletedIntegrationEvent.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.SessionCompletedIntegrationEvent.html",
    "title": "Class SessionCompletedIntegrationEvent | Uploading File API",
    "keywords": "Class SessionCompletedIntegrationEvent Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll Event triggered when a session is completed. public class SessionCompletedIntegrationEvent Inheritance object SessionCompletedIntegrationEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties FileExtension Gets or sets the file extension. public string FileExtension { get; set; } Property Value string FileName Gets or sets the file name. public string FileName { get; set; } Property Value string FilePath Gets or sets the file path. public string FilePath { get; set; } Property Value string FileSize Gets or sets the file size. public long FileSize { get; set; } Property Value long SessionEndDateTime Gets or sets the session end date and time. public DateTime SessionEndDateTime { get; set; } Property Value DateTime SessionId Gets or sets the session identifier. public Guid SessionId { get; set; } Property Value Guid SessionStartDateTime Gets or sets the session start date and time. public DateTime SessionStartDateTime { get; set; } Property Value DateTime Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/AdvanceFileUpload.Integration.Contracts.SessionCreatedIntegrationEvent.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.SessionCreatedIntegrationEvent.html",
    "title": "Class SessionCreatedIntegrationEvent | Uploading File API",
    "keywords": "Class SessionCreatedIntegrationEvent Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll Event triggered when a session is created. public class SessionCreatedIntegrationEvent Inheritance object SessionCreatedIntegrationEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties FileExtension Gets or sets the file extension. public string FileExtension { get; set; } Property Value string FileName Gets or sets the file name. public string FileName { get; set; } Property Value string FileSize Gets or sets the file size. public long FileSize { get; set; } Property Value long SessionId Gets or sets the session identifier. public Guid SessionId { get; set; } Property Value Guid SessionStartDateTime Gets or sets the session start date and time. public DateTime SessionStartDateTime { get; set; } Property Value DateTime Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/AdvanceFileUpload.Integration.Contracts.SessionPausedIntegrationEvent.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.SessionPausedIntegrationEvent.html",
    "title": "Class SessionPausedIntegrationEvent | Uploading File API",
    "keywords": "Class SessionPausedIntegrationEvent Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll Event triggered when a session is paused. public class SessionPausedIntegrationEvent Inheritance object SessionPausedIntegrationEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties FileExtension Gets or sets the file extension. public string FileExtension { get; set; } Property Value string FileName Gets or sets the file name. public string FileName { get; set; } Property Value string FileSize Gets or sets the file size. public long FileSize { get; set; } Property Value long SessionEndDateTime Gets or sets the session end date and time. public DateTime SessionEndDateTime { get; set; } Property Value DateTime SessionId Gets or sets the session identifier. public Guid SessionId { get; set; } Property Value Guid SessionStartDateTime Gets or sets the session start date and time. public DateTime SessionStartDateTime { get; set; } Property Value DateTime Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/AdvanceFileUpload.Integration.Contracts.SessionResumedIntegrationEvent.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.SessionResumedIntegrationEvent.html",
    "title": "Class SessionResumedIntegrationEvent | Uploading File API",
    "keywords": "Class SessionResumedIntegrationEvent Namespace AdvanceFileUpload.Integration.Contracts Assembly AdvanceFileUpload.Integration.Contracts.dll Event triggered when a session is resumed. public class SessionResumedIntegrationEvent Inheritance object SessionResumedIntegrationEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FileExtension Gets or sets the file extension. public string FileExtension { get; set; } Property Value string FileName Gets or sets the file name. public string FileName { get; set; } Property Value string FileSize Gets or sets the file size. public long FileSize { get; set; } Property Value long SessionEndDateTime Gets or sets the session end date and time. public DateTime SessionEndDateTime { get; set; } Property Value DateTime SessionId Gets or sets the session identifier. public Guid SessionId { get; set; } Property Value Guid SessionStartDateTime Gets or sets the session start date and time. public DateTime SessionStartDateTime { get; set; } Property Value DateTime"
  },
  "api/AdvanceFileUpload.Integration.Contracts.html": {
    "href": "api/AdvanceFileUpload.Integration.Contracts.html",
    "title": "Namespace AdvanceFileUpload.Integration.Contracts | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Integration.Contracts Classes ChunkUploadedIntegrationEvent Event triggered when a chunk is uploaded. ConsumingArgs IntegrationConstants Contains constants used for integration purposes. IntegrationConstants.ChunkUploadedConstants Constants related to the \"Chunk Uploaded\" event. IntegrationConstants.SessionCanceledConstants Constants related to the \"Session Canceled\" event. IntegrationConstants.SessionCompletedConstants Constants related to the \"Session Completed\" event. IntegrationConstants.SessionCreatedConstants Constants related to the \"Session Created\" event. IntegrationConstants.SessionPausedConstants Constants related to the \"Session Paused\" event. IntegrationConstants.SessionResumedConstants Constants related to the \"Session Resumed\" event. PublishMessage<T> RabbitMQConsumer RabbitMQIntegrationEventPublisher RabbitMQOptions SessionCancelledIntegrationEvent Event triggered when a session is cancelled. SessionCompletedIntegrationEvent Event triggered when a session is completed. SessionCreatedIntegrationEvent Event triggered when a session is created. SessionPausedIntegrationEvent Event triggered when a session is paused. SessionResumedIntegrationEvent Event triggered when a session is resumed. Interfaces IIntegrationEventConsumer IIntegrationEventPublisher"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Uploading File API",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Uploading File API",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Uploading File API",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}