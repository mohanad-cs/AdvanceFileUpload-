{
  "api/AdvanceFileUpload.Application.Core.ICommand-1.html": {
    "href": "api/AdvanceFileUpload.Application.Core.ICommand-1.html",
    "title": "Interface ICommand<TResult> | Uploading File API",
    "keywords": "Interface ICommand<TResult> Namespace AdvanceFileUpload.Application.Core Assembly AdvanceFileUpload.Application.dll public interface ICommand<out TResult> : IRequest<TResult>, IBaseRequest Type Parameters TResult"
  },
  "api/AdvanceFileUpload.Application.Core.IQuery-1.html": {
    "href": "api/AdvanceFileUpload.Application.Core.IQuery-1.html",
    "title": "Interface IQuery<TResult> | Uploading File API",
    "keywords": "Interface IQuery<TResult> Namespace AdvanceFileUpload.Application.Core Assembly AdvanceFileUpload.Application.dll public interface IQuery<out TResult> : IRequest<TResult>, IBaseRequest Type Parameters TResult"
  },
  "api/AdvanceFileUpload.Application.Core.html": {
    "href": "api/AdvanceFileUpload.Application.Core.html",
    "title": "Namespace AdvanceFileUpload.Application.Core | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application.Core Interfaces ICommand<TResult> IQuery<TResult>"
  },
  "api/AdvanceFileUpload.Application.Exception.ApplicationException.html": {
    "href": "api/AdvanceFileUpload.Application.Exception.ApplicationException.html",
    "title": "Class ApplicationException | Uploading File API",
    "keywords": "Class ApplicationException Namespace AdvanceFileUpload.Application.Exception Assembly AdvanceFileUpload.Application.dll public sealed class ApplicationException : Exception, ISerializable Inheritance object Exception ApplicationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors ApplicationException(SerializationInfo, StreamingContext) public ApplicationException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext ApplicationException(string?) public ApplicationException(string? message) Parameters message string ApplicationException(string?, Exception?) public ApplicationException(string? message, Exception? innerException) Parameters message string innerException Exception"
  },
  "api/AdvanceFileUpload.Application.Exception.html": {
    "href": "api/AdvanceFileUpload.Application.Exception.html",
    "title": "Namespace AdvanceFileUpload.Application.Exception | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application.Exception Classes ApplicationException"
  },
  "api/AdvanceFileUpload.Application.IUploadManger.html": {
    "href": "api/AdvanceFileUpload.Application.IUploadManger.html",
    "title": "Interface IUploadManger | Uploading File API",
    "keywords": "Interface IUploadManger Namespace AdvanceFileUpload.Application Assembly AdvanceFileUpload.Application.dll Interface for managing file upload sessions. public interface IUploadManger Methods CancelUploadSessionAsync(Guid, CancellationToken) Cancels the file upload session asynchronously. Task<bool> CancelUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the session was canceled successfully. CompleteUploadSessionAsync(Guid, CancellationToken) Completes the file upload session asynchronously. Task<bool> CompleteUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the File was Uploading Completed successfully. CreateUploadSessionAsync(CreateUploadSessionRequest, CancellationToken) Creates a new file upload session asynchronously. Task<CreateUploadSessionResponse> CreateUploadSessionAsync(CreateUploadSessionRequest request, CancellationToken cancellationToken = default) Parameters request CreateUploadSessionRequest The request containing the details of the file to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<CreateUploadSessionResponse> A task that represents the asynchronous operation. The task result contains the response with the details of the created upload session. GetUploadSessionStatusAsync(Guid, CancellationToken) Gets the status of the upload session asynchronously. Task<UploadSessionStatusResponse?> GetUploadSessionStatusAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<UploadSessionStatusResponse> A task that represents the asynchronous operation. The task result contains the response with the status of the upload session. PauseUploadSessionAsync(Guid, CancellationToken) pause the file upload session asynchronously. Task<bool> PauseUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the session was paused successfully. UploadChunkAsync(UploadChunkRequest, CancellationToken) Uploads a chunk of the file asynchronously. Task<bool> UploadChunkAsync(UploadChunkRequest request, CancellationToken cancellationToken = default) Parameters request UploadChunkRequest The request containing the details of the chunk to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the chunk was uploaded successfully."
  },
  "api/AdvanceFileUpload.Application.Settings.IUploadSetting.html": {
    "href": "api/AdvanceFileUpload.Application.Settings.IUploadSetting.html",
    "title": "Interface IUploadSetting | Uploading File API",
    "keywords": "Interface IUploadSetting Namespace AdvanceFileUpload.Application.Settings Assembly AdvanceFileUpload.Application.dll Interface for upload settings. public interface IUploadSetting Properties AllowedExtensions Gets or sets the allowed file extensions. string[] AllowedExtensions { get; set; } Property Value string[] Examples For example: new string[] { \".jpg\", \".png\", \".pdf\" } MaxChunkSize Gets or sets the maximum chunk size for file uploads. long MaxChunkSize { get; set; } Property Value long MaxFileSize Gets or sets the maximum file size for uploads. long MaxFileSize { get; set; } Property Value long SavingDirectory Gets or sets the directory where files will be saved. string SavingDirectory { get; set; } Property Value string TempDirectory Gets or sets the directory where temporary files will be saved. string TempDirectory { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.Application.Settings.UploadSetting.html": {
    "href": "api/AdvanceFileUpload.Application.Settings.UploadSetting.html",
    "title": "Class UploadSetting | Uploading File API",
    "keywords": "Class UploadSetting Namespace AdvanceFileUpload.Application.Settings Assembly AdvanceFileUpload.Application.dll Represents the upload settings. public sealed class UploadSetting : IUploadSetting Inheritance object UploadSetting Implements IUploadSetting Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields DefaultMaxChunkSize The default maximum chunk file size. public const long DefaultMaxChunkSize = 2097152 Field Value long SectionName The name of the section in the configuration file. public const string SectionName = \"UploadSetting\" Field Value string Properties AllowedExtensions Gets or sets the allowed file extensions. public required string[] AllowedExtensions { get; set; } Property Value string[] Examples For example: new string[] { \".jpg\", \".png\", \".pdf\" } MaxChunkSize Gets or sets the maximum chunk size for file uploads. public long MaxChunkSize { get; set; } Property Value long MaxFileSize Gets or sets the maximum file size for uploads. public long MaxFileSize { get; set; } Property Value long SavingDirectory Gets or sets the directory where files will be saved. public required string SavingDirectory { get; set; } Property Value string TempDirectory Gets or sets the directory where temporary files will be saved. public required string TempDirectory { get; set; } Property Value string"
  },
  "api/AdvanceFileUpload.Application.Settings.html": {
    "href": "api/AdvanceFileUpload.Application.Settings.html",
    "title": "Namespace AdvanceFileUpload.Application.Settings | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application.Settings Classes UploadSetting Represents the upload settings. Interfaces IUploadSetting Interface for upload settings."
  },
  "api/AdvanceFileUpload.Application.Shared.ChunkValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.ChunkValidator.html",
    "title": "Class ChunkValidator | Uploading File API",
    "keywords": "Class ChunkValidator Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Represents a chunk validator. public sealed class ChunkValidator : IChunkValidator Inheritance object ChunkValidator Implements IChunkValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods ValidateChunkData(byte[], long) Validates the chunk data. public bool ValidateChunkData(byte[] chunkData, long MaxChunkSize) Parameters chunkData byte[] The data of the chunk to validate. MaxChunkSize long The maximum size of the chunk. Returns bool True if the chunk data is valid; otherwise, false. ValidateChunkIndex(int) Validates the chunk index. public bool ValidateChunkIndex(int chunkIndex) Parameters chunkIndex int The index of the chunk to validate. Returns bool True if the chunk index is valid; otherwise, false. ValidateChunkSize(long, long) Validates the size of the chunk. public bool ValidateChunkSize(long chunkSize, long maxChunkSize) Parameters chunkSize long The size of the chunk to validate. maxChunkSize long The maximum allowed size of the chunk. Returns bool True if the chunk size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Shared.CreateUploadSessionRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.CreateUploadSessionRequest.html",
    "title": "Class CreateUploadSessionRequest | Uploading File API",
    "keywords": "Class CreateUploadSessionRequest Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to create a new file upload session. public sealed class CreateUploadSessionRequest Inheritance object CreateUploadSessionRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FileExtension Gets the file extension of the file to be uploaded. public required string FileExtension { get; init; } Property Value string FileName Gets the name of the file to be uploaded. public required string FileName { get; init; } Property Value string FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long"
  },
  "api/AdvanceFileUpload.Application.Shared.CreateUploadSessionResponse.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.CreateUploadSessionResponse.html",
    "title": "Class CreateUploadSessionResponse | Uploading File API",
    "keywords": "Class CreateUploadSessionResponse Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Represents the response after creating a new file upload session. public sealed class CreateUploadSessionResponse Inheritance object CreateUploadSessionResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long MaxMaxChunkSize Gets the maximum size of each chunk. public long MaxMaxChunkSize { get; init; } Property Value long SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid SessionStartDate Gets the start date and time of the upload session. public DateTime SessionStartDate { get; init; } Property Value DateTime TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; init; } Property Value int UploadStatus Gets the current status of the upload session. public UploadStatus UploadStatus { get; init; } Property Value UploadStatus"
  },
  "api/AdvanceFileUpload.Application.Shared.FileOperationService.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.FileOperationService.html",
    "title": "Class FileOperationService | Uploading File API",
    "keywords": "Class FileOperationService Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Provides methods for file operations such as concatenating file chunks, saving files, and splitting files into chunks. public class FileOperationService : IFileOperationService Inheritance object FileOperationService Implements IFileOperationService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConcatenateChunksAsync(List<string>, string, CancellationToken) Concatenates multiple file chunks into a single file. public Task ConcatenateChunksAsync(List<string> chunkPaths, string outputFilePath, CancellationToken cancellationToken = default) Parameters chunkPaths List<string> The list of paths to the file chunks. outputFilePath string The path where the concatenated file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SaveFileAsync(string, byte[], string, CancellationToken) Saves a file to the specified directory. public Task SaveFileAsync(string fileName, byte[] fileData, string directory, CancellationToken cancellationToken = default) Parameters fileName string The name of the file to save. fileData byte[] The byte array containing the file data. directory string The directory where the file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SplitFileIntoChunksAsync(string, long, string, CancellationToken) Splits a file into multiple chunks. public Task<List<string>> SplitFileIntoChunksAsync(string filePath, long chunkSize, string outputDirectory, CancellationToken cancellationToken = default) Parameters filePath string The path to the file to be split. chunkSize long The size of each chunk in bytes. outputDirectory string The directory where the chunks will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<List<string>> A task that represents the asynchronous operation. The task result contains a list of paths to the created chunks."
  },
  "api/AdvanceFileUpload.Application.Shared.FileValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.FileValidator.html",
    "title": "Class FileValidator | Uploading File API",
    "keywords": "Class FileValidator Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Represents a file validator. public sealed class FileValidator : IFileValidator Inheritance object FileValidator Implements IFileValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods ValidateFileExtension(string, string[]) Validates the file extension. public bool ValidateFileExtension(string fileExtension, string[] allowedExtensions) Parameters fileExtension string The extension of the file to validate. allowedExtensions string[] The allowed extensions of the file to validate. Returns bool True if the file extension is valid; otherwise, false. ValidateFileName(string) Validates the file name. public bool ValidateFileName(string fileName) Parameters fileName string The name of the file to validate. Returns bool True if the file name is valid; otherwise, false. ValidateFileSize(long, long) Validates the file size. public bool ValidateFileSize(long fileSize, long maxFileSize) Parameters fileSize long The size of the file to validate. maxFileSize long The maximum allowed size of the file. Returns bool True if the file size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Shared.IChunkValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.IChunkValidator.html",
    "title": "Interface IChunkValidator | Uploading File API",
    "keywords": "Interface IChunkValidator Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Interface for validating file chunks. public interface IChunkValidator Methods ValidateChunkData(byte[], long) Validates the chunk data. bool ValidateChunkData(byte[] chunkData, long MaxChunkSize) Parameters chunkData byte[] The data of the chunk to validate. MaxChunkSize long The maximum size of the chunk. Returns bool True if the chunk data is valid; otherwise, false. ValidateChunkIndex(int) Validates the chunk index. bool ValidateChunkIndex(int chunkIndex) Parameters chunkIndex int The index of the chunk to validate. Returns bool True if the chunk index is valid; otherwise, false. ValidateChunkSize(long, long) Validates the size of the chunk. bool ValidateChunkSize(long chunkSize, long maxChunkSize) Parameters chunkSize long The size of the chunk to validate. maxChunkSize long The maximum allowed size of the chunk. Returns bool True if the chunk size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Shared.IFileOperationService.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.IFileOperationService.html",
    "title": "Interface IFileOperationService | Uploading File API",
    "keywords": "Interface IFileOperationService Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Provides methods for file operations such as concatenating file chunks, saving files, and splitting files into chunks. public interface IFileOperationService Methods ConcatenateChunksAsync(List<string>, string, CancellationToken) Concatenates multiple file chunks into a single file. Task ConcatenateChunksAsync(List<string> chunkPaths, string outputFilePath, CancellationToken cancellationToken = default) Parameters chunkPaths List<string> The list of paths to the file chunks. outputFilePath string The path where the concatenated file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SaveFileAsync(string, byte[], string, CancellationToken) Saves a file to the specified directory. Task SaveFileAsync(string fileName, byte[] fileData, string directory, CancellationToken cancellationToken = default) Parameters fileName string The name of the file to save. fileData byte[] The byte array containing the file data. directory string The directory where the file will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. SplitFileIntoChunksAsync(string, long, string, CancellationToken) Splits a file into multiple chunks. Task<List<string>> SplitFileIntoChunksAsync(string filePath, long chunkSize, string outputDirectory, CancellationToken cancellationToken = default) Parameters filePath string The path to the file to be split. chunkSize long The size of each chunk in bytes. outputDirectory string The directory where the chunks will be saved. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<List<string>> A task that represents the asynchronous operation. The task result contains a list of paths to the created chunks."
  },
  "api/AdvanceFileUpload.Application.Shared.IFileValidator.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.IFileValidator.html",
    "title": "Interface IFileValidator | Uploading File API",
    "keywords": "Interface IFileValidator Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Interface for validating files. public interface IFileValidator Methods ValidateFileExtension(string, string[]) Validates the file extension. bool ValidateFileExtension(string fileExtension, string[] allowedExtensions) Parameters fileExtension string The extension of the file to validate. allowedExtensions string[] The allowed extensions of the file to validate. Returns bool True if the file extension is valid; otherwise, false. ValidateFileName(string) Validates the file name. bool ValidateFileName(string fileName) Parameters fileName string The name of the file to validate. Returns bool True if the file name is valid; otherwise, false. ValidateFileSize(long, long) Validates the file size. bool ValidateFileSize(long fileSize, long maxFileSize) Parameters fileSize long The size of the file to validate. maxFileSize long The maximum allowed size of the file. Returns bool True if the file size is valid; otherwise, false."
  },
  "api/AdvanceFileUpload.Application.Shared.UploadChunkRequest.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.UploadChunkRequest.html",
    "title": "Class UploadChunkRequest | Uploading File API",
    "keywords": "Class UploadChunkRequest Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Represents a request to upload a chunk of a file. public sealed class UploadChunkRequest Inheritance object UploadChunkRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ChunkData Gets the data of the chunk being uploaded. public required byte[] ChunkData { get; init; } Property Value byte[] ChunkIndex Gets the index of the chunk being uploaded. public int ChunkIndex { get; init; } Property Value int SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Application.Shared.UploadSessionStatusResponse.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.UploadSessionStatusResponse.html",
    "title": "Class UploadSessionStatusResponse | Uploading File API",
    "keywords": "Class UploadSessionStatusResponse Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Represents the status response of an upload session. public sealed class UploadSessionStatusResponse Inheritance object UploadSessionStatusResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FileSize Gets the size of the file to be uploaded. public long FileSize { get; init; } Property Value long MaxMaxChunkSize Gets the maximum size of each chunk. public long MaxMaxChunkSize { get; init; } Property Value long ProgressPercentage Gets the progress percentage of the file upload. public double ProgressPercentage { get; init; } Property Value double RemainChunks Gets the list of remaining chunks to be uploaded. public List<int>? RemainChunks { get; init; } Property Value List<int> SessionEndDate Gets the end date and time of the upload session, if it has ended. public DateTime? SessionEndDate { get; init; } Property Value DateTime? SessionId Gets the unique identifier of the upload session. public Guid SessionId { get; init; } Property Value Guid SessionStartDate Gets the start date and time of the upload session. public DateTime SessionStartDate { get; init; } Property Value DateTime TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; init; } Property Value int TotalUploadedChunks Gets the total number of chunks that have been uploaded. public int TotalUploadedChunks { get; init; } Property Value int UploadStatus Gets the current status of the upload session. public UploadStatus UploadStatus { get; init; } Property Value UploadStatus"
  },
  "api/AdvanceFileUpload.Application.Shared.UploadStatus.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.UploadStatus.html",
    "title": "Enum UploadStatus | Uploading File API",
    "keywords": "Enum UploadStatus Namespace AdvanceFileUpload.Application.Shared Assembly AdvanceFileUpload.Application.Shared.dll Represents the status of an upload session. public enum UploadStatus Fields Completed = 2 The upload session is completed. Failed = 3 The upload session has failed. InProgress = 1 The upload session is in progress. Pending = 0 The upload session is pending."
  },
  "api/AdvanceFileUpload.Application.Shared.html": {
    "href": "api/AdvanceFileUpload.Application.Shared.html",
    "title": "Namespace AdvanceFileUpload.Application.Shared | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application.Shared Classes ChunkValidator Represents a chunk validator. CreateUploadSessionRequest Represents a request to create a new file upload session. CreateUploadSessionResponse Represents the response after creating a new file upload session. FileOperationService Provides methods for file operations such as concatenating file chunks, saving files, and splitting files into chunks. FileValidator Represents a file validator. UploadChunkRequest Represents a request to upload a chunk of a file. UploadSessionStatusResponse Represents the status response of an upload session. Interfaces IChunkValidator Interface for validating file chunks. IFileOperationService Provides methods for file operations such as concatenating file chunks, saving files, and splitting files into chunks. IFileValidator Interface for validating files. Enums UploadStatus Represents the status of an upload session."
  },
  "api/AdvanceFileUpload.Application.UploadManger.html": {
    "href": "api/AdvanceFileUpload.Application.UploadManger.html",
    "title": "Class UploadManger | Uploading File API",
    "keywords": "Class UploadManger Namespace AdvanceFileUpload.Application Assembly AdvanceFileUpload.Application.dll Represents the upload manager. public class UploadManger : IUploadManger Inheritance object UploadManger Implements IUploadManger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadManger(IRepository<FileUploadSession>, IDomainEventPublisher, IFileValidator, IChunkValidator, IOptions<UploadSetting>, IFileOperationService, ILogger<UploadManger>) Initializes a new instance of the UploadManger class. public UploadManger(IRepository<FileUploadSession> repository, IDomainEventPublisher domainEventPublisher, IFileValidator fileValidator, IChunkValidator chunkValidator, IOptions<UploadSetting> uploadSetting, IFileOperationService fileOperationService, ILogger<UploadManger> logger) Parameters repository IRepository<FileUploadSession> The repository for managing file upload sessions. domainEventPublisher IDomainEventPublisher The publisher for domain events. fileValidator IFileValidator The validator for file properties. chunkValidator IChunkValidator The validator for file chunks. uploadSetting IOptions<UploadSetting> The settings for file uploads. fileOperationService IFileOperationService The service for file operations. logger ILogger<UploadManger> The logger for logging information. Exceptions ArgumentNullException Thrown when any of the parameters are null. Methods CancelUploadSessionAsync(Guid, CancellationToken) Cancels the file upload session asynchronously. public Task<bool> CancelUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the session was canceled successfully. CompleteUploadSessionAsync(Guid, CancellationToken) Completes the file upload session asynchronously. public Task<bool> CompleteUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the File was Uploading Completed successfully. CreateUploadSessionAsync(CreateUploadSessionRequest, CancellationToken) Creates a new file upload session asynchronously. public Task<CreateUploadSessionResponse> CreateUploadSessionAsync(CreateUploadSessionRequest request, CancellationToken cancellationToken = default) Parameters request CreateUploadSessionRequest The request containing the details of the file to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<CreateUploadSessionResponse> A task that represents the asynchronous operation. The task result contains the response with the details of the created upload session. GetUploadSessionStatusAsync(Guid, CancellationToken) Gets the status of the upload session asynchronously. public Task<UploadSessionStatusResponse?> GetUploadSessionStatusAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<UploadSessionStatusResponse> A task that represents the asynchronous operation. The task result contains the response with the status of the upload session. PauseUploadSessionAsync(Guid, CancellationToken) pause the file upload session asynchronously. public Task<bool> PauseUploadSessionAsync(Guid sessionId, CancellationToken cancellationToken = default) Parameters sessionId Guid The unique identifier of the upload session. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the session was paused successfully. UploadChunkAsync(UploadChunkRequest, CancellationToken) Uploads a chunk of the file asynchronously. public Task<bool> UploadChunkAsync(UploadChunkRequest request, CancellationToken cancellationToken = default) Parameters request UploadChunkRequest The request containing the details of the chunk to be uploaded. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the chunk was uploaded successfully."
  },
  "api/AdvanceFileUpload.Application.html": {
    "href": "api/AdvanceFileUpload.Application.html",
    "title": "Namespace AdvanceFileUpload.Application | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Application Classes UploadManger Represents the upload manager. Interfaces IUploadManger Interface for managing file upload sessions."
  },
  "api/AdvanceFileUpload.Domain.ChunkFile.html": {
    "href": "api/AdvanceFileUpload.Domain.ChunkFile.html",
    "title": "Class ChunkFile | Uploading File API",
    "keywords": "Class ChunkFile Namespace AdvanceFileUpload.Domain Assembly AdvanceFileUpload.Domain.dll Represents a chunk file in a file upload session. public sealed class ChunkFile : EntityBase Inheritance object EntityBase ChunkFile Inherited Members EntityBase.Id EntityBase.DomainEvents EntityBase.ClearDomainEvents() EntityBase.Equals(object) EntityBase.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ChunkIndex Gets the index of the chunk. public int ChunkIndex { get; } Property Value int ChunkPath Gets the path of the chunk file. public string ChunkPath { get; } Property Value string ChunkSize Gets the size of the chunk file. public long ChunkSize { get; } Property Value long SessionId Gets the session identifier to which this chunk belongs. public Guid SessionId { get; } Property Value Guid"
  },
  "api/AdvanceFileUpload.Domain.Core.DomainEventBase.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.DomainEventBase.html",
    "title": "Class DomainEventBase | Uploading File API",
    "keywords": "Class DomainEventBase Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll public abstract class DomainEventBase : IDomainEvent, INotification Inheritance object DomainEventBase Implements IDomainEvent INotification Derived ChunkUploadedEvent FileUploadSessionCanceledEvent FileUploadSessionCompletedEvent FileUploadSessionCreatedEvent FileUploadSessionPausedEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DomainEventBase() protected DomainEventBase() Properties Id Gets the unique identifier of the domain event. public Guid Id { get; } Property Value Guid OccurredOn Gets the date and time when the event occurred. public DateTime OccurredOn { get; } Property Value DateTime"
  },
  "api/AdvanceFileUpload.Domain.Core.DomainException.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.DomainException.html",
    "title": "Class DomainException | Uploading File API",
    "keywords": "Class DomainException Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Represents errors that occur during domain operations. public class DomainException : Exception, ISerializable Inheritance object Exception DomainException Implements ISerializable Derived CancelationFileUploadException ChunkUploadingException CompletingFileUploadException PauseFileUploadException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DomainException(string?) Initializes a new instance of the DomainException class with a specified error message. public DomainException(string? message) Parameters message string The message that describes the error. DomainException(string?, Exception?) Initializes a new instance of the DomainException class with a specified error message and a reference to the inner exception that is the cause of this exception. public DomainException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception."
  },
  "api/AdvanceFileUpload.Domain.Core.EntityBase.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.EntityBase.html",
    "title": "Class EntityBase | Uploading File API",
    "keywords": "Class EntityBase Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Represents the base class for all entities in the domain. public abstract class EntityBase Inheritance object EntityBase Derived ChunkFile FileUploadSession Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EntityBase() Initializes a new instance of the EntityBase class. protected EntityBase() Properties DomainEvents Gets the domain events associated with the entity. public IReadOnlyCollection<IDomainEvent> DomainEvents { get; } Property Value IReadOnlyCollection<IDomainEvent> Id Gets the unique identifier for the entity. public Guid Id { get; protected set; } Property Value Guid Methods AddDomainEvent(IDomainEvent) Adds a domain event to the entity. protected void AddDomainEvent(IDomainEvent domainEvent) Parameters domainEvent IDomainEvent The domain event to add. ClearDomainEvents() Clears all domain events from the entity. public void ClearDomainEvents() Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(EntityBase, EntityBase) Determines whether two instances of EntityBase are equal. public static bool operator ==(EntityBase left, EntityBase right) Parameters left EntityBase The left instance to compare. right EntityBase The right instance to compare. Returns bool True if the instances are equal; otherwise, false. operator !=(EntityBase, EntityBase) Determines whether two instances of EntityBase are not equal. public static bool operator !=(EntityBase left, EntityBase right) Parameters left EntityBase The left instance to compare. right EntityBase The right instance to compare. Returns bool True if the instances are not equal; otherwise, false."
  },
  "api/AdvanceFileUpload.Domain.Core.IAggregateRoot.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.IAggregateRoot.html",
    "title": "Interface IAggregateRoot | Uploading File API",
    "keywords": "Interface IAggregateRoot Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Marker interface to indicate that an entity is an aggregate root. public interface IAggregateRoot"
  },
  "api/AdvanceFileUpload.Domain.Core.IDomainEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.IDomainEvent.html",
    "title": "Interface IDomainEvent | Uploading File API",
    "keywords": "Interface IDomainEvent Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll public interface IDomainEvent : INotification Properties Id Gets the unique identifier of the domain event. Guid Id { get; } Property Value Guid OccurredOn Gets the date and time when the event occurred. DateTime OccurredOn { get; } Property Value DateTime"
  },
  "api/AdvanceFileUpload.Domain.Core.IDomainEventPublisher.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.IDomainEventPublisher.html",
    "title": "Interface IDomainEventPublisher | Uploading File API",
    "keywords": "Interface IDomainEventPublisher Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll public interface IDomainEventPublisher Methods PublishAsync(IDomainEvent, CancellationToken) Task PublishAsync(IDomainEvent domainEvent, CancellationToken cancellationToken = default) Parameters domainEvent IDomainEvent cancellationToken CancellationToken Returns Task PublishAsync(IEnumerable<IDomainEvent>, CancellationToken) Task PublishAsync(IEnumerable<IDomainEvent> domainEvents, CancellationToken cancellationToken = default) Parameters domainEvents IEnumerable<IDomainEvent> cancellationToken CancellationToken Returns Task"
  },
  "api/AdvanceFileUpload.Domain.Core.IRepository-1.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.IRepository-1.html",
    "title": "Interface IRepository<TEntity> | Uploading File API",
    "keywords": "Interface IRepository<TEntity> Namespace AdvanceFileUpload.Domain.Core Assembly AdvanceFileUpload.Domain.dll Defines a generic repository interface for performing CRUD operations on entities. public interface IRepository<TEntity> where TEntity : IAggregateRoot Type Parameters TEntity The type of the entity. Methods AddAsync(TEntity, CancellationToken) Asynchronously adds a new entity to the repository. Task<TEntity> AddAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity to add. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<TEntity> A task that represents the asynchronous operation. The task result contains the added entity. AnyAsync(Expression<Func<TEntity, bool>>, CancellationToken) Asynchronously determines whether any entities match the specified predicate. Task<bool> AnyAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<TEntity, bool>> The expression to filter entities. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<bool> A task that represents the asynchronous operation. The task result is true if any matching entities exist; otherwise, false. AnyAsync(CancellationToken) Asynchronously determines whether any entities exist in the repository. Task<bool> AnyAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<bool> A task that represents the asynchronous operation. The task result is true if any entities exist; otherwise, false. CountAsync(Expression<Func<TEntity, bool>>, CancellationToken) Asynchronously counts the number of entities that match the specified predicate. Task<int> CountAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<TEntity, bool>> The expression to filter entities. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<int> A task that represents the asynchronous operation. The task result contains the count of matching entities. CountAsync(CancellationToken) Asynchronously counts the total number of entities in the repository. Task<int> CountAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<int> A task that represents the asynchronous operation. The task result contains the count of entities. FindAsync(Expression<Func<TEntity, bool>>, CancellationToken) Asynchronously finds entities that match the specified predicate. Task<IEnumerable<TEntity>> FindAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<TEntity, bool>> The expression to filter entities. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<IEnumerable<TEntity>> A task that represents the asynchronous operation. The task result contains a collection of matching entities. GetAllAsync(CancellationToken) Asynchronously retrieves all entities from the repository. Task<IEnumerable<TEntity>> GetAllAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<IEnumerable<TEntity>> A task that represents the asynchronous operation. The task result contains a collection of all entities. GetByIdAsync(Guid, CancellationToken) Asynchronously retrieves an entity by its unique identifier. Task<TEntity> GetByIdAsync(Guid id, CancellationToken cancellationToken = default) Parameters id Guid The unique identifier of the entity. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<TEntity> A task that represents the asynchronous operation. The task result contains the entity if found. RemoveAsync(TEntity, CancellationToken) Asynchronously removes an entity from the repository. Task RemoveAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity to remove. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. SaveChangesAsync(CancellationToken) Task<int> SaveChangesAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<int> UpdateAsync(TEntity, CancellationToken) Asynchronously updates an existing entity in the repository. Task<TEntity> UpdateAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity The entity with updated values. cancellationToken CancellationToken Token to monitor for cancellation requests. Returns Task<TEntity> A task that represents the asynchronous operation. The task result contains the updated entity."
  },
  "api/AdvanceFileUpload.Domain.Core.html": {
    "href": "api/AdvanceFileUpload.Domain.Core.html",
    "title": "Namespace AdvanceFileUpload.Domain.Core | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Domain.Core Classes DomainEventBase DomainException Represents errors that occur during domain operations. EntityBase Represents the base class for all entities in the domain. Interfaces IAggregateRoot Marker interface to indicate that an entity is an aggregate root. IDomainEvent IDomainEventPublisher IRepository<TEntity> Defines a generic repository interface for performing CRUD operations on entities."
  },
  "api/AdvanceFileUpload.Domain.Events.ChunkUploadedEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.ChunkUploadedEvent.html",
    "title": "Class ChunkUploadedEvent | Uploading File API",
    "keywords": "Class ChunkUploadedEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll Event that is triggered when a chunk of a file is uploaded. public sealed class ChunkUploadedEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase ChunkUploadedEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ChunkUploadedEvent(ChunkFile) Initializes a new instance of the ChunkUploadedEvent class. public ChunkUploadedEvent(ChunkFile chunkFile) Parameters chunkFile ChunkFile The chunk file that has been uploaded. Exceptions ArgumentNullException Thrown when the chunk file is null. Properties ChunkFile Gets the chunk file associated with this event. public ChunkFile ChunkFile { get; } Property Value ChunkFile"
  },
  "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCanceledEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCanceledEvent.html",
    "title": "Class FileUploadSessionCanceledEvent | Uploading File API",
    "keywords": "Class FileUploadSessionCanceledEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll Event that is triggered when a file upload session is canceled. public sealed class FileUploadSessionCanceledEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase FileUploadSessionCanceledEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionCanceledEvent(FileUploadSession) Initializes a new instance of the FileUploadSessionCanceledEvent class. public FileUploadSessionCanceledEvent(FileUploadSession fileUploadSession) Parameters fileUploadSession FileUploadSession The file upload session that has been canceled. Exceptions ArgumentNullException Thrown when the file upload session is null. Properties FileUploadSession Gets the file upload session associated with this event. public FileUploadSession FileUploadSession { get; } Property Value FileUploadSession"
  },
  "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCompletedEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCompletedEvent.html",
    "title": "Class FileUploadSessionCompletedEvent | Uploading File API",
    "keywords": "Class FileUploadSessionCompletedEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll Event that is triggered when a file upload session is completed. public sealed class FileUploadSessionCompletedEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase FileUploadSessionCompletedEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionCompletedEvent(FileUploadSession) Initializes a new instance of the FileUploadSessionCompletedEvent class. public FileUploadSessionCompletedEvent(FileUploadSession fileUploadSession) Parameters fileUploadSession FileUploadSession The file upload session that has been completed. Exceptions ArgumentNullException Thrown when the file upload session is null. Properties FileUploadSession Gets the file upload session associated with this event. public FileUploadSession FileUploadSession { get; } Property Value FileUploadSession"
  },
  "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCreatedEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.FileUploadSessionCreatedEvent.html",
    "title": "Class FileUploadSessionCreatedEvent | Uploading File API",
    "keywords": "Class FileUploadSessionCreatedEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll Event that is triggered when a file upload session Created. public sealed class FileUploadSessionCreatedEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase FileUploadSessionCreatedEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionCreatedEvent(FileUploadSession) Initializes a new instance of the FileUploadSessionCreatedEvent class. public FileUploadSessionCreatedEvent(FileUploadSession fileUploadSession) Parameters fileUploadSession FileUploadSession The file upload session that has Created. Exceptions ArgumentNullException Thrown when the file upload session is null. Properties FileUploadSession Gets the file upload session associated with this event. public FileUploadSession FileUploadSession { get; } Property Value FileUploadSession"
  },
  "api/AdvanceFileUpload.Domain.Events.FileUploadSessionPausedEvent.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.FileUploadSessionPausedEvent.html",
    "title": "Class FileUploadSessionPausedEvent | Uploading File API",
    "keywords": "Class FileUploadSessionPausedEvent Namespace AdvanceFileUpload.Domain.Events Assembly AdvanceFileUpload.Domain.dll Event that is triggered when a file upload session is paused. public sealed class FileUploadSessionPausedEvent : DomainEventBase, IDomainEvent, INotification Inheritance object DomainEventBase FileUploadSessionPausedEvent Implements IDomainEvent INotification Inherited Members DomainEventBase.Id DomainEventBase.OccurredOn object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSessionPausedEvent(FileUploadSession) Initializes a new instance of the FileUploadSessionPausedEvent class. public FileUploadSessionPausedEvent(FileUploadSession fileUploadSession) Parameters fileUploadSession FileUploadSession The file upload session that has been paused. Exceptions ArgumentNullException Thrown when the file upload session is null. Properties FileUploadSession Gets the file upload session associated with this event. public FileUploadSession FileUploadSession { get; } Property Value FileUploadSession"
  },
  "api/AdvanceFileUpload.Domain.Events.html": {
    "href": "api/AdvanceFileUpload.Domain.Events.html",
    "title": "Namespace AdvanceFileUpload.Domain.Events | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Domain.Events Classes ChunkUploadedEvent Event that is triggered when a chunk of a file is uploaded. FileUploadSessionCanceledEvent Event that is triggered when a file upload session is canceled. FileUploadSessionCompletedEvent Event that is triggered when a file upload session is completed. FileUploadSessionCreatedEvent Event that is triggered when a file upload session Created. FileUploadSessionPausedEvent Event that is triggered when a file upload session is paused."
  },
  "api/AdvanceFileUpload.Domain.Exception.CancelationFileUploadException.html": {
    "href": "api/AdvanceFileUpload.Domain.Exception.CancelationFileUploadException.html",
    "title": "Class CancelationFileUploadException | Uploading File API",
    "keywords": "Class CancelationFileUploadException Namespace AdvanceFileUpload.Domain.Exception Assembly AdvanceFileUpload.Domain.dll Represents errors that occur during the cancellation of a file upload. public class CancelationFileUploadException : DomainException, ISerializable Inheritance object Exception DomainException CancelationFileUploadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CancelationFileUploadException(string?) Initializes a new instance of the CancelationFileUploadException class with a specified error message. public CancelationFileUploadException(string? message) Parameters message string The message that describes the error. CancelationFileUploadException(string?, Exception?) Initializes a new instance of the CancelationFileUploadException class with a specified error message and a reference to the inner exception that is the cause of this exception. public CancelationFileUploadException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception."
  },
  "api/AdvanceFileUpload.Domain.Exception.ChunkUploadingException.html": {
    "href": "api/AdvanceFileUpload.Domain.Exception.ChunkUploadingException.html",
    "title": "Class ChunkUploadingException | Uploading File API",
    "keywords": "Class ChunkUploadingException Namespace AdvanceFileUpload.Domain.Exception Assembly AdvanceFileUpload.Domain.dll Represents errors that occur during the uploading of file chunks. public class ChunkUploadingException : DomainException, ISerializable Inheritance object Exception DomainException ChunkUploadingException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ChunkUploadingException(string?) Initializes a new instance of the ChunkUploadingException class with a specified error message. public ChunkUploadingException(string? message) Parameters message string The message that describes the error. ChunkUploadingException(string?, Exception?) Initializes a new instance of the ChunkUploadingException class with a specified error message and a reference to the inner exception that is the cause of this exception. public ChunkUploadingException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception."
  },
  "api/AdvanceFileUpload.Domain.Exception.CompletingFileUploadException.html": {
    "href": "api/AdvanceFileUpload.Domain.Exception.CompletingFileUploadException.html",
    "title": "Class CompletingFileUploadException | Uploading File API",
    "keywords": "Class CompletingFileUploadException Namespace AdvanceFileUpload.Domain.Exception Assembly AdvanceFileUpload.Domain.dll Represents errors that occur during the completion of a file upload. public class CompletingFileUploadException : DomainException, ISerializable Inheritance object Exception DomainException CompletingFileUploadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CompletingFileUploadException(string?) Initializes a new instance of the CompletingFileUploadException class with a specified error message. public CompletingFileUploadException(string? message) Parameters message string The message that describes the error. CompletingFileUploadException(string?, Exception?) Initializes a new instance of the CompletingFileUploadException class with a specified error message and a reference to the inner exception that is the cause of this exception. public CompletingFileUploadException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception."
  },
  "api/AdvanceFileUpload.Domain.Exception.PauseFileUploadException.html": {
    "href": "api/AdvanceFileUpload.Domain.Exception.PauseFileUploadException.html",
    "title": "Class PauseFileUploadException | Uploading File API",
    "keywords": "Class PauseFileUploadException Namespace AdvanceFileUpload.Domain.Exception Assembly AdvanceFileUpload.Domain.dll Represents errors that occur during the pausing of a file upload. public class PauseFileUploadException : DomainException, ISerializable Inheritance object Exception DomainException PauseFileUploadException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PauseFileUploadException(string?) Initializes a new instance of the PauseFileUploadException class with a specified error message. public PauseFileUploadException(string? message) Parameters message string The message that describes the error. PauseFileUploadException(string?, Exception?) Initializes a new instance of the PauseFileUploadException class with a specified error message and a reference to the inner exception that is the cause of this exception. public PauseFileUploadException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception."
  },
  "api/AdvanceFileUpload.Domain.Exception.html": {
    "href": "api/AdvanceFileUpload.Domain.Exception.html",
    "title": "Namespace AdvanceFileUpload.Domain.Exception | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Domain.Exception Classes CancelationFileUploadException Represents errors that occur during the cancellation of a file upload. ChunkUploadingException Represents errors that occur during the uploading of file chunks. CompletingFileUploadException Represents errors that occur during the completion of a file upload. PauseFileUploadException Represents errors that occur during the pausing of a file upload."
  },
  "api/AdvanceFileUpload.Domain.Extensions.DateTmeExtensions.html": {
    "href": "api/AdvanceFileUpload.Domain.Extensions.DateTmeExtensions.html",
    "title": "Class DateTmeExtensions | Uploading File API",
    "keywords": "Class DateTmeExtensions Namespace AdvanceFileUpload.Domain.Extensions Assembly AdvanceFileUpload.Domain.dll Provides extension methods for DateTime objects. public static class DateTmeExtensions Inheritance object DateTmeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToDateOnly(DateTime) Converts a DateTime object to a DateOnly object. public static DateOnly ToDateOnly(this DateTime dateTime) Parameters dateTime DateTime The DateTime object to convert. Returns DateOnly A DateOnly object representing the date component of the DateTime object."
  },
  "api/AdvanceFileUpload.Domain.Extensions.html": {
    "href": "api/AdvanceFileUpload.Domain.Extensions.html",
    "title": "Namespace AdvanceFileUpload.Domain.Extensions | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Domain.Extensions Classes DateTmeExtensions Provides extension methods for DateTime objects."
  },
  "api/AdvanceFileUpload.Domain.FileUploadSession.html": {
    "href": "api/AdvanceFileUpload.Domain.FileUploadSession.html",
    "title": "Class FileUploadSession | Uploading File API",
    "keywords": "Class FileUploadSession Namespace AdvanceFileUpload.Domain Assembly AdvanceFileUpload.Domain.dll Represents a file upload session. public class FileUploadSession : EntityBase, IAggregateRoot Inheritance object EntityBase FileUploadSession Implements IAggregateRoot Inherited Members EntityBase.Id EntityBase.DomainEvents EntityBase.AddDomainEvent(IDomainEvent) EntityBase.ClearDomainEvents() EntityBase.Equals(object) EntityBase.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileUploadSession(string, string, long, long) Initializes a new instance of the FileUploadSession class. public FileUploadSession(string fileName, string savingDirectory, long fileSize, long maxChunkSize) Parameters fileName string The name of the file being uploaded. savingDirectory string The directory where the file is being saved. fileSize long The size of the file being uploaded. maxChunkSize long The maximum size of each chunk. Exceptions ArgumentException Thrown when any of the parameters are invalid. Properties ChunkFiles Gets the collection of chunk files. public IReadOnlyCollection<ChunkFile> ChunkFiles { get; } Property Value IReadOnlyCollection<ChunkFile> FileExtension Gets the file extension of the file being uploaded. public string FileExtension { get; } Property Value string FileName Gets the name of the file being uploaded. public string FileName { get; } Property Value string FileSize Gets the size of the file being uploaded. public long FileSize { get; } Property Value long MaxChunkSize Gets the maximum size of each chunk. public long MaxChunkSize { get; } Property Value long ProgressPercentage Gets the progress percentage of the file upload. public double ProgressPercentage { get; } Property Value double SavingDirectory Gets the directory where the file is being saved. public string SavingDirectory { get; } Property Value string SessionEndDate Gets or sets the end date of the session. public DateTime? SessionEndDate { get; set; } Property Value DateTime? SessionStartDate Gets the start date of the session. public DateTime SessionStartDate { get; } Property Value DateTime Status Gets or sets the status of the file upload session. public FileUploadSessionStatus Status { get; set; } Property Value FileUploadSessionStatus TotalChunksToUpload Gets the total number of chunks to be uploaded. public int TotalChunksToUpload { get; } Property Value int TotalUploadedChunks Gets the total number of chunks that have been uploaded. public int TotalUploadedChunks { get; } Property Value int UploadDate Gets the upload date of the file. public DateOnly UploadDate { get; } Property Value DateOnly Methods AddChunk(int, string) Adds a chunk to the file upload session. public void AddChunk(int chunkIndex, string chunkPath) Parameters chunkIndex int The index of the chunk. chunkPath string The path of the chunk. Exceptions ChunkUploadingException Thrown when the chunk cannot be added. CancelSession() Cancels the file upload session. public void CancelSession() Exceptions CancelationFileUploadException Thrown when the session cannot be canceled. CompleteSession() Completes the file upload session. public void CompleteSession() Exceptions CompletingFileUploadException Thrown when the session cannot be completed. GetRemainChunks() Gets the remaining chunks to be uploaded. public List<int> GetRemainChunks() Returns List<int> List<int> of the remaining chunks to be uploaded. IsAllChunkUploaded() Determines whether all chunks have been uploaded. public bool IsAllChunkUploaded() Returns bool true if all chunks have been uploaded; otherwise, false. IsCanceled() Determines whether the file upload session is canceled. public bool IsCanceled() Returns bool true if the session is canceled; otherwise, false. IsChunkUploaded(int) Determines whether a specific chunk has been uploaded. public bool IsChunkUploaded(int chunkIndex) Parameters chunkIndex int The index of the chunk. Returns bool true if the chunk has been uploaded; otherwise, false. IsCompleted() Determines whether the file upload session is completed. public bool IsCompleted() Returns bool true if the session is completed; otherwise, false. PauseSession() Pauses the file upload session. public void PauseSession() Exceptions CancelationFileUploadException Thrown when the session cannot be paused."
  },
  "api/AdvanceFileUpload.Domain.FileUploadSessionStatus.html": {
    "href": "api/AdvanceFileUpload.Domain.FileUploadSessionStatus.html",
    "title": "Enum FileUploadSessionStatus | Uploading File API",
    "keywords": "Enum FileUploadSessionStatus Namespace AdvanceFileUpload.Domain Assembly AdvanceFileUpload.Domain.dll Represents the status of a file upload session. public enum FileUploadSessionStatus Fields Canceled = 3 The file upload session is canceled. Completed = 2 The file upload session is completed. Failed = 4 The file upload session has failed. InProgress = 0 The file upload session is in progress. Paused = 1 The file upload session is paused."
  },
  "api/AdvanceFileUpload.Domain.Test.FileUploadSessionTests.html": {
    "href": "api/AdvanceFileUpload.Domain.Test.FileUploadSessionTests.html",
    "title": "Class FileUploadSessionTests | Uploading File API",
    "keywords": "Class FileUploadSessionTests Namespace AdvanceFileUpload.Domain.Test Assembly AdvanceFileUpload.Domain.Test.dll public class FileUploadSessionTests Inheritance object FileUploadSessionTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddChunk_ChunkAlreadyUploaded_ShouldThrowException() [Fact] public void AddChunk_ChunkAlreadyUploaded_ShouldThrowException() AddChunk_SessionCompleted_ShouldThrowException() [Fact] public void AddChunk_SessionCompleted_ShouldThrowException() AddChunk_ValidChunk_ShouldAddChunk() [Fact] public void AddChunk_ValidChunk_ShouldAddChunk() CancelSession_ShouldCancelSession() [Fact] public void CancelSession_ShouldCancelSession() CompleteSession_ShouldCompleteSession() [Fact] public void CompleteSession_ShouldCompleteSession() Constructor_InvalidParameters_ShouldThrowArgumentException() [Fact] public void Constructor_InvalidParameters_ShouldThrowArgumentException() Constructor_ValidParameters_ShouldInitializeCorrectly() [Fact] public void Constructor_ValidParameters_ShouldInitializeCorrectly() GetRemainChunks_ShouldReturnCorrectRemainingChunks() [Fact] public void GetRemainChunks_ShouldReturnCorrectRemainingChunks() IsAllChunkUploaded_ShouldReturnTrueWhenAllChunksUploaded() [Fact] public void IsAllChunkUploaded_ShouldReturnTrueWhenAllChunksUploaded() IsCanceled_ShouldReturnTrueWhenSessionCanceled() [Fact] public void IsCanceled_ShouldReturnTrueWhenSessionCanceled() IsChunkUploaded_ShouldReturnTrueForUploadedChunk() [Fact] public void IsChunkUploaded_ShouldReturnTrueForUploadedChunk() IsCompleted_ShouldReturnTrueWhenSessionCompleted() [Fact] public void IsCompleted_ShouldReturnTrueWhenSessionCompleted() PauseSession_ShouldPauseSession() [Fact] public void PauseSession_ShouldPauseSession()"
  },
  "api/AdvanceFileUpload.Domain.Test.html": {
    "href": "api/AdvanceFileUpload.Domain.Test.html",
    "title": "Namespace AdvanceFileUpload.Domain.Test | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Domain.Test Classes FileUploadSessionTests"
  },
  "api/AdvanceFileUpload.Domain.html": {
    "href": "api/AdvanceFileUpload.Domain.html",
    "title": "Namespace AdvanceFileUpload.Domain | Uploading File API",
    "keywords": "Namespace AdvanceFileUpload.Domain Classes ChunkFile Represents a chunk file in a file upload session. FileUploadSession Represents a file upload session. Enums FileUploadSessionStatus Represents the status of a file upload session."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Uploading File API",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Uploading File API",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Uploading File API",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}